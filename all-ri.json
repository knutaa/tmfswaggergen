{
  "swagger": "2.0",
  "info": {
    "title": "TM Forum Open API Reference Implementation",
    "description": "This is the combined set of APIs intended for reference implementation generation",
    "version": "1.0.0"
  },
  "host": "serverRoot",
  "basePath": "/tmf-api/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/productCatalogManagement/v2/catalog": {
      "get": {
        "operationId": "tMF620listCatalog",
        "summary": "List or find 'Catalog' objects",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name of the catalog"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Indicates the (class) type of catalog. For entity catalogs, this will be 'EntityCatalog'."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: Indicates<b> </b>the base (class) type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Catalog version"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF620Catalog"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF620createCatalog",
        "summary": "Creates a 'Catalog'",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF620Catalog_Create"
            },
            "required": true,
            "in": "body",
            "name": "catalog",
            "description": "The Catalog to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF620Catalog"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      }
    },
    "/productCatalogManagement/v2/catalog/{id}": {
      "get": {
        "operationId": "tMF620retrieveCatalog",
        "summary": "Retrieves a 'Catalog' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Catalog"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF620Catalog"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF620patchCatalog",
        "summary": "Updates partially a 'Catalog' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Catalog"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF620Catalog_Update"
            },
            "required": true,
            "in": "body",
            "name": "catalog",
            "description": "The Catalog to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF620Catalog"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF620deleteCatalog",
        "summary": "Deletes a 'Catalog' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Catalog"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      }
    },
    "/productCatalogManagement/v2/category": {
      "get": {
        "operationId": "tMF620listCategory",
        "summary": "List or find 'Category' objects",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Category version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "parentId",
            "description": "For filtering: Unique identifier of the parent category"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "isRoot",
            "description": "For filtering: If true, this Boolean indicates that the category is a root of categories"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: the class type of the Category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: the base class type of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: link to the schema describing this category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "subCategory.version",
            "description": "For filtering: Category version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "subCategory.name",
            "description": "For filtering: Name of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "subCategory.@referredType",
            "description": "For filtering: the class type of the referred Category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOffering.name",
            "description": "For filtering: Name of the product offering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOffering.@referredType",
            "description": "For filtering: the class type of the referred product offering"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF620Category"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF620createCategory",
        "summary": "Creates a 'Category'",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF620Category_Create"
            },
            "required": true,
            "in": "body",
            "name": "category",
            "description": "The Category to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF620Category"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      }
    },
    "/productCatalogManagement/v2/category/{id}": {
      "get": {
        "operationId": "tMF620retrieveCategory",
        "summary": "Retrieves a 'Category' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Category"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF620Category"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF620patchCategory",
        "summary": "Updates partially a 'Category' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Category"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF620Category_Update"
            },
            "required": true,
            "in": "body",
            "name": "category",
            "description": "The Category to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF620Category"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF620deleteCategory",
        "summary": "Deletes a 'Category' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Category"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      }
    },
    "/productCatalogManagement/v2/productOffering": {
      "get": {
        "operationId": "tMF620listProductOffering",
        "summary": "List or find 'ProductOffering' objects",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name of the productOffering"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "isBundle",
            "description": "For filtering: isBundle determines whether a productOffering represents a single productOffering (false), or a bundle of productOfferings (true)."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: ProductOffering version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Class type of the product offering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: Immediate base (class) type of the product offering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: A link to the schema describing this product offering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "place.name",
            "description": "For filtering: A user-friendly name for the place, such as \"Paris Store\", \"London Store\", \"Main Home\""
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "place.address",
            "description": "For filtering: A string characterizing an address (for instance a formatted address or an identifier taken from an address database or an address API)."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "place.@referredType",
            "description": "For filtering: class type of the referred Place object"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "place.role",
            "description": "For filtering: Role of the place (for instance: 'home delivery', 'shop retrieval')"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceLevelAgreement.name",
            "description": "For filtering: Name of the service level agreement"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceLevelAgreement.@referredType",
            "description": "For filtering: class type of referred Service Level Agreement"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productSpecification.version",
            "description": "For filtering: Version of the product specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productSpecification.name",
            "description": "For filtering: Name of the product specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productSpecification.@referredType",
            "description": "For filtering: class type of referred Product Specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "channel.name",
            "description": "For filtering: Name of the channel"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "channel.@referredType",
            "description": "For filtering: (Class) type of the referred channel like DistributionChannel, SalesChannel and so on"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceCandidate.version",
            "description": "For filtering: Version of the service candidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceCandidate.name",
            "description": "For filtering: Name of the service candidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceCandidate.@referredType",
            "description": "For filtering: The Class type of  referred Service Candidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.type",
            "description": "For filtering: Attachment type such as video, picture"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.url",
            "description": "For filtering: Uniform Resource Locator, is a web page address (a subset of URI)"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.mimeType",
            "description": "For filtering: Attachment mime type such as extension file for video, picture and document"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.@type",
            "description": "For filtering: the class type of the Attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.@baseType",
            "description": "For filtering: The immediate base class type of the attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.@schemaLocation",
            "description": "For filtering: A link to the schema describing this attachment entity"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.version",
            "description": "For filtering: Category version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.name",
            "description": "For filtering: Name of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.@referredType",
            "description": "For filtering: the class type of the referred Category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceCandidate.version",
            "description": "For filtering: Version of the resource candidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceCandidate.name",
            "description": "For filtering: Name of the resource candidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceCandidate.@referredType",
            "description": "For filtering: The Class type of referred Resource Candidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingTerm.name",
            "description": "For filtering: Name of the productOfferingTerm"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingTerm.@type",
            "description": "For filtering: The class type of ProductOfferingTerm"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingTerm.@schemaLocation",
            "description": "For filtering: A link to the schema describing this product offering term"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "marketSegment.name",
            "description": "For filtering: Name of the market segment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "marketSegment.@referredType",
            "description": "For filtering: (Class) type of the referred market segment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.name",
            "description": "For filtering: Name of the productOfferingPrice"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.priceType",
            "description": "For filtering: Indicates the price type: recurring, one time, usage"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.unitOfMeasure",
            "description": "For filtering: Could be minutes, GB..."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.recurringChargePeriod",
            "description": "For filtering: Could be month, week..."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.version",
            "description": "For filtering: ProductOffering version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.@type",
            "description": "For filtering: The class type of the product offering price"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.@baseType",
            "description": "For filtering: the immediate base class of product offering price"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.@schemaLocation",
            "description": "For filtering: hyperlink reference to the product offering price schema"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.isBundle",
            "description": "For filtering: a flag indicating if this product offering price is bundle (composite) or not"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "agreement.name",
            "description": "For filtering: Name of the agreement"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "agreement.@referredType",
            "description": "For filtering: class type of the referred Agreement"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "bundledProductOffering.lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "bundledProductOffering.name",
            "description": "For filtering: Name of the BundledProductOffering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "prodSpecCharValueUse.name",
            "description": "For filtering: Name of the associated productSpecCharacteristic"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "prodSpecCharValueUse.valueType",
            "description": "For filtering: A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "prodSpecCharValueUse.minCardinality",
            "description": "For filtering: The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "prodSpecCharValueUse.maxCardinality",
            "description": "For filtering: The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF620ProductOffering"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF620createProductOffering",
        "summary": "Creates a 'ProductOffering'",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF620ProductOffering_Create"
            },
            "required": true,
            "in": "body",
            "name": "productOffering",
            "description": "The Product Offering to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF620ProductOffering"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      }
    },
    "/productCatalogManagement/v2/productOffering/{id}": {
      "get": {
        "operationId": "tMF620retrieveProductOffering",
        "summary": "Retrieves a 'ProductOffering' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Product Offering"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF620ProductOffering"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF620patchProductOffering",
        "summary": "Updates partially a 'ProductOffering' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Product Offering"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF620ProductOffering_Update"
            },
            "required": true,
            "in": "body",
            "name": "productOffering",
            "description": "The Product Offering to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF620ProductOffering"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF620deleteProductOffering",
        "summary": "Deletes a 'ProductOffering' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Product Offering"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      }
    },
    "/productCatalogManagement/v2/productOfferingPrice": {
      "get": {
        "operationId": "tMF620listProductOfferingPrice",
        "summary": "List or find 'ProductOfferingPrice' objects",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name of the productOfferingPrice"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: ProductOffering version"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "priceType",
            "description": "For filtering: A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
          },
          {
            "name": "unitOfMeasure.value",
            "format": "float",
            "required": false,
            "in": "query",
            "type": "number",
            "description": "For filtering: A positive floating point number"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "unitOfMeasure.unit",
            "description": "For filtering: Currency (ISO4217 norm uses 3 letters to define the currency)"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "recurringChargePeriodType",
            "description": "For filtering: The period to repeat the application of the price\nCould be month, week..."
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "recurringChargePeriodLength",
            "description": "For filtering: the period of the recurring charge:  1, 2, ... .It sets to zero if it is not applicable"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: The class type of this Product offering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: the immediate base class type of this product offering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: hyperlink reference to the schema describing this resource"
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: the last update time of this POP"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "isBundle",
            "description": "For filtering: A flag indicating if this POP is composite (bundle) or not"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: the lifecycle status of this POP"
          },
          {
            "name": "price.value",
            "format": "float",
            "required": false,
            "in": "query",
            "type": "number",
            "description": "For filtering: A positive floating point number"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "price.unit",
            "description": "For filtering: Currency (ISO4217 norm uses 3 letters to define the currency)"
          },
          {
            "name": "percentage",
            "format": "float",
            "required": false,
            "in": "query",
            "type": "number",
            "description": "For filtering: Percentage to apply for ProdOfferPriceAlteration (Discount)"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "bundledPopRelationship.name",
            "description": "For filtering: Name of  the associated product offering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "bundledPopRelationship.@type",
            "description": "For filtering: (Class) type of the associated product offering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "popRelationship.name",
            "description": "For filtering: Name of  the associated product offering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "popRelationship.@type",
            "description": "For filtering: (Class) type of the associated product offering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "prodSpecCharValueUse.name",
            "description": "For filtering: Name of the associated productSpecCharacteristic"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "prodSpecCharValueUse.valueType",
            "description": "For filtering: A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "prodSpecCharValueUse.minCardinality",
            "description": "For filtering: The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "prodSpecCharValueUse.maxCardinality",
            "description": "For filtering: The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingTerm.name",
            "description": "For filtering: Name of the productOfferingTerm"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingTerm.@type",
            "description": "For filtering: The class type of ProductOfferingTerm"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingTerm.@schemaLocation",
            "description": "For filtering: A link to the schema describing this product offering term"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "place.name",
            "description": "For filtering: A user-friendly name for the place, such as \"Paris Store\", \"London Store\", \"Main Home\""
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "place.address",
            "description": "For filtering: A string characterizing an address (for instance a formatted address or an identifier taken from an address database or an address API)."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "place.@referredType",
            "description": "For filtering: class type of the referred Place object"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "place.role",
            "description": "For filtering: Role of the place (for instance: 'home delivery', 'shop retrieval')"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "constraint.version",
            "description": "For filtering: constraint version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "constraint.name",
            "description": "For filtering: Name given to the constraint"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "constraint.@referredType",
            "description": "For filtering: The (class) type of the referred constraint"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "pricingLogicAlgorithm.name",
            "description": "For filtering: Name given to the PLA"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "pricingLogicAlgorithm.plaSpecId",
            "description": "For filtering: id of corresponding PLA specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "pricingLogicAlgorithm.@type",
            "description": "For filtering: The class type of this PLA"
          },
          {
            "name": "tax.taxRate",
            "format": "float",
            "required": false,
            "in": "query",
            "type": "number",
            "description": "For filtering: Tax rate"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF620ProductOfferingPrice"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF620createProductOfferingPrice",
        "summary": "Creates a 'ProductOfferingPrice'",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF620ProductOfferingPrice_Create"
            },
            "required": true,
            "in": "body",
            "name": "productOfferingPrice",
            "description": "The Product Offering Price to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF620ProductOfferingPrice"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      }
    },
    "/productCatalogManagement/v2/productOfferingPrice/{id}": {
      "get": {
        "operationId": "tMF620retrieveProductOfferingPrice",
        "summary": "Retrieves a 'ProductOfferingPrice' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Product Offering Price"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF620ProductOfferingPrice"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF620patchProductOfferingPrice",
        "summary": "Updates partially a 'ProductOfferingPrice' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Product Offering Price"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF620ProductOfferingPrice_Update"
            },
            "required": true,
            "in": "body",
            "name": "productOfferingPrice",
            "description": "The Product Offering Price to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF620ProductOfferingPrice"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF620deleteProductOfferingPrice",
        "summary": "Deletes a 'ProductOfferingPrice' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Product Offering Price"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      }
    },
    "/productCatalogManagement/v2/productSpecification": {
      "get": {
        "operationId": "tMF620listProductSpecification",
        "summary": "List or find 'ProductSpecification' objects",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name of the product specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "brand",
            "description": "For filtering: The manufacturer or trademark of the specification"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "isBundle",
            "description": "For filtering: isBundle determines whether a productSpecification represents a single productSpecification (false), or a bundle of productSpecification (true)."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productNumber",
            "description": "For filtering: An identification number assigned to uniquely identity the specification"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Product specification version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: class type of the product specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: base class type  (immediate parent) of the product specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: hyperlink reference to schema describing this object"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.role",
            "description": "For filtering: Role of the related party."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.name",
            "description": "For filtering: Name of the related party"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.@referredType",
            "description": "For filtering: The class type of referred party/party role reference"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productSpecCharacteristic.name",
            "description": "For filtering: Name of the productSpecCharacteristic"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productSpecCharacteristic.valueType",
            "description": "For filtering: A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "productSpecCharacteristic.configurable",
            "description": "For filtering: If true, the Boolean indicates that the productSpecCharacteristic is configurable"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productSpecCharacteristic.@type",
            "description": "For filtering: the class type of this characteristic"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productSpecCharacteristic.@schemaLocation",
            "description": "For filtering: hyperlink reference to the schema describing this characteristic"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productSpecCharacteristic.@valueSchemaLocation",
            "description": "For filtering: This (optional) field provides a link to the schema describing the value type."
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "productSpecCharacteristic.minCardinality",
            "description": "For filtering: The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "productSpecCharacteristic.maxCardinality",
            "description": "For filtering: The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "productSpecCharacteristic.isUnique",
            "description": "For filtering: An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productSpecCharacteristic.regex",
            "description": "For filtering: A rule or principle represented in regular expression used to derive the value of a characteristic value"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "productSpecCharacteristic.extensible",
            "description": "For filtering: An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a product"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecification.name",
            "description": "For filtering: Name of the requiredServiceSpecification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecification.version",
            "description": "For filtering: Service specification version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecification.@referredType",
            "description": "For filtering: the class type of associated service specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "targetProductSchema.@referredType",
            "description": "For filtering: class type of the target product"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "targetProductSchema.@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing the target product"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productSpecificationRelationship.type",
            "description": "For filtering: Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecification.name",
            "description": "For filtering: Name of the requiredResourceSpecification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecification.version",
            "description": "For filtering: Resource specification version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecification.@referredType",
            "description": "For filtering: the class type of associated resource specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.type",
            "description": "For filtering: Attachment type such as video, picture"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.url",
            "description": "For filtering: Uniform Resource Locator, is a web page address (a subset of URI)"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.mimeType",
            "description": "For filtering: Attachment mime type such as extension file for video, picture and document"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.@type",
            "description": "For filtering: the class type of the Attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.@baseType",
            "description": "For filtering: The immediate base class type of the attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.@schemaLocation",
            "description": "For filtering: A link to the schema describing this attachment entity"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "bundledProductSpecification.lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "bundledProductSpecification.name",
            "description": "For filtering: Name of the product specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "bundledProductSpecification.@type",
            "description": "For filtering: the class type of the corresponding product specification"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF620ProductSpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF620createProductSpecification",
        "summary": "Creates a 'ProductSpecification'",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF620ProductSpecification_Create"
            },
            "required": true,
            "in": "body",
            "name": "productSpecification",
            "description": "The Product Specification to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF620ProductSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      }
    },
    "/productCatalogManagement/v2/productSpecification/{id}": {
      "get": {
        "operationId": "tMF620retrieveProductSpecification",
        "summary": "Retrieves a 'ProductSpecification' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Product Specification"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF620ProductSpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF620patchProductSpecification",
        "summary": "Updates partially a 'ProductSpecification' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Product Specification"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF620ProductSpecification_Update"
            },
            "required": true,
            "in": "body",
            "name": "productSpecification",
            "description": "The Product Specification to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF620ProductSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF620deleteProductSpecification",
        "summary": "Deletes a 'ProductSpecification' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Product Specification"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      }
    },
    "/productCatalogManagement/v2/importJob": {
      "get": {
        "operationId": "tMF620listImportJob",
        "summary": "List or find 'ImportJob' objects",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "contentType",
            "description": "For filtering: Indicates the format of the imported data"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "path",
            "description": "For filtering: URL of the root resource where the content of the file specified by the import job must be applied"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "status",
            "description": "For filtering: Status of the import job (not started, running, succeeded, failed)"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "url",
            "description": "For filtering: URL of the file containing the data to be imported"
          },
          {
            "name": "completionDate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date at which the job was completed"
          },
          {
            "name": "creationDate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date at which the job was created"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "errorLog",
            "description": "For filtering: Reason for failure if status is failed"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF620ImportJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF620createImportJob",
        "summary": "Creates a 'ImportJob'",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF620ImportJob_Create"
            },
            "required": true,
            "in": "body",
            "name": "importJob",
            "description": "The Import Job to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF620ImportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      }
    },
    "/productCatalogManagement/v2/importJob/{id}": {
      "get": {
        "operationId": "tMF620retrieveImportJob",
        "summary": "Retrieves a 'ImportJob' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Import Job"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF620ImportJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF620deleteImportJob",
        "summary": "Deletes a 'ImportJob' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Import Job"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      }
    },
    "/productCatalogManagement/v2/exportJob": {
      "get": {
        "operationId": "tMF620listExportJob",
        "summary": "List or find 'ExportJob' objects",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "query",
            "description": "For filtering: Used to scope the exported data"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "path",
            "description": "For filtering: URL of the root resource acting as the source for streaming content to the file specified by the export job"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "contentType",
            "description": "For filtering: The format of the exported data"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "status",
            "description": "For filtering: Status of the export job (not started, running, succeeded, failed)"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "url",
            "description": "For filtering: URL of the file containing the data to be exported"
          },
          {
            "name": "completionDate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Data at which the job was completed"
          },
          {
            "name": "creationDate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date at which the job was created"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "errorLog",
            "description": "For filtering: Reason for failure"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF620ExportJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF620createExportJob",
        "summary": "Creates a 'ExportJob'",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF620ExportJob_Create"
            },
            "required": true,
            "in": "body",
            "name": "exportJob",
            "description": "The Export Job to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF620ExportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      }
    },
    "/productCatalogManagement/v2/exportJob/{id}": {
      "get": {
        "operationId": "tMF620retrieveExportJob",
        "summary": "Retrieves a 'ExportJob' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Export Job"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF620ExportJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF620deleteExportJob",
        "summary": "Deletes a 'ExportJob' by Id",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Export Job"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      }
    },
    "/productCatalogManagement/v2/hub": {
      "post": {
        "operationId": "tMF620registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF620EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF620EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      }
    },
    "/productCatalogManagement/v2/hub/{id}": {
      "delete": {
        "operationId": "tMF620unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF620 ProductCatalog"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "201": {
            "description": "Unsubscribed"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF620Error"
            }
          }
        }
      }
    },
    "/troubleTicket/v2/troubleTicket": {
      "get": {
        "operationId": "tMF621listTroubleTicket",
        "summary": "List or find 'TroubleTicket' objects",
        "tags": [
          "TMF621 TroubleTicket"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF621TroubleTicket"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF621createTroubleTicket",
        "summary": "Creates a 'TroubleTicket'",
        "tags": [
          "TMF621 TroubleTicket"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF621TroubleTicket_Create"
            },
            "required": true,
            "in": "body",
            "name": "troubleTicket",
            "description": "The Trouble Ticket to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF621TroubleTicket"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          }
        }
      }
    },
    "/troubleTicket/v2/troubleTicket/{id}": {
      "get": {
        "operationId": "tMF621retrieveTroubleTicket",
        "summary": "Retrieves a 'TroubleTicket' by Id",
        "tags": [
          "TMF621 TroubleTicket"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Trouble Ticket"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF621TroubleTicket"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF621patchTroubleTicket",
        "summary": "Updates partially a 'TroubleTicket' by Id",
        "tags": [
          "TMF621 TroubleTicket"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Trouble Ticket"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF621TroubleTicket_Update"
            },
            "required": true,
            "in": "body",
            "name": "troubleTicket",
            "description": "The Trouble Ticket to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF621TroubleTicket"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF621deleteTroubleTicket",
        "summary": "Deletes a 'TroubleTicket' by Id",
        "tags": [
          "TMF621 TroubleTicket"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Trouble Ticket"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          }
        }
      }
    },
    "/troubleTicket/v2/hub": {
      "post": {
        "operationId": "tMF621registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF621 TroubleTicket"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF621EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF621EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          }
        }
      }
    },
    "/troubleTicket/v2/hub/{id}": {
      "delete": {
        "operationId": "tMF621unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF621 TroubleTicket"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF621Error"
            }
          }
        }
      }
    },
    "/productOrdering/v4/productOrder": {
      "post": {
        "tags": [
          "TMF622 ProductOrder"
        ],
        "operationId": "tMF622productOrderCreate",
        "summary": "Create a product order",
        "description": "This operation creates a product order entity. Mandatory and non mandatory attributes, additional rules and default values are provided in the specifications document.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "productOrder",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF622POST_REQ_ProductOrder"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF622ProductOrder"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF622 ProductOrder"
        ],
        "operationId": "tMF622productOrderFind",
        "summary": "List product orders",
        "description": "This operation list product order entities. Attribute  selection  is enabled for all first level attributes. Filtering may  be available  depending  on the compliance  level supported  by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attributes selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF622ProductOrder"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "",
                "type": "string"
              },
              "X-Result-Count": {
                "description": "",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          }
        }
      }
    },
    "/productOrdering/v4/productOrder/{productOrderId}": {
      "get": {
        "tags": [
          "TMF622 ProductOrder"
        ],
        "operationId": "tMF622productOrderGet",
        "summary": "Retrieve a product order",
        "description": "This operation retrieves  a product order entity. Attribute  selection  is enabled for all first level attributes. Filtering on sub-resources  may  be available  depending on the compliance  level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "productOrderId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attributes selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF622ProductOrder"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TMF622 ProductOrder"
        ],
        "operationId": "tMF622productOrderPatch",
        "summary": "Patch a product order",
        "description": "This    operation    allows    partial    updates    of    a    product    order    entity.    Support    of    json/merge (https://tools.ietf.org/html/rfc7386)  is  mandatory,  support  of  json/patch  (http://tools.ietf.org/html/rfc5789)  is optional.\nPatchable and not patchable attributes are provided in the specifications document.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "productOrderId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "productOrder",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF622ProductOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF622ProductOrder"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF622 ProductOrder"
        ],
        "operationId": "tMF622productOrderDelete",
        "summary": "Delete a product order",
        "description": "This operation deletes a product order entity. This operation is available only to ADMIN API users.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "productOrderId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF622ErrorRepresentation"
            }
          }
        }
      }
    },
    "/customerManagement/v3/customer": {
      "get": {
        "operationId": "tMF629listCustomer",
        "summary": "List or find 'Customer' objects",
        "tags": [
          "TMF629 CustomerManagement"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF629Customer"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF629createCustomer",
        "summary": "Creates a 'Customer'",
        "tags": [
          "TMF629 CustomerManagement"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF629Customer_Create"
            },
            "required": true,
            "in": "body",
            "name": "customer",
            "description": "The Customer to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF629Customer"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          }
        }
      }
    },
    "/customerManagement/v3/customer/{id}": {
      "get": {
        "operationId": "tMF629retrieveCustomer",
        "summary": "Retrieves a 'Customer' by Id",
        "tags": [
          "TMF629 CustomerManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Customer"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF629Customer"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF629patchCustomer",
        "summary": "Updates partially a 'Customer' by Id",
        "tags": [
          "TMF629 CustomerManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Customer"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF629Customer_Update"
            },
            "required": true,
            "in": "body",
            "name": "customer",
            "description": "The Customer to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF629Customer"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF629deleteCustomer",
        "summary": "Deletes a 'Customer' by Id",
        "tags": [
          "TMF629 CustomerManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Customer"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          }
        }
      }
    },
    "/customerManagement/v3/hub": {
      "post": {
        "operationId": "tMF629registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF629 CustomerManagement"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF629EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF629EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          }
        }
      }
    },
    "/customerManagement/v3/hub/{id}": {
      "delete": {
        "operationId": "tMF629unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF629 CustomerManagement"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF629Error"
            }
          }
        }
      }
    },
    "/partyManagement/v1/individual": {
      "post": {
        "tags": [
          "TMF632 PartyManagement"
        ],
        "operationId": "tMF632individualCreate",
        "summary": "Create an individual",
        "description": "This operation is used to create an individual entity.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "Individual",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF632Individual"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF632Individual"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF632 PartyManagement"
        ],
        "operationId": "tMF632individualFind",
        "summary": "List individuals",
        "description": "This operation lists individual entities (physical persons).\nAttribute selection is enabled for all first level attributes.\nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF632Individual"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual nulber of items returned in the response body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          }
        }
      }
    },
    "/partyManagement/v1/individual/{individualId}": {
      "get": {
        "tags": [
          "TMF632 PartyManagement"
        ],
        "operationId": "tMF632individualGet",
        "summary": "Retrieve an individual",
        "description": "This operation retrieves an individual entity (physical person).\nAttribute selection is enabled for all first level attributes.\nFiltering on sub-resources may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "individualId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the individual"
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF632Individual"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          }
        }
      },
      "put": {
        "tags": [
          "TMF632 PartyManagement"
        ],
        "operationId": "tMF632individualUpdate",
        "summary": "Update completely an individual",
        "description": "This operation allows to overwrite an existing individual entity.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "individualId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the individual"
          },
          {
            "name": "Individual",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF632Individual"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF632Individual"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TMF632 PartyManagement"
        ],
        "operationId": "tMF632individualPatch",
        "summary": "Update partially an individual",
        "description": "This operation partially updates an individual entity.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "individualId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the individual"
          },
          {
            "name": "Individual",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF632Individual"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF632Individual"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF632 PartyManagement"
        ],
        "operationId": "tMF632individualDelete",
        "summary": "Delete an individual",
        "description": "This operation is used to delete an existing individual entity.\nNote: this operation is available only to ADMIN API users.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "individualId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the individual"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          }
        }
      }
    },
    "/partyManagement/v1/organization": {
      "post": {
        "tags": [
          "TMF632 PartyManagement"
        ],
        "operationId": "tMF632organizationCreate",
        "summary": "Create an organization",
        "description": "This operation is used to create an organization entity.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "Organization",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF632Organization"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF632Organization"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF632 PartyManagement"
        ],
        "operationId": "tMF632organizationFind",
        "summary": "List organizations",
        "description": "This operation lists organization entities (corporations).\nAttribute selection is enabled for all first level attributes.\nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF632Organization"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          }
        }
      }
    },
    "/partyManagement/v1/organization/{organizationId}": {
      "get": {
        "tags": [
          "TMF632 PartyManagement"
        ],
        "operationId": "tMF632organizationGet",
        "summary": "Retrieve an organization",
        "description": "This operation retrieves an organization entity (corporation).\nAttribute selection is enabled for all first level attributes.\nFiltering on sub-resources may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the organization"
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF632Organization"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          }
        }
      },
      "put": {
        "tags": [
          "TMF632 PartyManagement"
        ],
        "operationId": "tMF632organizationUpdate",
        "summary": "Update completely an organization",
        "description": "This operation allows to overwrite an existing organization entity.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the organization"
          },
          {
            "name": "Organization",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF632Organization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF632Organization"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TMF632 PartyManagement"
        ],
        "operationId": "tMF632organizationPatch",
        "summary": "Update partially an organization",
        "description": "This operation partially updates an organization entity.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the organization"
          },
          {
            "name": "Organization",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF632Organization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF632Organization"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF632 PartyManagement"
        ],
        "operationId": "tMF632organizationDelete",
        "summary": "Delete an organization",
        "description": "This operation is used to delete an existing organization entity.\nNote: this operation is available only to ADMIN API users.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the organization"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          }
        }
      }
    },
    "/partyManagement/v1/hub": {
      "post": {
        "tags": [
          "TMF632 PartyManagement"
        ],
        "operationId": "tMF632hubCreate",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF632HubInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF632Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          }
        }
      }
    },
    "/partyManagement/v1/hub/{hubId}": {
      "delete": {
        "tags": [
          "TMF632 PartyManagement"
        ],
        "operationId": "tMF632hubDelete",
        "summary": "Unregister a listener",
        "description": "Clears the communication endpoint address that was set by creating the Hub\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF632ErrorRepresentation"
            }
          }
        }
      }
    },
    "/serviceCatalogManagement/v2/serviceCatalog": {
      "get": {
        "operationId": "tMF633listServiceCatalog",
        "summary": "List or find 'ServiceCatalog' objects",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name of the catalog"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Indicates the (class) type of catalog. For service catalogs, this will be 'ServiceCatalog'."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: Indicates<b> </b>the base (class) type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Catalog version"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF633ServiceCatalog"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF633createServiceCatalog",
        "summary": "Creates a 'ServiceCatalog'",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF633ServiceCatalog_Create"
            },
            "required": true,
            "in": "body",
            "name": "serviceCatalog",
            "description": "The Service Catalog to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF633ServiceCatalog"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      }
    },
    "/serviceCatalogManagement/v2/serviceCatalog/{id}": {
      "get": {
        "operationId": "tMF633retrieveServiceCatalog",
        "summary": "Retrieves a 'ServiceCatalog' by Id",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Catalog"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF633ServiceCatalog"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF633patchServiceCatalog",
        "summary": "Updates partially a 'ServiceCatalog' by Id",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Catalog"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF633ServiceCatalog_Update"
            },
            "required": true,
            "in": "body",
            "name": "serviceCatalog",
            "description": "The Service Catalog to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF633ServiceCatalog"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF633deleteServiceCatalog",
        "summary": "Deletes a 'ServiceCatalog' by Id",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Catalog"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      }
    },
    "/serviceCatalogManagement/v2/serviceCategory": {
      "get": {
        "operationId": "tMF633listServiceCategory",
        "summary": "List or find 'ServiceCategory' objects",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: The (class) type of this category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemalLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: Immediate base class type of this category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Category version"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "parentId",
            "description": "For filtering: Unique identifier of the parent category"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "isRoot",
            "description": "For filtering: If true, this Boolean indicates that the category is a root of categories"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.role",
            "description": "For filtering: Role of the related party."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.name",
            "description": "For filtering: Name of the related party"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceCandidate.version",
            "description": "For filtering: ServiceCandidate version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceCandidate.name",
            "description": "For filtering: Name given to the ServiceCandidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceCandidate.@type",
            "description": "For filtering: The (class) type of the ServiceCandidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.version",
            "description": "For filtering: Category version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.name",
            "description": "For filtering: Name of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.@type",
            "description": "For filtering: the class type of the category"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF633ServiceCategory"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF633createServiceCategory",
        "summary": "Creates a 'ServiceCategory'",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF633ServiceCategory_Create"
            },
            "required": true,
            "in": "body",
            "name": "serviceCategory",
            "description": "The Service Category to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF633ServiceCategory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      }
    },
    "/serviceCatalogManagement/v2/serviceCategory/{id}": {
      "get": {
        "operationId": "tMF633retrieveServiceCategory",
        "summary": "Retrieves a 'ServiceCategory' by Id",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Category"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF633ServiceCategory"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF633patchServiceCategory",
        "summary": "Updates partially a 'ServiceCategory' by Id",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Category"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF633ServiceCategory_Update"
            },
            "required": true,
            "in": "body",
            "name": "serviceCategory",
            "description": "The Service Category to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF633ServiceCategory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF633deleteServiceCategory",
        "summary": "Deletes a 'ServiceCategory' by Id",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Category"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      }
    },
    "/serviceCatalogManagement/v2/serviceCandidate": {
      "get": {
        "operationId": "tMF633listServiceCandidate",
        "summary": "List or find 'ServiceCandidate' objects",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name given to this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: The (immediate) base class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: the version of service candidate"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status of the service candidate."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.version",
            "description": "For filtering: Category version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.name",
            "description": "For filtering: Name of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.@type",
            "description": "For filtering: the class type of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecification.version",
            "description": "For filtering: ServiceSpecification version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecification.name",
            "description": "For filtering: Name given to the ServiceSpecification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecification.@type",
            "description": "For filtering: The (class) type of the ServiceSpecification"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF633ServiceCandidate"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF633createServiceCandidate",
        "summary": "Creates a 'ServiceCandidate'",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF633ServiceCandidate_Create"
            },
            "required": true,
            "in": "body",
            "name": "serviceCandidate",
            "description": "The Service Candidate to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF633ServiceCandidate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      }
    },
    "/serviceCatalogManagement/v2/serviceCandidate/{id}": {
      "get": {
        "operationId": "tMF633retrieveServiceCandidate",
        "summary": "Retrieves a 'ServiceCandidate' by Id",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Candidate"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF633ServiceCandidate"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF633patchServiceCandidate",
        "summary": "Updates partially a 'ServiceCandidate' by Id",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Candidate"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF633ServiceCandidate_Update"
            },
            "required": true,
            "in": "body",
            "name": "serviceCandidate",
            "description": "The Service Candidate to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF633ServiceCandidate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF633deleteServiceCandidate",
        "summary": "Deletes a 'ServiceCandidate' by Id",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Candidate"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      }
    },
    "/serviceCatalogManagement/v2/serviceSpecification": {
      "get": {
        "operationId": "tMF633listServiceSpecification",
        "summary": "List or find 'ServiceSpecification' objects",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name given to this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: The (immediate) base class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Service specification version"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status of the service specification"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "isBundle",
            "description": "For filtering: A flag indicates that if this service specification is a bundled specification (true) or single (false)."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecification.version",
            "description": "For filtering: ResourceSpecification version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecification.name",
            "description": "For filtering: Name given to the ResourceSpecification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecification.@type",
            "description": "For filtering: The (class) type of the ResourceSpecification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.name",
            "description": "For filtering: name given to the attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.@type",
            "description": "For filtering: Attachment class  type"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.uri",
            "description": "For filtering: Uniform Resource Identifier (URI) of the attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.mimeType",
            "description": "For filtering: Attachment mime type such as extension file for video, picture and document"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.name",
            "description": "For filtering: A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.valueType",
            "description": "For filtering: A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.configurable",
            "description": "For filtering: If true, the Boolean indicates that the ServiceSpecCharacteristic is configurable"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.@type",
            "description": "For filtering: (Class) type of the ServiceSpecCharacteristic"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.@schemaLocation",
            "description": "For filtering: A link to the schema describing this characteristic"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.@valueSchemaLocation",
            "description": "For filtering: This (optional) field provides a link to the schema describing the value type."
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.minCardinality",
            "description": "For filtering: The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.maxCardinality",
            "description": "For filtering: The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.isUnique",
            "description": "For filtering: An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.regex",
            "description": "For filtering: A rule or principle represented in regular expression used to derive the value of a characteristic value."
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "serviceSpecCharacteristic.extensible",
            "description": "For filtering: An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for an Entity."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.role",
            "description": "For filtering: Role of the related party."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.name",
            "description": "For filtering: Name of the related party"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecRelationship.type",
            "description": "For filtering: Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecRelationship.role",
            "description": "For filtering: The association role for this service specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceSpecRelationship.name",
            "description": "For filtering: The name given to the target service specification instance"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "targetServiceSchema.@type",
            "description": "For filtering: Class type of the target service"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "targetServiceSchema.@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing the target service"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF633ServiceSpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF633createServiceSpecification",
        "summary": "Creates a 'ServiceSpecification'",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF633ServiceSpecification_Create"
            },
            "required": true,
            "in": "body",
            "name": "serviceSpecification",
            "description": "The Service Specification to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF633ServiceSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      }
    },
    "/serviceCatalogManagement/v2/serviceSpecification/{id}": {
      "get": {
        "operationId": "tMF633retrieveServiceSpecification",
        "summary": "Retrieves a 'ServiceSpecification' by Id",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Specification"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF633ServiceSpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF633patchServiceSpecification",
        "summary": "Updates partially a 'ServiceSpecification' by Id",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Specification"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF633ServiceSpecification_Update"
            },
            "required": true,
            "in": "body",
            "name": "serviceSpecification",
            "description": "The Service Specification to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF633ServiceSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF633deleteServiceSpecification",
        "summary": "Deletes a 'ServiceSpecification' by Id",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Specification"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      }
    },
    "/serviceCatalogManagement/v2/importJob": {
      "get": {
        "operationId": "tMF633listImportJob",
        "summary": "List or find 'ImportJob' objects",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "contentType",
            "description": "For filtering: Indicates the format of the imported data"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "path",
            "description": "For filtering: URL of the root resource where the content of the file specified by the import job must be applied"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "status",
            "description": "For filtering: Status of the import job (not started, running, succeeded, failed)"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "url",
            "description": "For filtering: URL of the file containing the data to be imported"
          },
          {
            "name": "completionDate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date at which the job was completed"
          },
          {
            "name": "creationDate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date at which the job was created"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "errorLog",
            "description": "For filtering: Reason for failure if status is failed"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF633ImportJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF633createImportJob",
        "summary": "Creates a 'ImportJob'",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF633ImportJob_Create"
            },
            "required": true,
            "in": "body",
            "name": "importJob",
            "description": "The Import Job to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF633ImportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      }
    },
    "/serviceCatalogManagement/v2/importJob/{id}": {
      "get": {
        "operationId": "tMF633retrieveImportJob",
        "summary": "Retrieves a 'ImportJob' by Id",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Import Job"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF633ImportJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF633deleteImportJob",
        "summary": "Deletes a 'ImportJob' by Id",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Import Job"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      }
    },
    "/serviceCatalogManagement/v2/exportJob": {
      "get": {
        "operationId": "tMF633listExportJob",
        "summary": "List or find 'ExportJob' objects",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "query",
            "description": "For filtering: Used to scope the exported data"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "path",
            "description": "For filtering: URL of the root resource acting as the source for streaming content to the file specified by the export job"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "contentType",
            "description": "For filtering: The format of the exported data"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "status",
            "description": "For filtering: Status of the export job (not started, running, succeeded, failed)"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "url",
            "description": "For filtering: URL of the file containing the data to be exported"
          },
          {
            "name": "completionDate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Data at which the job was completed"
          },
          {
            "name": "creationDate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date at which the job was created"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "errorLog",
            "description": "For filtering: Reason for failure"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF633ExportJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF633createExportJob",
        "summary": "Creates a 'ExportJob'",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF633ExportJob_Create"
            },
            "required": true,
            "in": "body",
            "name": "exportJob",
            "description": "The Export Job to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF633ExportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      }
    },
    "/serviceCatalogManagement/v2/exportJob/{id}": {
      "get": {
        "operationId": "tMF633retrieveExportJob",
        "summary": "Retrieves a 'ExportJob' by Id",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Export Job"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF633ExportJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF633deleteExportJob",
        "summary": "Deletes a 'ExportJob' by Id",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Export Job"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      }
    },
    "/serviceCatalogManagement/v2/hub": {
      "post": {
        "operationId": "tMF633registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF633EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF633EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      }
    },
    "/serviceCatalogManagement/v2/hub/{id}": {
      "delete": {
        "operationId": "tMF633unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF633 ServiceCatalog"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "201": {
            "description": "Unsubscribed"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF633Error"
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v2/resourceCatalog": {
      "get": {
        "operationId": "tMF634listResourceCatalog",
        "summary": "List or find 'ResourceCatalog' objects",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name of the catalog"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Indicates the (class) type of catalog. For resource catalogs, this will be 'ResourceCatalog'."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: Indicates<b> </b>the base (class) type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Catalog version"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.role",
            "description": "For filtering: Role of the related party."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.name",
            "description": "For filtering: Name of the related party"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.version",
            "description": "For filtering: Category version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.name",
            "description": "For filtering: Name of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.@type",
            "description": "For filtering: the class type of the category"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF634ResourceCatalog"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF634createResourceCatalog",
        "summary": "Creates a 'ResourceCatalog'",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF634ResourceCatalog_Create"
            },
            "required": true,
            "in": "body",
            "name": "resourceCatalog",
            "description": "The Resource Catalog to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF634ResourceCatalog"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v2/resourceCatalog/{id}": {
      "get": {
        "operationId": "tMF634retrieveResourceCatalog",
        "summary": "Retrieves a 'ResourceCatalog' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource Catalog"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF634ResourceCatalog"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF634patchResourceCatalog",
        "summary": "Updates partially a 'ResourceCatalog' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource Catalog"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF634ResourceCatalog_Update"
            },
            "required": true,
            "in": "body",
            "name": "resourceCatalog",
            "description": "The Resource Catalog to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF634ResourceCatalog"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF634deleteResourceCatalog",
        "summary": "Deletes a 'ResourceCatalog' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource Catalog"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v2/resourceCategory": {
      "get": {
        "operationId": "tMF634listResourceCategory",
        "summary": "List or find 'ResourceCategory' objects",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: The (class) type of this category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemalLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: Immediate base class type of this category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Category version"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "parentId",
            "description": "For filtering: Unique identifier of the parent category"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "isRoot",
            "description": "For filtering: If true, this Boolean indicates that the category is a root of categories"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.version",
            "description": "For filtering: Category version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.name",
            "description": "For filtering: Name of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.@type",
            "description": "For filtering: the class type of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceCandidate.version",
            "description": "For filtering: ResourceCandidate version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceCandidate.name",
            "description": "For filtering: Name given to the ResourceCandidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceCandidate.@type",
            "description": "For filtering: The (class) type of the ResourceCandidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.role",
            "description": "For filtering: Role of the related party."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.name",
            "description": "For filtering: Name of the related party"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF634ResourceCategory"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF634createResourceCategory",
        "summary": "Creates a 'ResourceCategory'",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF634ResourceCategory_Create"
            },
            "required": true,
            "in": "body",
            "name": "resourceCategory",
            "description": "The Resource Category to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF634ResourceCategory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v2/resourceCategory/{id}": {
      "get": {
        "operationId": "tMF634retrieveResourceCategory",
        "summary": "Retrieves a 'ResourceCategory' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource Category"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF634ResourceCategory"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF634patchResourceCategory",
        "summary": "Updates partially a 'ResourceCategory' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource Category"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF634ResourceCategory_Update"
            },
            "required": true,
            "in": "body",
            "name": "resourceCategory",
            "description": "The Resource Category to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF634ResourceCategory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF634deleteResourceCategory",
        "summary": "Deletes a 'ResourceCategory' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource Category"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v2/resourceCandidate": {
      "get": {
        "operationId": "tMF634listResourceCandidate",
        "summary": "List or find 'ResourceCandidate' objects",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name given to this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: The (immediate) base class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: the version of resource candidate"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status of the resource candidate."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.version",
            "description": "For filtering: Category version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.name",
            "description": "For filtering: Name of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.@type",
            "description": "For filtering: the class type of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecification.version",
            "description": "For filtering: ResourceSpecification version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecification.name",
            "description": "For filtering: Name given to the ResourceSpecification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecification.@type",
            "description": "For filtering: The (class) type of the ResourceSpecification"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF634ResourceCandidate"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF634createResourceCandidate",
        "summary": "Creates a 'ResourceCandidate'",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF634ResourceCandidate_Create"
            },
            "required": true,
            "in": "body",
            "name": "resourceCandidate",
            "description": "The Resource Candidate to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF634ResourceCandidate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v2/resourceCandidate/{id}": {
      "get": {
        "operationId": "tMF634retrieveResourceCandidate",
        "summary": "Retrieves a 'ResourceCandidate' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource Candidate"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF634ResourceCandidate"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF634patchResourceCandidate",
        "summary": "Updates partially a 'ResourceCandidate' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource Candidate"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF634ResourceCandidate_Update"
            },
            "required": true,
            "in": "body",
            "name": "resourceCandidate",
            "description": "The Resource Candidate to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF634ResourceCandidate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF634deleteResourceCandidate",
        "summary": "Deletes a 'ResourceCandidate' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource Candidate"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v2/resourceSpecification": {
      "get": {
        "operationId": "tMF634listResourceSpecification",
        "summary": "List or find 'ResourceSpecification' objects",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name given to this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: The (immediate) base class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Resource Specification version"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status of the resource specification"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "isBundle",
            "description": "For filtering: A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category",
            "description": "For filtering: Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "targetResourceSchema.@type",
            "description": "For filtering: Class type of the target resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "targetResourceSchema.@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing the target resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "feature.version",
            "description": "For filtering: feature version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "feature.name",
            "description": "For filtering: Unique name given to the feature. it is Required if the feature is not introduced as a separate REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "feature.@type",
            "description": "For filtering: The optional (class) type of the feature"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "feature.isBundle",
            "description": "For filtering: A flag indicating if the feature is bundle (true) or not (false)."
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "feature.isEnabled",
            "description": "For filtering: A flag indicating if the feature is enabled (true) or not (false)."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.name",
            "description": "For filtering: name given to the attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.@type",
            "description": "For filtering: Attachment class  type"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.uri",
            "description": "For filtering: Uniform Resource Identifier (URI) of the attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.mimeType",
            "description": "For filtering: Attachment mime type such as extension file for video, picture and document"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.role",
            "description": "For filtering: Role of the related party."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.name",
            "description": "For filtering: Name of the related party"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.name",
            "description": "For filtering: A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.valueType",
            "description": "For filtering: A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.configurable",
            "description": "For filtering: If true, the Boolean indicates that the ResourceSpecCharacteristic is configurable"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.@type",
            "description": "For filtering: (Class) type of the ResourceSpecCharacteristic"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.@schemaLocation",
            "description": "For filtering: A link to the schema describing this characteristic specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.@valueSchemaLocation",
            "description": "For filtering: This (optional) field provides a link to the schema describing the value type"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.minCardinality",
            "description": "For filtering: The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.maxCardinality",
            "description": "For filtering: The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.isUnique",
            "description": "For filtering: An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.regex",
            "description": "For filtering: A rule or principle represented in regular expression used to derive the value of a characteristic value."
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.extensible",
            "description": "For filtering: An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecRelationship.type",
            "description": "For filtering: Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecRelationship.role",
            "description": "For filtering: The association role for this resource specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecRelationship.name",
            "description": "For filtering: The name given to the target resource specification instance"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF634ResourceSpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF634createResourceSpecification",
        "summary": "Creates a 'ResourceSpecification'",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF634ResourceSpecification_Create"
            },
            "required": true,
            "in": "body",
            "name": "resourceSpecification",
            "description": "The Resource Specification to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF634ResourceSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v2/resourceSpecification/{id}": {
      "get": {
        "operationId": "tMF634retrieveResourceSpecification",
        "summary": "Retrieves a 'ResourceSpecification' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource Specification"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF634ResourceSpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF634patchResourceSpecification",
        "summary": "Updates partially a 'ResourceSpecification' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource Specification"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF634ResourceSpecification_Update"
            },
            "required": true,
            "in": "body",
            "name": "resourceSpecification",
            "description": "The Resource Specification to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF634ResourceSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF634deleteResourceSpecification",
        "summary": "Deletes a 'ResourceSpecification' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource Specification"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v2/logicalResourceSpec": {
      "get": {
        "operationId": "tMF634listLogicalResourceSpec",
        "summary": "List or find 'LogicalResourceSpec' objects",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name given to this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: The (immediate) base class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Resource Specification version"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status of the resource specification"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "isBundle",
            "description": "For filtering: A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category",
            "description": "For filtering: Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "targetResourceSchema.@type",
            "description": "For filtering: Class type of the target resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "targetResourceSchema.@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing the target resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "feature.version",
            "description": "For filtering: feature version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "feature.name",
            "description": "For filtering: Unique name given to the feature. it is Required if the feature is not introduced as a separate REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "feature.@type",
            "description": "For filtering: The optional (class) type of the feature"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "feature.isBundle",
            "description": "For filtering: A flag indicating if the feature is bundle (true) or not (false)."
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "feature.isEnabled",
            "description": "For filtering: A flag indicating if the feature is enabled (true) or not (false)."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.name",
            "description": "For filtering: name given to the attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.@type",
            "description": "For filtering: Attachment class  type"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.uri",
            "description": "For filtering: Uniform Resource Identifier (URI) of the attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.mimeType",
            "description": "For filtering: Attachment mime type such as extension file for video, picture and document"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.role",
            "description": "For filtering: Role of the related party."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.name",
            "description": "For filtering: Name of the related party"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.name",
            "description": "For filtering: A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.valueType",
            "description": "For filtering: A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.configurable",
            "description": "For filtering: If true, the Boolean indicates that the ResourceSpecCharacteristic is configurable"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.@type",
            "description": "For filtering: (Class) type of the ResourceSpecCharacteristic"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.@schemaLocation",
            "description": "For filtering: A link to the schema describing this characteristic specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.@valueSchemaLocation",
            "description": "For filtering: This (optional) field provides a link to the schema describing the value type"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.minCardinality",
            "description": "For filtering: The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.maxCardinality",
            "description": "For filtering: The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.isUnique",
            "description": "For filtering: An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.regex",
            "description": "For filtering: A rule or principle represented in regular expression used to derive the value of a characteristic value."
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.extensible",
            "description": "For filtering: An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecRelationship.type",
            "description": "For filtering: Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecRelationship.role",
            "description": "For filtering: The association role for this resource specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecRelationship.name",
            "description": "For filtering: The name given to the target resource specification instance"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF634LogicalResourceSpec"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF634createLogicalResourceSpec",
        "summary": "Creates a 'LogicalResourceSpec'",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF634LogicalResourceSpec_Create"
            },
            "required": true,
            "in": "body",
            "name": "logicalResourceSpec",
            "description": "The Logical Resource Spec to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF634LogicalResourceSpec"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v2/logicalResourceSpec/{id}": {
      "get": {
        "operationId": "tMF634retrieveLogicalResourceSpec",
        "summary": "Retrieves a 'LogicalResourceSpec' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Logical Resource Spec"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF634LogicalResourceSpec"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF634patchLogicalResourceSpec",
        "summary": "Updates partially a 'LogicalResourceSpec' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Logical Resource Spec"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF634LogicalResourceSpec_Update"
            },
            "required": true,
            "in": "body",
            "name": "logicalResourceSpec",
            "description": "The Logical Resource Spec to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF634LogicalResourceSpec"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF634deleteLogicalResourceSpec",
        "summary": "Deletes a 'LogicalResourceSpec' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Logical Resource Spec"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v2/physicalResourceSpec": {
      "get": {
        "operationId": "tMF634listPhysicalResourceSpec",
        "summary": "List or find 'PhysicalResourceSpec' objects",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name given to this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: The (immediate) base class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Resource Specification version"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status of the resource specification"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "isBundle",
            "description": "For filtering: A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category",
            "description": "For filtering: Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "model",
            "description": "For filtering: This is a string that represents a manufacturer-allocated number used to identify the general type and/or category of the hardware item. This, in combination with the Part and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is an optional attribute."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "part",
            "description": "For filtering: This is a string that defines a manufacturer-allocated part number assigned by the organization that manufactures the hardware item. This, in combination with the Model and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "sku",
            "description": "For filtering: This is a string that defines the manufacturer-allocated Stock Keeping Unit (SKU) number of the hardware item. This is an optional attribute."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "vendor",
            "description": "For filtering: This is a string that defines the name of the manufacturer. This, in combination with the Model and the Part, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute for a physical resource."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "place.name",
            "description": "For filtering: A user-friendly name for the place, such as \"Paris Store\", \"London Store\", \"Main Home\""
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "place.role",
            "description": "For filtering: Role of the place (for instance: 'home delivery', 'shop retrieval')"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "targetResourceSchema.@type",
            "description": "For filtering: Class type of the target resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "targetResourceSchema.@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing the target resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "feature.version",
            "description": "For filtering: feature version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "feature.name",
            "description": "For filtering: Unique name given to the feature. it is Required if the feature is not introduced as a separate REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "feature.@type",
            "description": "For filtering: The optional (class) type of the feature"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "feature.isBundle",
            "description": "For filtering: A flag indicating if the feature is bundle (true) or not (false)."
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "feature.isEnabled",
            "description": "For filtering: A flag indicating if the feature is enabled (true) or not (false)."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.name",
            "description": "For filtering: name given to the attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.@type",
            "description": "For filtering: Attachment class  type"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.uri",
            "description": "For filtering: Uniform Resource Identifier (URI) of the attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.mimeType",
            "description": "For filtering: Attachment mime type such as extension file for video, picture and document"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.role",
            "description": "For filtering: Role of the related party."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.name",
            "description": "For filtering: Name of the related party"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.name",
            "description": "For filtering: A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.valueType",
            "description": "For filtering: A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.configurable",
            "description": "For filtering: If true, the Boolean indicates that the ResourceSpecCharacteristic is configurable"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.@type",
            "description": "For filtering: (Class) type of the ResourceSpecCharacteristic"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.@schemaLocation",
            "description": "For filtering: A link to the schema describing this characteristic specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.@valueSchemaLocation",
            "description": "For filtering: This (optional) field provides a link to the schema describing the value type"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.minCardinality",
            "description": "For filtering: The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.maxCardinality",
            "description": "For filtering: The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.isUnique",
            "description": "For filtering: An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.regex",
            "description": "For filtering: A rule or principle represented in regular expression used to derive the value of a characteristic value."
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "resourceSpecCharacteristic.extensible",
            "description": "For filtering: An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecRelationship.type",
            "description": "For filtering: Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecRelationship.role",
            "description": "For filtering: The association role for this resource specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceSpecRelationship.name",
            "description": "For filtering: The name given to the target resource specification instance"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF634PhysicalResourceSpec"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF634createPhysicalResourceSpec",
        "summary": "Creates a 'PhysicalResourceSpec'",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF634PhysicalResourceSpec_Create"
            },
            "required": true,
            "in": "body",
            "name": "physicalResourceSpec",
            "description": "The Physical Resource Spec to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF634PhysicalResourceSpec"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v2/physicalResourceSpec/{id}": {
      "get": {
        "operationId": "tMF634retrievePhysicalResourceSpec",
        "summary": "Retrieves a 'PhysicalResourceSpec' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Physical Resource Spec"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF634PhysicalResourceSpec"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF634patchPhysicalResourceSpec",
        "summary": "Updates partially a 'PhysicalResourceSpec' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Physical Resource Spec"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF634PhysicalResourceSpec_Update"
            },
            "required": true,
            "in": "body",
            "name": "physicalResourceSpec",
            "description": "The Physical Resource Spec to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF634PhysicalResourceSpec"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF634deletePhysicalResourceSpec",
        "summary": "Deletes a 'PhysicalResourceSpec' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Physical Resource Spec"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v2/importJob": {
      "get": {
        "operationId": "tMF634listImportJob",
        "summary": "List or find 'ImportJob' objects",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "contentType",
            "description": "For filtering: Indicates the format of the imported data"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "path",
            "description": "For filtering: URL of the root resource where the content of the file specified by the import job must be applied"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "status",
            "description": "For filtering: Status of the import job (not started, running, succeeded, failed)"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "url",
            "description": "For filtering: URL of the file containing the data to be imported"
          },
          {
            "name": "completionDate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date at which the job was completed"
          },
          {
            "name": "creationDate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date at which the job was created"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "errorLog",
            "description": "For filtering: Reason for failure if status is failed"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF634ImportJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF634createImportJob",
        "summary": "Creates a 'ImportJob'",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF634ImportJob_Create"
            },
            "required": true,
            "in": "body",
            "name": "importJob",
            "description": "The Import Job to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF634ImportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v2/importJob/{id}": {
      "get": {
        "operationId": "tMF634retrieveImportJob",
        "summary": "Retrieves a 'ImportJob' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Import Job"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF634ImportJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF634deleteImportJob",
        "summary": "Deletes a 'ImportJob' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Import Job"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v2/exportJob": {
      "get": {
        "operationId": "tMF634listExportJob",
        "summary": "List or find 'ExportJob' objects",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "query",
            "description": "For filtering: Used to scope the exported data"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "path",
            "description": "For filtering: URL of the root resource acting as the source for streaming content to the file specified by the export job"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "contentType",
            "description": "For filtering: The format of the exported data"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "status",
            "description": "For filtering: Status of the export job (not started, running, succeeded, failed)"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "url",
            "description": "For filtering: URL of the file containing the data to be exported"
          },
          {
            "name": "completionDate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Data at which the job was completed"
          },
          {
            "name": "creationDate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date at which the job was created"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "errorLog",
            "description": "For filtering: Reason for failure"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF634ExportJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF634createExportJob",
        "summary": "Creates a 'ExportJob'",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF634ExportJob_Create"
            },
            "required": true,
            "in": "body",
            "name": "exportJob",
            "description": "The Export Job to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF634ExportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v2/exportJob/{id}": {
      "get": {
        "operationId": "tMF634retrieveExportJob",
        "summary": "Retrieves a 'ExportJob' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Export Job"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF634ExportJob"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF634deleteExportJob",
        "summary": "Deletes a 'ExportJob' by Id",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Export Job"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v2/hub": {
      "post": {
        "operationId": "tMF634registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF634EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF634EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v2/hub/{id}": {
      "delete": {
        "operationId": "tMF634unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF634 ResourceCatalog"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "201": {
            "description": "Unsubscribed"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF634Error"
            }
          }
        }
      }
    },
    "/usageManagement/v2/usage": {
      "post": {
        "tags": [
          "TMF635 UsageManagement"
        ],
        "operationId": "tMF635usageCreate",
        "summary": "usageCreate",
        "description": "",
        "deprecated": false,
        "parameters": [
          {
            "name": "usage",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF635Usage"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Usage",
            "schema": {
              "$ref": "#/definitions/TMF635Usage"
            }
          },
          "400": {
            "description": "Request error"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      }
    },
    "/usageManagement/v2/usage/{usageId}": {
      "delete": {
        "tags": [
          "TMF635 UsageManagement"
        ],
        "operationId": "tMF635usageDelete",
        "summary": "usageDelete",
        "description": "",
        "deprecated": false,
        "parameters": [
          {
            "name": "usageId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "400": {
            "description": "Request error"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      },
      "get": {
        "tags": [
          "TMF635 UsageManagement"
        ],
        "operationId": "tMF635usageGet",
        "summary": "usageGet",
        "description": "",
        "deprecated": false,
        "parameters": [
          {
            "name": "usageId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "description": "",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Usage",
            "schema": {
              "$ref": "#/definitions/TMF635Usage"
            }
          },
          "400": {
            "description": "Request error"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      },
      "put": {
        "tags": [
          "TMF635 UsageManagement"
        ],
        "operationId": "tMF635usageUpdate",
        "summary": "usageUpdate",
        "description": "",
        "deprecated": false,
        "parameters": [
          {
            "name": "usageId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "usage",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF635Usage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success Update Usage",
            "schema": {
              "$ref": "#/definitions/TMF635Usage"
            }
          },
          "400": {
            "description": "Request error"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      }
    },
    "/usageManagement/v2/usageSpecification": {
      "post": {
        "tags": [
          "TMF635 UsageManagement"
        ],
        "operationId": "tMF635usageSpecificationCreate",
        "summary": "usageSpecificationCreate",
        "description": "",
        "deprecated": false,
        "parameters": [
          {
            "name": "usageSpecification",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF635UsageSpecification"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "UsageSpecification",
            "schema": {
              "$ref": "#/definitions/TMF635UsageSpecification"
            }
          },
          "400": {
            "description": "Request error"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      }
    },
    "/usageManagement/v2/usageSpecification/{usageSpecificationId}": {
      "delete": {
        "tags": [
          "TMF635 UsageManagement"
        ],
        "operationId": "tMF635usageSpecificationDelete",
        "summary": "usageSpecificationDelete",
        "description": "",
        "deprecated": false,
        "parameters": [
          {
            "name": "usageSpecificationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "400": {
            "description": "Request error"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      },
      "get": {
        "tags": [
          "TMF635 UsageManagement"
        ],
        "operationId": "tMF635usageSpecificationGet",
        "summary": "usageSpecificationGet",
        "description": "",
        "deprecated": false,
        "parameters": [
          {
            "name": "usageSpecificationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "description": "",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UsageSpecification",
            "schema": {
              "$ref": "#/definitions/TMF635UsageSpecification"
            }
          },
          "400": {
            "description": "Request error"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      }
    },
    "/usageManagement/v2/hub": {
      "post": {
        "tags": [
          "TMF635 UsageManagement"
        ],
        "operationId": "tMF635hubCreate",
        "summary": "hubCreate",
        "description": "",
        "deprecated": false,
        "parameters": [
          {
            "name": "hub",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF635Hub"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Hub",
            "schema": {
              "$ref": "#/definitions/TMF635Hub"
            }
          },
          "400": {
            "description": "Request error"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      },
      "get": {
        "tags": [
          "TMF635 UsageManagement"
        ],
        "operationId": "tMF635hubFind",
        "summary": "hubFind",
        "description": "",
        "deprecated": false,
        "responses": {
          "200": {
            "description": "List of Hub",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF635Hub"
              }
            }
          },
          "400": {
            "description": "Request error"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      }
    },
    "/usageManagement/v2/hub/{hubId}": {
      "delete": {
        "tags": [
          "TMF635 UsageManagement"
        ],
        "operationId": "tMF635hubDelete",
        "summary": "hubDelete",
        "description": "",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "400": {
            "description": "Request error"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      },
      "get": {
        "tags": [
          "TMF635 UsageManagement"
        ],
        "operationId": "tMF635hubGet",
        "summary": "hubGet",
        "description": "",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Hub",
            "schema": {
              "$ref": "#/definitions/TMF635Hub"
            }
          },
          "400": {
            "description": "Request error"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      }
    },
    "/productInventory/v3/product": {
      "post": {
        "tags": [
          "TMF637 ProductInventory"
        ],
        "operationId": "tMF637productCreate",
        "summary": "Create a product",
        "description": "This operation creates a product entity. This operation is available only to ADMIN API users.\nMandatory and non mandatory attributes and additionnal rules are provided in the specifications document.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "Product",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF637Product"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF637Product"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\nThe request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF637 ProductInventory"
        ],
        "operationId": "tMF637productFind",
        "summary": "List products",
        "description": "This operation list product entities.\nAttribute selection is enabled for all first level attributes.\nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attributes selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF637Product"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\nThe request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          }
        }
      }
    },
    "/productInventory/v3/product/{productId}": {
      "get": {
        "tags": [
          "TMF637 ProductInventory"
        ],
        "operationId": "tMF637productGet",
        "summary": "Retrieve product",
        "description": "This operation retrieves a product entity.\nAttribute selection is enabled for all first level attributes.\nFiltering on sub-resources may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attributes selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF637Product"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\nThe request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TMF637 ProductInventory"
        ],
        "operationId": "tMF637productPatch",
        "summary": "Patch a product",
        "description": "This operation allows partial updates of a product entity. This operation is available only to ADMIN API users.\nSupport of json/merge (https://tools.ietf.org/html/rfc7386) is mandatory, support of json/patch (http://tools.ietf.org/html/rfc5789) is optional.\nPatchable and not patchable attributes are provided in the specifications document.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Product",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF637Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF637Product"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\nThe request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF637 ProductInventory"
        ],
        "operationId": "tMF637productDelete",
        "summary": "Delete a product",
        "description": "This operation deletes a product entity. This operation is available only to ADMIN API users\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\nThe request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          }
        }
      }
    },
    "/productInventory/v3/hub": {
      "post": {
        "tags": [
          "TMF637 ProductInventory"
        ],
        "operationId": "tMF637hubCreate",
        "summary": "createHub",
        "description": "Create Hub\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "Hub",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF637HubInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF637Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\nThe request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF637 ProductInventory"
        ],
        "operationId": "tMF637hubFind",
        "summary": "find hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF637Hub"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\nThe request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          }
        }
      }
    },
    "/productInventory/v3/hub/{hubId}": {
      "get": {
        "tags": [
          "TMF637 ProductInventory"
        ],
        "operationId": "tMF637hubGet",
        "summary": "get hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF637Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\nThe request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TMF637 ProductInventory"
        ],
        "operationId": "tMF637hubPatch",
        "summary": "patch hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Hub",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF637Hub"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF637Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\nThe request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF637 ProductInventory"
        ],
        "operationId": "tMF637hubDelete",
        "summary": "delete hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\nThe request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF637ErrorRepresentation"
            }
          }
        }
      }
    },
    "/serviceInventory/v2/service": {
      "post": {
        "tags": [
          "TMF638 ServiceInventory"
        ],
        "operationId": "tMF638serviceCreate",
        "summary": "Create a service",
        "description": "This operation creates a service entity.\nNote: this operation is available only to ADMIN API users\nThe specification document provides the list of mandatory and non mandatory attributes when creating a Service, including any possible rule conditions and applicable default values.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "Service",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF638Service"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF638Service"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF638 ServiceInventory"
        ],
        "operationId": "tMF638serviceFind",
        "summary": "List services",
        "description": "This operation list service entities. \nAttribute selection is enabled for all first level attributes. \nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF638Service"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          }
        }
      }
    },
    "/serviceInventory/v2/service/{id}": {
      "get": {
        "tags": [
          "TMF638 ServiceInventory"
        ],
        "operationId": "tMF638serviceGet",
        "summary": "Retrieve a service",
        "description": "This operation retrieves a service entity. \nAttribute selection is enabled for all first level attributes.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF638Service"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TMF638 ServiceInventory"
        ],
        "operationId": "tMF638servicePatch",
        "summary": "Patch a service",
        "description": "This operation allows partial updates of a service entity. Support of json/merge (https://tools.ietf.org/html/rfc7386) is mandatory, support of json/patch (http://tools.ietf.org/html/rfc5789) is optional.\nNote: this operation is available only to ADMIN API users.\nThe specification document provides the list of patchable and non patchable attributes, including constraint rules on their usage.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Service",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF638Service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF638Service"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF638 ServiceInventory"
        ],
        "operationId": "tMF638serviceDelete",
        "summary": "Delete a service",
        "description": "This operation deletes a service entity.\nNote: this operation is available only to ADMIN API users.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          }
        }
      }
    },
    "/serviceInventory/v2/hub": {
      "post": {
        "tags": [
          "TMF638 ServiceInventory"
        ],
        "operationId": "tMF638hubCreate",
        "summary": "create hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "Hub",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF638HubInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF638Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF638 ServiceInventory"
        ],
        "operationId": "tMF638hubFind",
        "summary": "find hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF638Hub"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          }
        }
      }
    },
    "/serviceInventory/v2/hub/{hubId}": {
      "get": {
        "tags": [
          "TMF638 ServiceInventory"
        ],
        "operationId": "tMF638hubGet",
        "summary": "get hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF638Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          }
        }
      },
      "put": {
        "tags": [
          "TMF638 ServiceInventory"
        ],
        "operationId": "tMF638hubUpdate",
        "summary": "update hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Hub",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF638Hub"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF638Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF638 ServiceInventory"
        ],
        "operationId": "tMF638hubDelete",
        "summary": "delete hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF638ErrorRepresentation"
            }
          }
        }
      }
    },
    "/resourceInventoryManagement/v2/resource": {
      "get": {
        "operationId": "tMF639listResource",
        "summary": "List or find 'Resource' objects",
        "tags": [
          "TMF639 ResourceInventory"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF639Resource"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF639createResource",
        "summary": "Creates a 'Resource'",
        "tags": [
          "TMF639 ResourceInventory"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF639Resource_Create"
            },
            "required": true,
            "in": "body",
            "name": "resource",
            "description": "The Resource to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF639Resource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          }
        }
      }
    },
    "/resourceInventoryManagement/v2/resource/{id}": {
      "get": {
        "operationId": "tMF639retrieveResource",
        "summary": "Retrieves a 'Resource' by Id",
        "tags": [
          "TMF639 ResourceInventory"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF639Resource"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF639patchResource",
        "summary": "Updates partially a 'Resource' by Id",
        "tags": [
          "TMF639 ResourceInventory"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF639Resource_Update"
            },
            "required": true,
            "in": "body",
            "name": "resource",
            "description": "The Resource to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF639Resource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF639deleteResource",
        "summary": "Deletes a 'Resource' by Id",
        "tags": [
          "TMF639 ResourceInventory"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          }
        }
      }
    },
    "/resourceInventoryManagement/v2/logicalResource": {
      "get": {
        "operationId": "tMF639listLogicalResource",
        "summary": "List or find 'LogicalResource' objects",
        "tags": [
          "TMF639 ResourceInventory"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF639LogicalResource"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF639createLogicalResource",
        "summary": "Creates a 'LogicalResource'",
        "tags": [
          "TMF639 ResourceInventory"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF639LogicalResource_Create"
            },
            "required": true,
            "in": "body",
            "name": "logicalResource",
            "description": "The Logical Resource to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF639LogicalResource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          }
        }
      }
    },
    "/resourceInventoryManagement/v2/logicalResource/{id}": {
      "get": {
        "operationId": "tMF639retrieveLogicalResource",
        "summary": "Retrieves a 'LogicalResource' by Id",
        "tags": [
          "TMF639 ResourceInventory"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Logical Resource"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF639LogicalResource"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF639patchLogicalResource",
        "summary": "Updates partially a 'LogicalResource' by Id",
        "tags": [
          "TMF639 ResourceInventory"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Logical Resource"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF639LogicalResource_Update"
            },
            "required": true,
            "in": "body",
            "name": "logicalResource",
            "description": "The Logical Resource to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF639LogicalResource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF639deleteLogicalResource",
        "summary": "Deletes a 'LogicalResource' by Id",
        "tags": [
          "TMF639 ResourceInventory"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Logical Resource"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          }
        }
      }
    },
    "/resourceInventoryManagement/v2/physicalResource": {
      "get": {
        "operationId": "tMF639listPhysicalResource",
        "summary": "List or find 'PhysicalResource' objects",
        "tags": [
          "TMF639 ResourceInventory"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF639PhysicalResource"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF639createPhysicalResource",
        "summary": "Creates a 'PhysicalResource'",
        "tags": [
          "TMF639 ResourceInventory"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF639PhysicalResource_Create"
            },
            "required": true,
            "in": "body",
            "name": "physicalResource",
            "description": "The Physical Resource to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF639PhysicalResource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          }
        }
      }
    },
    "/resourceInventoryManagement/v2/physicalResource/{id}": {
      "get": {
        "operationId": "tMF639retrievePhysicalResource",
        "summary": "Retrieves a 'PhysicalResource' by Id",
        "tags": [
          "TMF639 ResourceInventory"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Physical Resource"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF639PhysicalResource"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF639patchPhysicalResource",
        "summary": "Updates partially a 'PhysicalResource' by Id",
        "tags": [
          "TMF639 ResourceInventory"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Physical Resource"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF639PhysicalResource_Update"
            },
            "required": true,
            "in": "body",
            "name": "physicalResource",
            "description": "The Physical Resource to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF639PhysicalResource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF639deletePhysicalResource",
        "summary": "Deletes a 'PhysicalResource' by Id",
        "tags": [
          "TMF639 ResourceInventory"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Physical Resource"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          }
        }
      }
    },
    "/resourceInventoryManagement/v2/hub": {
      "post": {
        "operationId": "tMF639registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF639 ResourceInventory"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF639EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF639EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          }
        }
      }
    },
    "/resourceInventoryManagement/v2/hub/{id}": {
      "delete": {
        "operationId": "tMF639unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF639 ResourceInventory"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF639Error"
            }
          }
        }
      }
    },
    "/serviceOrdering/v3/serviceOrder": {
      "post": {
        "tags": [
          "TMF641 ServiceOrder"
        ],
        "operationId": "tMF641serviceOrderCreate",
        "summary": "Create a service order",
        "description": "This operation creates a service order entity.\nThe specification document provides the list of mandatory and non mandatory attributes when creating a ServiceOrder, including any possible rule conditions and applicable default values.\nPOST should be used without specifying the id and the href, the Service Order Management system is in charge of generating the id + href for the ServiceOrder.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "serviceOrder",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF641POSTReqServiceOrder"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF641ServiceOrder"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF641 ServiceOrder"
        ],
        "operationId": "tMF641serviceOrderFind",
        "summary": "List service orders",
        "description": "Retreive and list service order entities according to given criteria.\nAttribute selection is enabled for all first level attributes.\nFiltering may be available depending on the compliance level supported by an implementation. Providing filtering criteria is mandatory to avoid too many answers retrieved\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "state",
            "required": false,
            "in": "query",
            "description": "Example of filtering attribute that can be used",
            "type": "string"
          },
          {
            "name": "orderDate",
            "required": false,
            "in": "query",
            "description": "Example of filtering attribute that can be used",
            "type": "string"
          },
          {
            "name": "relatedPartyId",
            "required": false,
            "in": "query",
            "description": "Example of filtering attribute that can be used",
            "type": "string"
          },
          {
            "name": "relatedPartyRole",
            "required": false,
            "in": "query",
            "description": "Example of filtering attribute that can be used",
            "type": "string"
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF641ServiceOrder"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          }
        }
      }
    },
    "/serviceOrdering/v3/serviceOrder/{id}": {
      "get": {
        "tags": [
          "TMF641 ServiceOrder"
        ],
        "operationId": "tMF641serviceOrderGet",
        "summary": "Retrieve a service order",
        "description": "This operation retrieves a service order entity. \nAttribute selection is enabled for all first level attributes.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF641ServiceOrder"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TMF641 ServiceOrder"
        ],
        "operationId": "tMF641serviceOrderPatch",
        "summary": "Patch a service order",
        "description": "This operation allows partial updates of a service order entity. Support of json/merge (https://tools.ietf.org/html/rfc7386) is mandatory, support of json/patch (http://tools.ietf.org/html/rfc5789) is optional. \nThe  specification document provides the list of patchable and non patchable attributes, including constraint rules on their usage.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "serviceOrder",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF641ServiceOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF641ServiceOrder"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF641 ServiceOrder"
        ],
        "operationId": "tMF641serviceOrderDelete",
        "summary": "Delete a service order",
        "description": "This operation deletes a service order entity. This operation is available only to Admin API users.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          }
        }
      }
    },
    "/serviceOrdering/v3/hub": {
      "post": {
        "tags": [
          "TMF641 ServiceOrder"
        ],
        "operationId": "tMF641hubCreate",
        "summary": "create hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "Hub",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF641HubInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF641Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF641 ServiceOrder"
        ],
        "operationId": "tMF641hubFind",
        "summary": "find hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF641Hub"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          }
        }
      }
    },
    "/serviceOrdering/v3/hub/{hubId}": {
      "get": {
        "tags": [
          "TMF641 ServiceOrder"
        ],
        "operationId": "tMF641hubGet",
        "summary": "get hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF641Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          }
        }
      },
      "put": {
        "tags": [
          "TMF641 ServiceOrder"
        ],
        "operationId": "tMF641hubUpdate",
        "summary": "update hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Hub",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF641Hub"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF641Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF641 ServiceOrder"
        ],
        "operationId": "tMF641hubDelete",
        "summary": "delete hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\n",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF641ErrorRepresentation"
            }
          }
        }
      }
    },
    "/serviceQualificationManagement/v3/serviceQualification": {
      "post": {
        "tags": [
          "TMF645 ServiceQualification"
        ],
        "operationId": "tMF645serviceQualificationCreate",
        "summary": "Create a service qualification",
        "description": "This operation creates a service qualification entity.\nMandatory and non mandatory attributes, additional rules and default values are provided in the specifications document.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "ServiceQualification",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF645ServiceQualification"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF645ServiceQualification"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF645 ServiceQualification"
        ],
        "operationId": "tMF645serviceQualificationFind",
        "summary": "List service qualifications",
        "description": "This operation list service qualification entities.\nAttribute selection is enabled for all first level attributes.\nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attributes selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF645ServiceQualification"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          }
        }
      }
    },
    "/serviceQualificationManagement/v3/serviceQualification/{id}": {
      "get": {
        "tags": [
          "TMF645 ServiceQualification"
        ],
        "operationId": "tMF645serviceQualificationGet",
        "summary": "Retrieve a service qualification",
        "description": "This operation retrieves a service qualification entity.\nAttribute selection is enabled for all first level attributes.\nFiltering on sub-resources may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attributes selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF645ServiceQualification"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TMF645 ServiceQualification"
        ],
        "operationId": "tMF645serviceQualificationPatch",
        "summary": "Partially update a service qualification",
        "description": "This operation allows partial updates of a service qualification entity. Support of json/merge (https://tools.ietf.org/html/rfc7386) is mandatory, support of json/patch (http://tools.ietf.org/html/rfc5789) is optional.\nPatchable and non patchable attributes and additional rules are provided in the specifications document.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "ServiceQualification",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF645ServiceQualification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF645ServiceQualification"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF645 ServiceQualification"
        ],
        "operationId": "tMF645serviceQualificationDelete",
        "summary": "Delete a service qualification",
        "description": "This operation deletes a service qualification entity.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          }
        }
      }
    },
    "/serviceQualificationManagement/v3/hub": {
      "post": {
        "tags": [
          "TMF645 ServiceQualification"
        ],
        "operationId": "tMF645hubCreate",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "Hub",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF645HubInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF645Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          }
        }
      }
    },
    "/serviceQualificationManagement/v3/hub/{hubId}": {
      "delete": {
        "tags": [
          "TMF645 ServiceQualification"
        ],
        "operationId": "tMF645hubDelete",
        "summary": "Unregister a listener",
        "description": "Clears the communication endpoint addres that was set by creating the Hub\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF645ErrorRepresentation"
            }
          }
        }
      }
    },
    "/appointment/v3/appointment": {
      "post": {
        "tags": [
          "TMF646 AppointmentManagement"
        ],
        "operationId": "tMF646appointmentCreate",
        "summary": "Create an appointment",
        "description": "This operation is used to create an appointment.\nThe specifications document provides  the  list  of  mandatory  and  non-mandatory  attributes  when  creating  an \nappointment, including any possible rule conditions and applicable default values.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "Appointment",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF646Appointment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF646Appointment"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF646 AppointmentManagement"
        ],
        "operationId": "tMF646appointmentFind",
        "summary": "List appointments",
        "description": "This operation list appointment entities corresponding to given criteria.\nAttribute selection is enabled for all first level attributes.\nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF646Appointment"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          }
        }
      }
    },
    "/appointment/v3/appointment/{id}": {
      "get": {
        "tags": [
          "TMF646 AppointmentManagement"
        ],
        "operationId": "tMF646appointmentGet",
        "summary": "Retrieve an appointment",
        "description": "This operation retrieves an appointment entity.\nAttribute selection is enabled for all first level attributes.\nFiltering on sub-resources may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF646Appointment"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TMF646 AppointmentManagement"
        ],
        "operationId": "tMF646appointmentPatch",
        "summary": "Update or cancel an appointment",
        "description": "This operation allows partial updates of an appointment entity. Support of json/merge (https://tools.ietf.org/html/rfc7386) is mandatory, support of json/patch (http://tools.ietf.org/html/rfc5789) is optional. It also can be used to cancel an appointment by modifying its state. The new state is ‘cancelled’.\nThe specifications document provides the list of patchable and not patchable attributes, including constraint rules on \ntheir usage.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Appointment",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF646Appointment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF646Appointment"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF646 AppointmentManagement"
        ],
        "operationId": "tMF646appointmentDelete",
        "summary": "Delete an appointment",
        "description": "This operation deletes an appointment entity.\nNote : this operation is available only to ADMIN API users.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          }
        }
      }
    },
    "/appointment/v3/hub": {
      "post": {
        "tags": [
          "TMF646 AppointmentManagement"
        ],
        "operationId": "tMF646hubCreate",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information",
            "schema": {
              "$ref": "#/definitions/TMF646HubInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF646Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          }
        }
      }
    },
    "/appointment/v3/hub/{hubId}": {
      "delete": {
        "tags": [
          "TMF646 AppointmentManagement"
        ],
        "operationId": "tMF646hubDelete",
        "summary": "Unregister listener",
        "description": "Unregister a listener\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          }
        }
      }
    },
    "/appointment/v3/searchTimeSlot": {
      "post": {
        "tags": [
          "TMF646 AppointmentManagement"
        ],
        "operationId": "tMF646searchTimeSlotCreate",
        "summary": "Create a search time slot",
        "description": "This operation creates a search time slot entity. It is used to retrieve, according to a set of criteria, available time slots used after to book or reschedule an appointment on.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "SearchTimeSlot",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF646SearchTimeSlotPostInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF646SearchTimeSlot"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF646 AppointmentManagement"
        ],
        "operationId": "tMF646searchTimeSlotFind",
        "summary": "List search time slots",
        "description": "This operation list search time slots entities.\nAttribute selection is enabled for all first level attributes.\nFiltering may be available depending on the compliance level supported by an implementation.\nNote: A specific implementation of the Appointment Management API can choose whether or not to implement GET, PATCH, and DELETE for the SearchTimeSlot task resource, according to business considerations (such as the need for accounting or the need to support asynchronous search).\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF646SearchTimeSlot"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          }
        }
      }
    },
    "/appointment/v3/searchTimeSlot/{searchTimeSlotId}": {
      "get": {
        "tags": [
          "TMF646 AppointmentManagement"
        ],
        "operationId": "tMF646searchTimeSlotGet",
        "summary": "Retrieve a search time slot",
        "description": "This operation retrieves a search time slot entity.\nAttribute selection is enabled for all first level attributes.\nFiltering on sub-resources may be available depending on the compliance level supported by an implementation.\nNote: A specific implementation of the Appointment Management API can choose whether or not to implement GET, PATCH, and DELETE for the SearchTimeSlot task resource, according to business considerations (such as the need for accounting or the need to support asynchronous search).\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "searchTimeSlotId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the search time slot request"
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF646SearchTimeSlot"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TMF646 AppointmentManagement"
        ],
        "operationId": "tMF646searchTimeSlotPatch",
        "summary": "Patch a search time slot",
        "description": "This operation allows partial updates of a search time slot entity.\nNote: this operation is available only to ADMIN API users.\nNote: A specific implementation of the Appointment Management API can choose whether or not to implement GET, PATCH, and DELETE for the SearchTimeSlot task resource, according to business considerations (such as the need for accounting or the need to support asynchronous search).\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "searchTimeSlotId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the search time slot request"
          },
          {
            "name": "SearchTimeSlot",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF646SearchTimeSlot"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF646SearchTimeSlot"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF646 AppointmentManagement"
        ],
        "operationId": "tMF646searchTimeSlotDelete",
        "summary": "Delete a search time slot",
        "description": "This operation deletes a search time slot entity. \nNote: this operation is available only to ADMIN API users.\nNote: A specific implementation of the Appointment Management API can choose whether or not to implement GET, PATCH, and DELETE for the SearchTimeSlot task resource, according to business considerations (such as the need for accounting or the need to support asynchronous search).\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "searchTimeSlotId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the search time slot request"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF646ErrorRepresentation"
            }
          }
        }
      }
    },
    "/quoteManagement/v2/quote": {
      "post": {
        "tags": [
          "TMF648 QuoteManagement"
        ],
        "operationId": "tMF648quoteCreate",
        "summary": "Create a quote",
        "description": "This operation is used to create a new quote (V1.0) or a new version of an existing quote (Vn.n n=> 1)\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "Quote",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF648QuotePOSTRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF648Quote"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF648 QuoteManagement"
        ],
        "operationId": "tMF648quoteFind",
        "summary": "List quotes",
        "description": "This operation is used to retrieve quote information using filter criteria.\nIf the version is not filled, by default only the most current version is returned.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "For attribute selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF648Quote"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          }
        }
      }
    },
    "/quoteManagement/v2/quote/{id}": {
      "get": {
        "tags": [
          "TMF648 QuoteManagement"
        ],
        "operationId": "tMF648quoteGet",
        "summary": "Retrieve a quote",
        "description": "This operation is used to retrieve quote information using the ID. If the version is not filled, by default only the most current version is returned.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF648Quote"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TMF648 QuoteManagement"
        ],
        "operationId": "tMF648quotePatch",
        "summary": "Patch a quote",
        "description": "This operation is used to modify quote and/or their items.\nBy default PATCH will be acting only on the latest version of the Resource.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Quote",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF648Quote"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF648Quote"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF648 QuoteManagement"
        ],
        "operationId": "tMF648quoteDelete",
        "summary": "Delete a quote",
        "description": "This operation is used to Delete a quote.\nShould be used only for ADMIN reason.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          }
        }
      }
    },
    "/quoteManagement/v2/hub": {
      "post": {
        "tags": [
          "TMF648 QuoteManagement"
        ],
        "operationId": "tMF648hubCreate",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "Hub",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF648HubInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF648Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          }
        }
      }
    },
    "/quoteManagement/v2/hub/{hubId}": {
      "delete": {
        "tags": [
          "TMF648 QuoteManagement"
        ],
        "operationId": "tMF648hubDelete",
        "summary": "Unregister a listener",
        "description": "Clears the communication endpoint address that was set by creating the Hub\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF648ErrorRepresentation"
            }
          }
        }
      }
    },
    "/agreementManagement/v2/agreement": {
      "get": {
        "operationId": "tMF651listAgreement",
        "summary": "List or find 'Agreement' objects",
        "tags": [
          "TMF651 AgreementManagement"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF651Agreement"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF651createAgreement",
        "summary": "Creates a 'Agreement'",
        "tags": [
          "TMF651 AgreementManagement"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF651Agreement_Create"
            },
            "required": true,
            "in": "body",
            "name": "agreement",
            "description": "The Agreement to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF651Agreement"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          }
        }
      }
    },
    "/agreementManagement/v2/agreement/{id}": {
      "get": {
        "operationId": "tMF651retrieveAgreement",
        "summary": "Retrieves a 'Agreement' by Id",
        "tags": [
          "TMF651 AgreementManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Agreement"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF651Agreement"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF651patchAgreement",
        "summary": "Updates partially a 'Agreement' by Id",
        "tags": [
          "TMF651 AgreementManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Agreement"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF651Agreement_Update"
            },
            "required": true,
            "in": "body",
            "name": "agreement",
            "description": "The Agreement to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF651Agreement"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF651deleteAgreement",
        "summary": "Deletes a 'Agreement' by Id",
        "tags": [
          "TMF651 AgreementManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Agreement"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          }
        }
      }
    },
    "/agreementManagement/v2/agreementSpecification": {
      "get": {
        "operationId": "tMF651listAgreementSpecification",
        "summary": "List or find 'AgreementSpecification' objects",
        "tags": [
          "TMF651 AgreementManagement"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF651AgreementSpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF651createAgreementSpecification",
        "summary": "Creates a 'AgreementSpecification'",
        "tags": [
          "TMF651 AgreementManagement"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF651AgreementSpecification_Create"
            },
            "required": true,
            "in": "body",
            "name": "agreementSpecification",
            "description": "The Agreement Specification to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF651AgreementSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          }
        }
      }
    },
    "/agreementManagement/v2/agreementSpecification/{id}": {
      "get": {
        "operationId": "tMF651retrieveAgreementSpecification",
        "summary": "Retrieves a 'AgreementSpecification' by Id",
        "tags": [
          "TMF651 AgreementManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Agreement Specification"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF651AgreementSpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF651patchAgreementSpecification",
        "summary": "Updates partially a 'AgreementSpecification' by Id",
        "tags": [
          "TMF651 AgreementManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Agreement Specification"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF651AgreementSpecification_Update"
            },
            "required": true,
            "in": "body",
            "name": "agreementSpecification",
            "description": "The Agreement Specification to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF651AgreementSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF651deleteAgreementSpecification",
        "summary": "Deletes a 'AgreementSpecification' by Id",
        "tags": [
          "TMF651 AgreementManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Agreement Specification"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          }
        }
      }
    },
    "/agreementManagement/v2/hub": {
      "post": {
        "operationId": "tMF651registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF651 AgreementManagement"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF651EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF651EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          }
        }
      }
    },
    "/agreementManagement/v2/hub/{id}": {
      "delete": {
        "operationId": "tMF651unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF651 AgreementManagement"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF651Error"
            }
          }
        }
      }
    },
    "/resourceOrderingManagement/v2/resourceOrder": {
      "get": {
        "operationId": "tMF652listResourceOrder",
        "summary": "List or find 'ResourceOrder' objects",
        "tags": [
          "TMF652 ResourceOrderManagement"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF652ResourceOrder"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF652createResourceOrder",
        "summary": "Creates a 'ResourceOrder'",
        "tags": [
          "TMF652 ResourceOrderManagement"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF652ResourceOrder_Create"
            },
            "required": true,
            "in": "body",
            "name": "resourceOrder",
            "description": "The Resource Order to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF652ResourceOrder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          }
        }
      }
    },
    "/resourceOrderingManagement/v2/resourceOrder/{id}": {
      "get": {
        "operationId": "tMF652retrieveResourceOrder",
        "summary": "Retrieves a 'ResourceOrder' by Id",
        "tags": [
          "TMF652 ResourceOrderManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource Order"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF652ResourceOrder"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF652patchResourceOrder",
        "summary": "Updates partially a 'ResourceOrder' by Id",
        "tags": [
          "TMF652 ResourceOrderManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource Order"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF652ResourceOrder_Update"
            },
            "required": true,
            "in": "body",
            "name": "resourceOrder",
            "description": "The Resource Order to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF652ResourceOrder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF652deleteResourceOrder",
        "summary": "Deletes a 'ResourceOrder' by Id",
        "tags": [
          "TMF652 ResourceOrderManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource Order"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          }
        }
      }
    },
    "/resourceOrderingManagement/v2/hub": {
      "post": {
        "operationId": "tMF652registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF652 ResourceOrderManagement"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF652EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF652EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          }
        }
      }
    },
    "/resourceOrderingManagement/v2/hub/{id}": {
      "delete": {
        "operationId": "tMF652unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF652 ResourceOrderManagement"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF652Error"
            }
          }
        }
      }
    },
    "/serviceTestManagement/v2/serviceTest": {
      "get": {
        "operationId": "tMF653listServiceTest",
        "summary": "List or find 'ServiceTest' objects",
        "tags": [
          "TMF653 ServiceTestManagement"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF653ServiceTest"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF653createServiceTest",
        "summary": "Creates a 'ServiceTest'",
        "tags": [
          "TMF653 ServiceTestManagement"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF653ServiceTest_Create"
            },
            "required": true,
            "in": "body",
            "name": "serviceTest",
            "description": "The Service Test to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF653ServiceTest"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          }
        }
      }
    },
    "/serviceTestManagement/v2/serviceTest/{id}": {
      "get": {
        "operationId": "tMF653retrieveServiceTest",
        "summary": "Retrieves a 'ServiceTest' by Id",
        "tags": [
          "TMF653 ServiceTestManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Test"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF653ServiceTest"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF653patchServiceTest",
        "summary": "Updates partially a 'ServiceTest' by Id",
        "tags": [
          "TMF653 ServiceTestManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Test"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF653ServiceTest_Update"
            },
            "required": true,
            "in": "body",
            "name": "serviceTest",
            "description": "The Service Test to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF653ServiceTest"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF653deleteServiceTest",
        "summary": "Deletes a 'ServiceTest' by Id",
        "tags": [
          "TMF653 ServiceTestManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Test"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          }
        }
      }
    },
    "/serviceTestManagement/v2/serviceTestSpecification": {
      "get": {
        "operationId": "tMF653listServiceTestSpecification",
        "summary": "List or find 'ServiceTestSpecification' objects",
        "tags": [
          "TMF653 ServiceTestManagement"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF653ServiceTestSpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF653createServiceTestSpecification",
        "summary": "Creates a 'ServiceTestSpecification'",
        "tags": [
          "TMF653 ServiceTestManagement"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF653ServiceTestSpecification_Create"
            },
            "required": true,
            "in": "body",
            "name": "serviceTestSpecification",
            "description": "The Service Test Specification to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF653ServiceTestSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          }
        }
      }
    },
    "/serviceTestManagement/v2/serviceTestSpecification/{id}": {
      "get": {
        "operationId": "tMF653retrieveServiceTestSpecification",
        "summary": "Retrieves a 'ServiceTestSpecification' by Id",
        "tags": [
          "TMF653 ServiceTestManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Test Specification"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF653ServiceTestSpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF653patchServiceTestSpecification",
        "summary": "Updates partially a 'ServiceTestSpecification' by Id",
        "tags": [
          "TMF653 ServiceTestManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Test Specification"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF653ServiceTestSpecification_Update"
            },
            "required": true,
            "in": "body",
            "name": "serviceTestSpecification",
            "description": "The Service Test Specification to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF653ServiceTestSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF653deleteServiceTestSpecification",
        "summary": "Deletes a 'ServiceTestSpecification' by Id",
        "tags": [
          "TMF653 ServiceTestManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Test Specification"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          }
        }
      }
    },
    "/serviceTestManagement/v2/hub": {
      "post": {
        "operationId": "tMF653registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF653 ServiceTestManagement"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF653EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF653EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          }
        }
      }
    },
    "/serviceTestManagement/v2/hub/{id}": {
      "delete": {
        "operationId": "tMF653unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF653 ServiceTestManagement"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF653Error"
            }
          }
        }
      }
    },
    "/prepayBalanceManagement/v2/bucket": {
      "get": {
        "operationId": "tMF654retrieveBuckets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product.id",
            "required": true,
            "in": "query",
            "description": "Id of the product",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Balance information was returned successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF654BucketBalance"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total results",
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "Retrieve balance information stored in the server that can be filtered for specific criteria.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/bucket/{bucketId}": {
      "get": {
        "operationId": "tMF654retrieveBucket",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bucketId",
            "required": true,
            "in": "path",
            "description": "Id of the bucket to fetch",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Balance information was returned successfully",
            "schema": {
              "$ref": "#/definitions/TMF654BucketBalance"
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total results",
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "Retrieve balance information stored in the server for a specific bucket.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/product/{productId}/bucket": {
      "get": {
        "operationId": "tMF654retrieveBucketsOfProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bucketType",
            "required": false,
            "in": "query",
            "description": "Description of the bucket type",
            "type": "string"
          },
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "Id of the product",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Balance information was returned successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF654BucketBalance"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total results",
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "Retrieve balance information stored in the server that can be filtered for specific criteria.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/product/{productId}/bucket/{bucketId}": {
      "get": {
        "operationId": "tMF654retrieveBucketofproduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bucketId",
            "required": true,
            "in": "path",
            "description": "Id of the bucket to fetch",
            "type": "string"
          },
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "Id of the bucket to fetch",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Balance information was returned successfully",
            "schema": {
              "$ref": "#/definitions/TMF654BucketBalance"
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total results",
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "Retrieve balance information stored in the server for a specific bucket.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/accumulatedbalance": {
      "get": {
        "operationId": "tMF654retrieveAccumulatedBalance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Id of the product",
            "type": "string"
          },
          {
            "name": "product.id",
            "required": true,
            "in": "query",
            "description": "Id of the product",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Balance information was returned successfully",
            "schema": {
              "$ref": "#/definitions/TMF654AccumulatedBalance"
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total results",
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "retrieve total balance information for an aggregation of a set of buckets",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/accumulatedbalance/{productId}": {
      "get": {
        "operationId": "tMF654retrieveAccumulatedBalanceOfProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "type": "string"
          },
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Balance information was returned successfully",
            "schema": {
              "$ref": "#/definitions/TMF654AccumulatedBalance"
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total results",
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "retrieve total balance information for an aggregation of a set of buckets",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/balanceActivity": {
      "get": {
        "operationId": "tMF654retrieveBalanceActivityOfProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "prod.id",
            "required": true,
            "in": "query",
            "type": "string"
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Balance information was returned successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF654BalanceActivity"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total results",
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "retrieve total balance information for an aggregation of a set of buckets",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/product/{productId}/balanceActivity": {
      "get": {
        "operationId": "tMF654retrieveBalanceActivityProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "type": "string"
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Balance information was returned successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF654BalanceActivity"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total results",
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "retrieve total balance information for an aggregation of a set of buckets",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/balanceTopup": {
      "post": {
        "operationId": "tMF654createNewTopup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "TopupBody",
            "in": "body",
            "description": "The Topup to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF654BalanceTopupBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful top-up operation request (resource created)",
            "headers": {
              "location": {
                "description": "Location where to query the created topup",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Create a new top-up operation for a given product (or commercial id reference to a product) instance consuming the credit held in a bucket for a specific service) .",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      },
      "get": {
        "operationId": "tMF654retrieveListTopUpOperations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product.id",
            "required": true,
            "in": "query",
            "type": "string"
          },
          {
            "name": "channel",
            "required": false,
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TopUp request information was returned successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF654BalanceTopupRequest"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total results",
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "retrieve the list of top-up operations requested for a given product product (or commercial id reference to a product), filtered by given criteria. The response includes the details of all top-ups operations requested.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/{idProduct}/balanceTopup": {
      "post": {
        "operationId": "tMF654createNewTopupOfProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "idProduct",
            "type": "string",
            "in": "path",
            "description": "The id to be created.",
            "required": true
          },
          {
            "name": "TopupBody",
            "in": "body",
            "description": "The Topup to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF654BalanceTopupBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful top-up operation request (resource created)",
            "headers": {
              "location": {
                "description": "Location where to query the created topup",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Create a new top-up operation for a given product (or commercial id reference to a product) instance consuming the credit held in a bucket for a specific service) .",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/product/{productId}/balanceTopups": {
      "get": {
        "operationId": "tMF654retrieveTopupByProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "information successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF654BalanceTopupRequest"
              }
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "retrieve detailed information about a single top-up operation previously processed by the server.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/balanceTopup/{topupId}": {
      "get": {
        "operationId": "tMF654retrieveTopup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "topupId",
            "required": true,
            "in": "path",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "information successfully retrieved",
            "schema": {
              "$ref": "#/definitions/TMF654BalanceTopupRequest"
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total results",
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "retrieve detailed information about a single top-up operation previously processed by the server.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/balanceTopup/{topupId}/status": {
      "get": {
        "operationId": "tMF654retrieveTopupStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "topupId",
            "required": true,
            "in": "path",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "information successfully retrieved",
            "schema": {
              "$ref": "#/definitions/TMF654BalanceTopupStatusType"
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "retrieve detailed information about a single top-up operation previously processed by the server.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      },
      "put": {
        "operationId": "tMF654modifyTopupStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "topupId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "TopupBody",
            "in": "body",
            "description": "The Topup to be modify.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF654BalanceTopupStatusTypeModify"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful status modification"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Update the information about a single top-up operation previously processed by the server.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/product/{productId}/balanceTopup/{topupId}/status": {
      "get": {
        "operationId": "tMF654retrieveTopupStatusProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "type": "string"
          },
          {
            "name": "topupId",
            "required": true,
            "in": "path",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "information successfully retrieved",
            "schema": {
              "$ref": "#/definitions/TMF654BalanceTopupStatusType"
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "retrieve detailed information about a single top-up operation previously processed by the server.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      },
      "put": {
        "operationId": "tMF654modifyTopupStatusProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "type": "string"
          },
          {
            "name": "topupId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "TopupBody",
            "in": "body",
            "description": "The Topup to be modify.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF654BalanceTopupStatusTypeModify"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful status modification"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Update the information about a single top-up operation previously processed by the server.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/balanceTransfer": {
      "post": {
        "operationId": "tMF654createTransfer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "TransferBody",
            "in": "body",
            "description": "The Transfer to be modify.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF654BalanceTransferBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Transfer operation successful (resource created)",
            "headers": {
              "location": {
                "description": "Location where to query the created transfer",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "request a new transfer operation for a given product (or commercial id reference to a product instance consuming the credit held in a bucket for a specific service).",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      },
      "get": {
        "operationId": "tMF654retrieveTransferOperations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product.id",
            "required": true,
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "information successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF654BalanceTransferRequest"
              }
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "retrieve detailed information about a single top-up operation previously processed by the server.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/{productId}/balanceTransfer": {
      "post": {
        "operationId": "tMF654createTransferProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "TransferBody",
            "in": "body",
            "description": "The Transfer to be modify.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF654BalanceTransferBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Transfer operation successful (resource created)",
            "headers": {
              "location": {
                "description": "Location where to query the created transfer",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "request a new transfer operation for a given product (or commercial id reference to a product instance consuming the credit held in a bucket for a specific service).",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/product/{productId}/balanceTransfer": {
      "get": {
        "operationId": "tMF654retrieveTransferOperationsProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "information successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF654BalanceTransferRequest"
              }
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "retrieve detailed information about a single top-up operation previously processed by the server.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/balanceTransfer/{transferId}": {
      "get": {
        "operationId": "tMF654retrieveTransferInformation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transferId",
            "required": true,
            "in": "path",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Transfer information was returned successfully",
            "schema": {
              "$ref": "#/definitions/TMF654BalanceTransferRequest"
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "retrieve detailed information about a single top-up operation previously processed by the server.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/balanceTransfer/{transferId}/status": {
      "get": {
        "operationId": "tMF654retrieveTransferStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transferId",
            "required": true,
            "in": "path",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "information successfully retrieved",
            "schema": {
              "$ref": "#/definitions/TMF654BalanceTransferRequest"
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "request the the status of a transfer operation previously processed by the server and if it status has been changed (i.e.: it has been cancelled) the date of the latest status change.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      },
      "put": {
        "operationId": "tMF654modifyTransferStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transferId",
            "required": true,
            "in": "path",
            "type": "string"
          },
          {
            "name": "TransferStatusBody",
            "in": "body",
            "description": "The transfer to be modify.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF654BalanceTransferStatusTypeModify"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful status modification"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "modify the status of a balance transfer operation previously processed by the server. This could be used to cancel an existing transfer operation.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/balanceAdjustment": {
      "post": {
        "operationId": "tMF654createAdjustment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "AdjustmentBody",
            "in": "body",
            "description": "The Adjustment to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF654BalanceAdjustmentBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful adjustment operation (resource created)",
            "headers": {
              "location": {
                "description": "Location where to query the created transfer",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Perform a balance adjustment for a given bucket on a product (or commercial id reference to a product instance consuming the credit held in a bucket for a specific service).",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      },
      "get": {
        "operationId": "tMF654retrieveAdjustmentOperations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product.id",
            "required": true,
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "information successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF654BalanceAdjustmentRequest"
              }
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "Retrieve the list of adjustment operations requested for a given product (or commercial id reference to a product), filtered by given criteria. The response includes the details of all balance adjustment operations requested",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/product/{productId}/balanceAdjustment": {
      "post": {
        "operationId": "tMF654createAdjustmentProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "type": "string"
          },
          {
            "name": "AdjustmentBody",
            "in": "body",
            "description": "The Adjustment to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF654BalanceAdjustmentBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful adjustment operation (resource created)",
            "headers": {
              "location": {
                "description": "Location where to query the created transfer",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Perform a balance adjustment for a given bucket on a product (or commercial id reference to a product instance consuming the credit held in a bucket for a specific service).",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      },
      "get": {
        "operationId": "tMF654retrieveAdjustmentOperationsProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "information successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF654BalanceAdjustmentRequest"
              }
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "Retrieve the list of adjustment operations requested for a given product (or commercial id reference to a product), filtered by given criteria. The response includes the details of all balance adjustment operations requested",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/balanceAdjustment/{adjustmentId}": {
      "get": {
        "operationId": "tMF654retrieveAdjustment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "adjustmentId",
            "required": true,
            "in": "path",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "information successfully retrieved",
            "schema": {
              "$ref": "#/definitions/TMF654BalanceAdjustmentRequest"
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "Retrieve detailed information about a single adjustment operation previously processed by the server.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/product/{productId}/balanceAdjustment/{adjustmentId}": {
      "get": {
        "operationId": "tMF654retrieveAdjustmentProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "type": "string"
          },
          {
            "name": "adjustmentId",
            "required": true,
            "in": "path",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "information successfully retrieved",
            "schema": {
              "$ref": "#/definitions/TMF654BalanceAdjustmentRequest"
            }
          },
          "400": {
            "description": "Request Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          }
        },
        "summary": "Retrieve detailed information about a single adjustment operation previously processed by the server.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/balanceReserve": {
      "post": {
        "operationId": "tMF654createReserveOperation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "reserveBody",
            "in": "body",
            "description": "The Adjustment to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF654BalanceReserveBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful balance reserve operation request (resource created)",
            "headers": {
              "location": {
                "description": "Location where to query the created object",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Balance reserve operations processed for a given bucket.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/balanceUnreserve": {
      "post": {
        "operationId": "tMF654createUnreserveOperation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "reserveBody",
            "in": "body",
            "description": "The Adjustment to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF654BalanceUnreserveBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful balance unreserve operation request (resource created)",
            "headers": {
              "location": {
                "description": "Location where to query the created transfer",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Balance unreserve operations processed for a given bucket.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/balanceDeduct": {
      "post": {
        "operationId": "tMF654deductBalanceAmount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "DeductBalanceBody",
            "in": "body",
            "description": "The Adjustment to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF654BalanceDeductBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Balance deduct successfully",
            "headers": {
              "location": {
                "description": "Location where to query the created transfer",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Deduct balance amount stored in the server for a specific bucket under a product referenced by a product id of an individual asset created (e.g. license id for a TV service) or commercial identifier based on the value of a resource created under the product (i.e. MSISDN) that maps to an internal product id.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/hub": {
      "post": {
        "operationId": "tMF654createNotification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "NotificationBody",
            "in": "body",
            "description": "The Notification to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF654NotificationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF654NotificationResponse"
            },
            "headers": {
              "location": {
                "description": "Location where to query the created transfer",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics. Subsequent POST calls will be rejected by the service if it does not support multiple listeners. In this case DELETE /api/hub/{id} must be called before an endpoint can be created again.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/hub/{id}": {
      "delete": {
        "operationId": "tMF654deleteNotification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Notification deleted successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Clears the communication endpoint address that was set by creating the Hub.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/prepayBalanceManagement/v2/client/listener": {
      "post": {
        "operationId": "tMF654createClientListener",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ListenerBody",
            "in": "body",
            "description": "The Client Listener to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF654ListenerRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Clears the communication endpoint address that was set by creating the Hub. Provides to a registered listener the description of the event that was raised. The /client/listener url is the callback url passed when registering the listener.",
        "tags": [
          "TMF654 PrepayBalanceManagement"
        ]
      }
    },
    "/changeManagement/v2/changeRequest": {
      "get": {
        "operationId": "tMF655listChangeRequest",
        "summary": "List or find 'ChangeRequest' objects",
        "tags": [
          "TMF655 ChangeManagement"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF655ChangeRequest"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF655createChangeRequest",
        "summary": "Creates a 'ChangeRequest'",
        "tags": [
          "TMF655 ChangeManagement"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF655ChangeRequest_Create"
            },
            "required": true,
            "in": "body",
            "name": "changeRequest",
            "description": "The Change Request to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF655ChangeRequest"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          }
        }
      }
    },
    "/changeManagement/v2/changeRequest/{id}": {
      "get": {
        "operationId": "tMF655retrieveChangeRequest",
        "summary": "Retrieves a 'ChangeRequest' by Id",
        "tags": [
          "TMF655 ChangeManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Change Request"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF655ChangeRequest"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF655patchChangeRequest",
        "summary": "Updates partially a 'ChangeRequest' by Id",
        "tags": [
          "TMF655 ChangeManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Change Request"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF655ChangeRequest_Update"
            },
            "required": true,
            "in": "body",
            "name": "changeRequest",
            "description": "The Change Request to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF655ChangeRequest"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF655deleteChangeRequest",
        "summary": "Deletes a 'ChangeRequest' by Id",
        "tags": [
          "TMF655 ChangeManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Change Request"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          }
        }
      }
    },
    "/changeManagement/v2/hub": {
      "post": {
        "operationId": "tMF655registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF655 ChangeManagement"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF655EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF655EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          }
        }
      }
    },
    "/changeManagement/v2/hub/{id}": {
      "delete": {
        "operationId": "tMF655unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF655 ChangeManagement"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF655Error"
            }
          }
        }
      }
    },
    "/serviceQualityManagement/v2/serviceLevelObjective": {
      "get": {
        "operationId": "tMF657listServiceLevelObjective",
        "summary": "List or find 'ServiceLevelObjective' objects",
        "tags": [
          "TMF657 ServiceQualityManagement"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF657ServiceLevelObjective"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF657createServiceLevelObjective",
        "summary": "Creates a 'ServiceLevelObjective'",
        "tags": [
          "TMF657 ServiceQualityManagement"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF657ServiceLevelObjective_Create"
            },
            "required": true,
            "in": "body",
            "name": "serviceLevelObjective",
            "description": "The Service Level Objective to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF657ServiceLevelObjective"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          }
        }
      }
    },
    "/serviceQualityManagement/v2/serviceLevelObjective/{id}": {
      "get": {
        "operationId": "tMF657retrieveServiceLevelObjective",
        "summary": "Retrieves a 'ServiceLevelObjective' by Id",
        "tags": [
          "TMF657 ServiceQualityManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Level Objective"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF657ServiceLevelObjective"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF657patchServiceLevelObjective",
        "summary": "Updates partially a 'ServiceLevelObjective' by Id",
        "tags": [
          "TMF657 ServiceQualityManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Level Objective"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF657ServiceLevelObjective_Update"
            },
            "required": true,
            "in": "body",
            "name": "serviceLevelObjective",
            "description": "The Service Level Objective to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF657ServiceLevelObjective"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF657deleteServiceLevelObjective",
        "summary": "Deletes a 'ServiceLevelObjective' by Id",
        "tags": [
          "TMF657 ServiceQualityManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Level Objective"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          }
        }
      }
    },
    "/serviceQualityManagement/v2/serviceLevelSpecification": {
      "get": {
        "operationId": "tMF657listServiceLevelSpecification",
        "summary": "List or find 'ServiceLevelSpecification' objects",
        "tags": [
          "TMF657 ServiceQualityManagement"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF657ServiceLevelSpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF657createServiceLevelSpecification",
        "summary": "Creates a 'ServiceLevelSpecification'",
        "tags": [
          "TMF657 ServiceQualityManagement"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF657ServiceLevelSpecification_Create"
            },
            "required": true,
            "in": "body",
            "name": "serviceLevelSpecification",
            "description": "The Service Level Specification to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF657ServiceLevelSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          }
        }
      }
    },
    "/serviceQualityManagement/v2/serviceLevelSpecification/{id}": {
      "get": {
        "operationId": "tMF657retrieveServiceLevelSpecification",
        "summary": "Retrieves a 'ServiceLevelSpecification' by Id",
        "tags": [
          "TMF657 ServiceQualityManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Level Specification"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF657ServiceLevelSpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF657patchServiceLevelSpecification",
        "summary": "Updates partially a 'ServiceLevelSpecification' by Id",
        "tags": [
          "TMF657 ServiceQualityManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Level Specification"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF657ServiceLevelSpecification_Update"
            },
            "required": true,
            "in": "body",
            "name": "serviceLevelSpecification",
            "description": "The Service Level Specification to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF657ServiceLevelSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF657deleteServiceLevelSpecification",
        "summary": "Deletes a 'ServiceLevelSpecification' by Id",
        "tags": [
          "TMF657 ServiceQualityManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Service Level Specification"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          }
        }
      }
    },
    "/serviceQualityManagement/v2/hub": {
      "post": {
        "operationId": "tMF657registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF657 ServiceQualityManagement"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF657EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF657EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          }
        }
      }
    },
    "/serviceQualityManagement/v2/hub/{id}": {
      "delete": {
        "operationId": "tMF657unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF657 ServiceQualityManagement"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF657Error"
            }
          }
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyProgramProductSpec": {
      "get": {
        "description": "This operation is used to retrieve the loyalty program product specifications. A loyalty program product specification contains loyalty rules.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658listProductSpecs",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF658ProgramProductSpec"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/loyaltyProgramProductSpec"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "List Product Specs",
            "x-testDescription": ""
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "This operation is used to create a new loyalty program product specification.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658createProductSpec",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658ProgramProductSpec"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF658ProgramProductSpec"
              }
            }
          },
          "409": {
            "description": "Conflict - Resource already exists.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/loyaltyProgramProductSpec",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "{\r\n    \"id\" : \"121\",\r\n    \"name\":\"UpComingProfessionalsProgram\",\r\n    \"productNumber\":\"121\",\r\n    \"description\": \"Loyalty Program to ensure that prepaid youth market is retained\",\r\n    \"needsLoyaltyAccount\": true,\r\n    \"lifeCycleStatus\": \"active\",\r\n    \"brand\" : \"Globetom\",\r\n    \"validFor\" : {\r\n        \"startDateTime\" : \"2016-01-01T00:00:00Z\",\r\n        \"endDateTime\" : \"2016-12-31T23:59:59Z\"\r\n    }\r\n}"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Create Product Spec",
            "x-testDescription": ""
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyProgramProductSpec/{productSpecId}": {
      "get": {
        "description": "This operation is used to retrieve a single loyalty program product specification. A loyalty program product specification contains loyalty rules.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658getProductSpec",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productSpecId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658ProgramProductSpec"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a program product spec.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658deleteProductSpec",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productSpecId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "description": "Updates a loyalty program product spec.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658updateProductSpec",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658UpdateProductSpec"
            }
          },
          {
            "name": "productSpecId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658ProgramProductSpec"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyAction": {
      "get": {
        "description": "This operation is used to retrieve all the loyalty actions. A loyalty action contains a loyalty execution point.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658listActions",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF658LoyaltyAction"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/loyaltyAction"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "List Actions",
            "x-testDescription": ""
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "This operation is used to create a new loyalty action.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658createAction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyAction"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyAction"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/loyaltyAction",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "{\r\n    \"id\": \"111\",\r\n    \"type\": \"LoyaltyEarn\",\r\n    \"actionAttributes\": {\r\n        \"quantity\": 50\r\n    },\r\n    \"loyaltyExecutionPoint\": {\r\n        \"commonName\": \"LoyaltyEarn\",\r\n        \"description\": \"\",\r\n        \"action\": \"POST\",\r\n        \"endpoint\": \"http://server:port/loyaltyManagement/loyaltyProgramMember/{memberId}/loyaltyBalance/{balanceId}/loyaltyEarn\",\r\n        \"version\": \"2.0\"\r\n    }\r\n}\r\n"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Create Action",
            "x-testDescription": ""
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyAction/{actionId}": {
      "get": {
        "description": "This operation is used to retrieve a loyalty action.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658getAction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyAction"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "This operation is used to delete a loyalty action.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658deleteAction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Update the complete loyalty action.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658updateAction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyAction"
            }
          },
          {
            "name": "actionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyAction"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "description": "This operation partially updates a loyalty action.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658patchAction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyAction"
            }
          },
          {
            "name": "actionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyAction"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyCondition": {
      "get": {
        "description": "This operation is used to retrieve all the loyalty conditions.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658listConditions",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF658LoyaltyCondition"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/loyaltyCondition"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "List Conditions",
            "x-testDescription": ""
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "This operation is used to create a new loyalty condition.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658createCondition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyCondition"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyCondition"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/loyaltyCondition",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "{\r\n    \"id\" : \"1\",\r\n    \"attribute\":\"age\",\r\n    \"operator\":\"<=\",\r\n    \"value\": \"23\"\r\n}\r\n"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Create Condition",
            "x-testDescription": ""
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyCondition/{conditionId}": {
      "get": {
        "description": "•  This operation is used to retrieve a loyalty condition.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658getCondition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "conditionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyCondition"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Update the complete loyalty condition.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658updateCondition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyCondition"
            }
          },
          {
            "name": "conditionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyCondition"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "This operation is used to delete a loyalty condition.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658deleteCondition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "conditionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "description": "This operation partially updates a loyalty condition.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658patchCondition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyCondition"
            }
          },
          {
            "name": "conditionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyCondition"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyEventType": {
      "get": {
        "description": "This operation is used to retrieve the loyalty event types.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658listEventTypes",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF658LoyaltyEventType"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/loyaltyEventType"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "List Event Types",
            "x-testDescription": ""
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "This operation is used to create a new loyalty event type.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658createEventTypes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyEventType"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyEventType"
            }
          },
          "409": {
            "description": "Conflict - A loyalty transaction with the same identifier already exists.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/loyaltyEventType",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "{\r\n    \"id\": \"111\",\r\n    \"eventType\": \"orderCreationNotification\"\r\n}"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Create Event Types",
            "x-testDescription": ""
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyEventType/{eventTypeId}": {
      "get": {
        "description": "This operation is used to retrieve a loyalty event type.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658getEventType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventTypeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyEventType"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658updateEventTypes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyEventType"
            }
          },
          {
            "name": "eventTypeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyEventType"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "This operation is used to delete a loyalty event type.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658deleteEventTypes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventTypeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "description": "",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658updateEventTypes1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658UpdateEventTypesrequest"
            }
          },
          {
            "name": "eventTypeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyEventType"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyProgramProductSpec/{productSpecId}/loyaltyRule": {
      "get": {
        "description": "This operation is used to retrieve the loyalty program product specification’s loyalty rule(s).",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658listRules",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productSpecId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF658LoyaltyRule"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "This operation is used to create a new loyalty rule.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658createRule",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productSpecId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658CreateLoyaltyRule"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyRule"
            }
          },
          "409": {
            "description": "Conflict - A loyalty transaction with the same identifier already exists.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyProgramProductSpec/{productSpecId}/loyaltyRule/{ruleId}": {
      "get": {
        "description": "This operation is used to retrieve a loyalty program product specification loyalty rule.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658getRule",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productSpecId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyRule"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Update the complete loyalty rule.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658updateRule",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productSpecId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658CreateLoyaltyRule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyRule"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "This operation is used to delete a loyalty rule.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658deleteRule",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productSpecId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "description": "This operation partially updates a loyalty rule.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658patchRule",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658CreateLoyaltyRule"
            }
          },
          {
            "name": "productSpecId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyRule"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyProgramProductSpec/{productSpecId}/loyaltyRule/{ruleId}/loyaltyCondition": {
      "get": {
        "description": "This operation is used to retrieve the loyalty rule’s loyalty conditions.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658listRuleConditions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productSpecId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF658LoyaltyCondition"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658addRuleCondition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658AddRuleCondition"
            }
          },
          {
            "name": "productSpecId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyCondition"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyProgramProductSpec/{productSpecId}/loyaltyRule/{ruleId}/loyaltyCondition/{conditionId}": {
      "delete": {
        "description": "This operation is used to remove a loyalty condition from a loyalty rule.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658deleteRuleCondition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productSpecId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "conditionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyProgramProductSpec/{productSpecId}/loyaltyRule/{ruleId}/loyaltyAction": {
      "get": {
        "description": "his operation is used to retrieve the loyalty rule’s loyalty actions.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658getRuleActions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productSpecId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF658LoyaltyAction"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "This operation is used to add a loyalty action to a loyalty rule.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658addRuleAction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productSpecId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658AddRuleAction"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyAction"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyProgramProductSpec/{productSpecId}/loyaltyRule/{ruleId}/loyaltyAction/{actionId}": {
      "delete": {
        "description": "This operation is used to remove a loyalty action from a loyalty rule.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658deleteRuleAction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productSpecId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyProgramProductSpec/{productSpecId}/loyaltyRule/{ruleId}/loyaltyEventType": {
      "get": {
        "description": "This operation is used to retrieve the loyalty rule’s supported loyalty events. ",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658getRuleEventTypes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productSpecId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF658LoyaltyEventType"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "This operation is used to add a loyalty event type to a loyalty rule.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658addRuleEventType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productSpecId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658AddRuleEventType"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyEventType"
            }
          },
          "409": {
            "description": "Conflict - A loyalty transaction with the same identifier already exists.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyProgramProductSpec/{productSpecId}/loyaltyRule/{ruleId}/loyaltyEventType/{eventTypeId}": {
      "delete": {
        "description": "This operation is used to remove a loyalty event type from a loyalty rule.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658deleteRuleEventType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productSpecId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "eventTypeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyProgramMember": {
      "get": {
        "description": "This operation retrieves loyalty program members. The loyalty program member contains accounts and balances in logical containers.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658getMembers",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF658LoyaltyMember"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/loyaltyProgramMember"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Get Members",
            "x-testDescription": ""
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "This operation creates a new loyalty program member.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658createMember",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyMember"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyMember"
            }
          },
          "409": {
            "description": "Conflict - A loyalty transaction with the same identifier already exists.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/loyaltyProgramMember",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "{\r\n    \"status\":\"suspended\",\r\n    \"name\":\"James Joe\",\r\n    \"validFor\": {\r\n        \"startDateTime\":\"2015-04-19T16:42:23.0Z \",\r\n        \"endDateTime\":\"2016-04-19T16:42:23.0Z\"\r\n    }\r\n}"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Create Member",
            "x-testDescription": ""
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyProgramMember/{memberId}": {
      "get": {
        "description": "This operation retrieves a loyalty program member by ID. The loyalty program member contains accounts and balances in logical containers.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658getMember",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyMember"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "description": "This operation updates the attributes of a loyalty program member present in the request body.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658updateMember",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658UpdateLoyaltyMember"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyMember"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "This operation deletes a loyalty program member.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658deleteMember",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyAccount/{accountId}/loyaltyBalance": {
      "get": {
        "description": "This operation retrieves loyalty program member accounts. The account resource is also returned within each balance entity.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658listMemberBalances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF658LoyaltyBalance"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "This operation creates a new loyalty program member account balance.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658createMemberBalance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658CreateLoyaltyBalance"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyBalance"
            }
          },
          "409": {
            "description": "Conflict - A loyalty transaction with the same identifier already exists.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyAccount/{accountId}/loyaltyBalance/{balanceId}": {
      "get": {
        "description": "This operation retrieves a loyalty program member account. The account resource is also returned within each balance entity.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658getMemberBalance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "balanceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyBalance"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "This operation deletes a loyalty program member account.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658updateMemberBalance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "balanceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "description": "This operation updates the attributes of a loyalty program member loyalty balance present in the request body.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658deleteMemberBalance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "balanceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyBalanceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyBalance"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyProgramMember/{memberId}/loyaltyAccount": {
      "get": {
        "description": "This operation retrieves loyalty program member accounts.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658listMemberAccounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF658LoyaltyAccount"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyProgramMember/{memberId}/loyaltyProgramProduct": {
      "get": {
        "description": "This operation is used to retrieve the loyalty program member’s loyalty program products.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658listProducts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF658ProductProgramRef"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "This operation is used to create a new loyalty program product.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658createProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658ProductProgramRef"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF658ProductProgramRef"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyProgramMember/{memberId}/loyaltyProgramProduct/{programProductId}": {
      "get": {
        "description": "This operation is used to retrieve the loyalty program member’s loyalty program product.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658getProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "programProductId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658ProductProgramRef"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "This operation is used to delete a loyalty program product.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658deleteProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "programProductId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "description": "This operation partially updates a loyalty program member’s loyalty program product.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658updateProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "programProductId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658ProductProgramUpdateRef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658ProductProgramRef"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyProgramMember/{memberId}/loyaltyProgramProduct/{programProductId}/loyaltyExecutionPoint": {
      "get": {
        "description": "This operation is used to retrieve all the loyalty execution points on a loyalty product. These execution points are records of loyalty actions executed.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658getExecutionPoints",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "programProductId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF658LoyaltyExecutionPoint"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyAccount/{accountId}/loyaltyBalance/{balanceId}/loyaltyEarn/{transactionId}": {
      "get": {
        "description": "This operation retrieves a loyalty account loyalty earn transaction on a spesific account balance.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658getEarnTransaction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "balanceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyTransactionRef"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyAccount/{accountId}/loyaltyBalance/{balanceId}/loyaltyEarn": {
      "get": {
        "description": "This operation retrieves a loyalty account loyalty earn transactions on a spesific account balance.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658listEarnTransactions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "balanceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF658LoyaltyTransactionRef"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "This operation creates a new loyalty earn transaction.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658earnLoyaltyBalance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "balanceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyTransactionRef"
            }
          },
          "409": {
            "description": "Conflict - A loyalty transaction with the same identifier already exists.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyAccount/{accountId}/loyaltyBalance/{balanceId}/loyaltyBurn/{transactionId}": {
      "get": {
        "description": "This operation retrieves a single loyalty account loyalty burn transaction on a spesific account balance.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658getBurnTransaction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "balanceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyTransactionRef"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyAccount/{accountId}/loyaltyBalance/{balanceId}/loyaltyBurn": {
      "get": {
        "description": "This operation retrieves a loyalty account loyalty burn transactions on a spesific account balance.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658listBurnTransactions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "balanceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF658LoyaltyTransactionRef"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "This operation creates a new loyalty burn transaction.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658burnLoyaltyBalance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "balanceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyTransactionRef"
            }
          },
          "409": {
            "description": "Conflict - A loyalty transaction with the same identifier already exists.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/loyaltyManagement/v1/loyaltyEvent": {
      "post": {
        "description": "This operation specifies a loyalty event that has occurred.",
        "tags": [
          "TMF658 LoyaltyManagement"
        ],
        "operationId": "tMF658notifyLoyaltyEvent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF658LoyaltyEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "422": {
            "description": "Unprocessable Entity - Field rule violation or missing required attribute.",
            "schema": {
              "$ref": "#/definitions/TMF658Error"
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/loyaltyEvent",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "{\r\n    \"eventId\":\"00001\",\r\n    \"eventTime\":\"2013-04-19T16:42:25-04:00\",\r\n    \"eventType\":\"orderCreationNotification\",\r\n    \"event\":{\r\n        \"productOrder\":{\r\n            \"id\":\"42\",\r\n             \"href\":\"http://serverlocation:port/orderManagement/productOrder/42\",\r\n             \"externalId\":\"NiceNameForTheConsumer_42\"\r\n        }\r\n    }\r\n}\r\n"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Notify Loyalty Event",
            "x-testDescription": ""
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/entityCatalogManagement/v1/catalog": {
      "get": {
        "operationId": "tMF662listCatalog",
        "summary": "List or find 'Catalog' objects",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name of the catalog"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Indicates the (class) type of catalog. For entity catalogs, this will be 'EntityCatalog'."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: Indicates<b> </b>the base (class) type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Catalog version"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF662Catalog"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF662createCatalog",
        "summary": "Creates a 'Catalog'",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF662Catalog_Create"
            },
            "required": true,
            "in": "body",
            "name": "catalog",
            "description": "The Catalog to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF662Catalog"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      }
    },
    "/entityCatalogManagement/v1/catalog/{id}": {
      "get": {
        "operationId": "tMF662retrieveCatalog",
        "summary": "Retrieves a 'Catalog' by Id",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Catalog"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF662Catalog"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF662updateCatalog",
        "summary": "Updates partially a 'Catalog' by Id",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Catalog"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF662Catalog_Update"
            },
            "required": true,
            "in": "body",
            "name": "catalog",
            "description": "The Catalog to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF662Catalog"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF662deleteCatalog",
        "summary": "Deletes a 'Catalog' by Id",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Catalog"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      }
    },
    "/entityCatalogManagement/v1/category": {
      "get": {
        "operationId": "tMF662listCategory",
        "summary": "List or find 'Category' objects",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Category version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "parentId",
            "description": "For filtering: Unique identifier of the parent category"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "isRoot",
            "description": "For filtering: If true, this Boolean indicates that the category is a root of categories"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name of the category"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF662Category"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF662createCategory",
        "summary": "Creates a 'Category'",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF662Category_Create"
            },
            "required": true,
            "in": "body",
            "name": "category",
            "description": "The Category to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF662Category"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      }
    },
    "/entityCatalogManagement/v1/category/{id}": {
      "get": {
        "operationId": "tMF662retrieveCategory",
        "summary": "Retrieves a 'Category' by Id",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Category"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF662Category"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF662updateCategory",
        "summary": "Updates partially a 'Category' by Id",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Category"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF662Category_Update"
            },
            "required": true,
            "in": "body",
            "name": "category",
            "description": "The Category to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF662Category"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF662deleteCategory",
        "summary": "Deletes a 'Category' by Id",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Category"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      }
    },
    "/entityCatalogManagement/v1/entityCatalogItem": {
      "get": {
        "operationId": "tMF662listEntityCatalogItem",
        "summary": "List or find 'EntityCatalogItem' objects",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name given to this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: The (immediate) base class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: EntityCatalogItem version"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status of this catalog item"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF662EntityCatalogItem"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF662createEntityCatalogItem",
        "summary": "Creates a 'EntityCatalogItem'",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF662EntityCatalogItem_Create"
            },
            "required": true,
            "in": "body",
            "name": "entityCatalogItem",
            "description": "The Entity Catalog Item to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF662EntityCatalogItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      }
    },
    "/entityCatalogManagement/v1/entityCatalogItem/{id}": {
      "get": {
        "operationId": "tMF662retrieveEntityCatalogItem",
        "summary": "Retrieves a 'EntityCatalogItem' by Id",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Entity Catalog Item"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF662EntityCatalogItem"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF662updateEntityCatalogItem",
        "summary": "Updates partially a 'EntityCatalogItem' by Id",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Entity Catalog Item"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF662EntityCatalogItem_Update"
            },
            "required": true,
            "in": "body",
            "name": "entityCatalogItem",
            "description": "The Entity Catalog Item to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF662EntityCatalogItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF662deleteEntityCatalogItem",
        "summary": "Deletes a 'EntityCatalogItem' by Id",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Entity Catalog Item"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      }
    },
    "/entityCatalogManagement/v1/entitySpecification": {
      "get": {
        "operationId": "tMF662listEntitySpecification",
        "summary": "List or find 'EntitySpecification' objects",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name given to this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: The (immediate) base class type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Entity specification version"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status of this catalog item"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.name",
            "description": "For filtering: name given to the attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.@type",
            "description": "For filtering: Attachment class  type"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.uri",
            "description": "For filtering: Uniform Resource Identifier (URI) of the attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.mimeType",
            "description": "For filtering: Attachment mime type such as extension file for video, picture and document"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "entitySchema.@type",
            "description": "For filtering: Class type of the target entity"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "entitySchema.@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing the target entity"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "specCharacteristic.name",
            "description": "For filtering: Name of the SpecCharacteristic"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "specCharacteristic.valueType",
            "description": "For filtering: A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "specCharacteristic.configurable",
            "description": "For filtering: If true, the Boolean indicates that the SpecCharacteristic is configurable"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "specCharacteristic.@type",
            "description": "For filtering: (Class) type of the characteristic"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "specCharacteristic.@schemaLocation",
            "description": "For filtering: A link to the schema describing this characteristic"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.role",
            "description": "For filtering: Role of the related party."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.name",
            "description": "For filtering: Name of the related party"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF662EntitySpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF662createEntitySpecification",
        "summary": "Creates a 'EntitySpecification'",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF662EntitySpecification_Create"
            },
            "required": true,
            "in": "body",
            "name": "entitySpecification",
            "description": "The Entity Specification to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF662EntitySpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      }
    },
    "/entityCatalogManagement/v1/entitySpecification/{id}": {
      "get": {
        "operationId": "tMF662retrieveEntitySpecification",
        "summary": "Retrieves a 'EntitySpecification' by Id",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Entity Specification"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF662EntitySpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF662updateEntitySpecification",
        "summary": "Updates partially a 'EntitySpecification' by Id",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Entity Specification"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF662EntitySpecification_Update"
            },
            "required": true,
            "in": "body",
            "name": "entitySpecification",
            "description": "The Entity Specification to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF662EntitySpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF662deleteEntitySpecification",
        "summary": "Deletes a 'EntitySpecification' by Id",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Entity Specification"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      }
    },
    "/entityCatalogManagement/v1/associationSpecification": {
      "get": {
        "operationId": "tMF662listAssociationSpecification",
        "summary": "List or find 'AssociationSpecification' objects",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name given to this association specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: The (class) type of this association specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: Immediate base class type of this association specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Version of this association"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: The last modified date of this specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Indicates the current lifecycle status"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "constraint.version",
            "description": "For filtering: constraint version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "constraint.name",
            "description": "For filtering: Name given to the constraint"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "constraint.@type",
            "description": "For filtering: The (class) type of the constraint"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "associationRoleSpec.role",
            "description": "For filtering: "
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "associationRoleSpec.isSource",
            "description": "For filtering: "
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "associationRoleSpec.aggregation",
            "description": "For filtering: "
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "associationRoleSpec.minQuantity",
            "description": "For filtering: "
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "associationRoleSpec.maxQuantity",
            "description": "For filtering: "
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "associationRoleSpec.defaulQuantity",
            "description": "For filtering: "
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "associationRoleSpec.entityType",
            "description": "For filtering: "
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF662AssociationSpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF662createAssociationSpecification",
        "summary": "Creates a 'AssociationSpecification'",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF662AssociationSpecification_Create"
            },
            "required": true,
            "in": "body",
            "name": "associationSpecification",
            "description": "The Association Specification to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF662AssociationSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      }
    },
    "/entityCatalogManagement/v1/associationSpecification/{id}": {
      "get": {
        "operationId": "tMF662retrieveAssociationSpecification",
        "summary": "Retrieves a 'AssociationSpecification' by Id",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Association Specification"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF662AssociationSpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF662updateAssociationSpecification",
        "summary": "Updates partially a 'AssociationSpecification' by Id",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Association Specification"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF662AssociationSpecification_Update"
            },
            "required": true,
            "in": "body",
            "name": "associationSpecification",
            "description": "The Association Specification to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF662AssociationSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF662deleteAssociationSpecification",
        "summary": "Deletes a 'AssociationSpecification' by Id",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Association Specification"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      }
    },
    "/entityCatalogManagement/v1/association": {
      "get": {
        "operationId": "tMF662listAssociation",
        "summary": "List or find 'Association' objects",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name given to this association"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: The (class) type of this association"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: Immediate base class type of this association"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Version of this REST resource"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: The last modified date of this association object"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Indicates the current lifecycle status"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "associationSpec.@type",
            "description": "For filtering: The (class) type of the AssociationSpecification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "associationRole.role",
            "description": "For filtering: The association role of this relationship participant as defined in the associationRoleSpec"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "associationRole.isSource",
            "description": "For filtering: A flag indicating if the participant involved in a uni-directional relationship is the source or not. this flag is true If the association is bi-directional (both end points are navigable)"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "associationRole.name",
            "description": "For filtering: Name of the endpoint which plays this association role"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "associationRole.@type",
            "description": "For filtering: (class) type of the endpoint which plays this association role"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "constraint.version",
            "description": "For filtering: constraint version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "constraint.name",
            "description": "For filtering: Name given to the constraint"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "constraint.@type",
            "description": "For filtering: The (class) type of the constraint"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF662Association"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF662createAssociation",
        "summary": "Creates a 'Association'",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF662Association_Create"
            },
            "required": true,
            "in": "body",
            "name": "association",
            "description": "The Association to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF662Association"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      }
    },
    "/entityCatalogManagement/v1/association/{id}": {
      "get": {
        "operationId": "tMF662retrieveAssociation",
        "summary": "Retrieves a 'Association' by Id",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Association"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF662Association"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF662updateAssociation",
        "summary": "Updates partially a 'Association' by Id",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Association"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF662Association_Update"
            },
            "required": true,
            "in": "body",
            "name": "association",
            "description": "The Association to be updated"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF662Association"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF662deleteAssociation",
        "summary": "Deletes a 'Association' by Id",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Association"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      }
    },
    "/entityCatalogManagement/v1/hub": {
      "post": {
        "operationId": "tMF662registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF662EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF662EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      }
    },
    "/entityCatalogManagement/v1/hub/{id}": {
      "delete": {
        "operationId": "tMF662unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF662 EntityCatalog"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "201": {
            "description": "Unsubscribed"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF662Error"
            }
          }
        }
      }
    },
    "/shoppingCart/v2/shoppingCart": {
      "get": {
        "operationId": "tMF663listShoppingCart",
        "summary": "List or find 'ShoppingCart' objects",
        "tags": [
          "TMF663 ShoppingCart"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF663ShoppingCart"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF663createShoppingCart",
        "summary": "Creates a 'ShoppingCart'",
        "tags": [
          "TMF663 ShoppingCart"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF663ShoppingCart_Create"
            },
            "required": true,
            "in": "body",
            "name": "shoppingCart",
            "description": "The Shopping Cart to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF663ShoppingCart"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          }
        }
      }
    },
    "/shoppingCart/v2/shoppingCart/{id}": {
      "get": {
        "operationId": "tMF663retrieveShoppingCart",
        "summary": "Retrieves a 'ShoppingCart' by Id",
        "tags": [
          "TMF663 ShoppingCart"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Shopping Cart"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF663ShoppingCart"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF663patchShoppingCart",
        "summary": "Updates partially a 'ShoppingCart' by Id",
        "tags": [
          "TMF663 ShoppingCart"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Shopping Cart"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF663ShoppingCart_Update"
            },
            "required": true,
            "in": "body",
            "name": "shoppingCart",
            "description": "The Shopping Cart to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF663ShoppingCart"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF663deleteShoppingCart",
        "summary": "Deletes a 'ShoppingCart' by Id",
        "tags": [
          "TMF663 ShoppingCart"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Shopping Cart"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          }
        }
      }
    },
    "/shoppingCart/v2/hub": {
      "post": {
        "operationId": "tMF663registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF663 ShoppingCart"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF663EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF663EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          }
        }
      }
    },
    "/shoppingCart/v2/hub/{id}": {
      "delete": {
        "operationId": "tMF663unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF663 ShoppingCart"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF663Error"
            }
          }
        }
      }
    },
    "/accountManagement/v2/partyAccount": {
      "get": {
        "operationId": "tMF666listPartyAccount",
        "summary": "List or find 'PartyAccount' objects",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF666PartyAccount"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF666createPartyAccount",
        "summary": "Creates a 'PartyAccount'",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF666PartyAccount_Create"
            },
            "required": true,
            "in": "body",
            "name": "partyAccount",
            "description": "The Party Account to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF666PartyAccount"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      }
    },
    "/accountManagement/v2/partyAccount/{id}": {
      "get": {
        "operationId": "tMF666retrievePartyAccount",
        "summary": "Retrieves a 'PartyAccount' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Party Account"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF666PartyAccount"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF666patchPartyAccount",
        "summary": "Updates partially a 'PartyAccount' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Party Account"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF666PartyAccount_Update"
            },
            "required": true,
            "in": "body",
            "name": "partyAccount",
            "description": "The Party Account to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF666PartyAccount"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF666deletePartyAccount",
        "summary": "Deletes a 'PartyAccount' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Party Account"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      }
    },
    "/accountManagement/v2/billingAccount": {
      "get": {
        "operationId": "tMF666listBillingAccount",
        "summary": "List or find 'BillingAccount' objects",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF666BillingAccount"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF666createBillingAccount",
        "summary": "Creates a 'BillingAccount'",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF666BillingAccount_Create"
            },
            "required": true,
            "in": "body",
            "name": "billingAccount",
            "description": "The Billing Account to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF666BillingAccount"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      }
    },
    "/accountManagement/v2/billingAccount/{id}": {
      "get": {
        "operationId": "tMF666retrieveBillingAccount",
        "summary": "Retrieves a 'BillingAccount' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Billing Account"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF666BillingAccount"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF666patchBillingAccount",
        "summary": "Updates partially a 'BillingAccount' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Billing Account"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF666BillingAccount_Update"
            },
            "required": true,
            "in": "body",
            "name": "billingAccount",
            "description": "The Billing Account to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF666BillingAccount"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF666deleteBillingAccount",
        "summary": "Deletes a 'BillingAccount' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Billing Account"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      }
    },
    "/accountManagement/v2/settlementAccount": {
      "get": {
        "operationId": "tMF666listSettlementAccount",
        "summary": "List or find 'SettlementAccount' objects",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF666SettlementAccount"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF666createSettlementAccount",
        "summary": "Creates a 'SettlementAccount'",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF666SettlementAccount_Create"
            },
            "required": true,
            "in": "body",
            "name": "settlementAccount",
            "description": "The Settlement Account to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF666SettlementAccount"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      }
    },
    "/accountManagement/v2/settlementAccount/{id}": {
      "get": {
        "operationId": "tMF666retrieveSettlementAccount",
        "summary": "Retrieves a 'SettlementAccount' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Settlement Account"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF666SettlementAccount"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF666patchSettlementAccount",
        "summary": "Updates partially a 'SettlementAccount' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Settlement Account"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF666SettlementAccount_Update"
            },
            "required": true,
            "in": "body",
            "name": "settlementAccount",
            "description": "The Settlement Account to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF666SettlementAccount"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF666deleteSettlementAccount",
        "summary": "Deletes a 'SettlementAccount' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Settlement Account"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      }
    },
    "/accountManagement/v2/financialAccount": {
      "get": {
        "operationId": "tMF666listFinancialAccount",
        "summary": "List or find 'FinancialAccount' objects",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF666FinancialAccount"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF666createFinancialAccount",
        "summary": "Creates a 'FinancialAccount'",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF666FinancialAccount_Create"
            },
            "required": true,
            "in": "body",
            "name": "financialAccount",
            "description": "The Financial Account to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF666FinancialAccount"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      }
    },
    "/accountManagement/v2/financialAccount/{id}": {
      "get": {
        "operationId": "tMF666retrieveFinancialAccount",
        "summary": "Retrieves a 'FinancialAccount' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Financial Account"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF666FinancialAccount"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF666patchFinancialAccount",
        "summary": "Updates partially a 'FinancialAccount' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Financial Account"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF666FinancialAccount_Update"
            },
            "required": true,
            "in": "body",
            "name": "financialAccount",
            "description": "The Financial Account to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF666FinancialAccount"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF666deleteFinancialAccount",
        "summary": "Deletes a 'FinancialAccount' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Financial Account"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      }
    },
    "/accountManagement/v2/billingCycleSpecification": {
      "get": {
        "operationId": "tMF666listBillingCycleSpecification",
        "summary": "List or find 'BillingCycleSpecification' objects",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF666BillingCycleSpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF666createBillingCycleSpecification",
        "summary": "Creates a 'BillingCycleSpecification'",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF666BillingCycleSpecification_Create"
            },
            "required": true,
            "in": "body",
            "name": "billingCycleSpecification",
            "description": "The Billing Cycle Specification to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF666BillingCycleSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      }
    },
    "/accountManagement/v2/billingCycleSpecification/{id}": {
      "get": {
        "operationId": "tMF666retrieveBillingCycleSpecification",
        "summary": "Retrieves a 'BillingCycleSpecification' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Billing Cycle Specification"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF666BillingCycleSpecification"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF666patchBillingCycleSpecification",
        "summary": "Updates partially a 'BillingCycleSpecification' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Billing Cycle Specification"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF666BillingCycleSpecification_Update"
            },
            "required": true,
            "in": "body",
            "name": "billingCycleSpecification",
            "description": "The Billing Cycle Specification to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF666BillingCycleSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF666deleteBillingCycleSpecification",
        "summary": "Deletes a 'BillingCycleSpecification' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Billing Cycle Specification"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      }
    },
    "/accountManagement/v2/billFormat": {
      "get": {
        "operationId": "tMF666listBillFormat",
        "summary": "List or find 'BillFormat' objects",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF666BillFormat"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF666createBillFormat",
        "summary": "Creates a 'BillFormat'",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF666BillFormat_Create"
            },
            "required": true,
            "in": "body",
            "name": "billFormat",
            "description": "The Bill Format to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF666BillFormat"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      }
    },
    "/accountManagement/v2/billFormat/{id}": {
      "get": {
        "operationId": "tMF666retrieveBillFormat",
        "summary": "Retrieves a 'BillFormat' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Bill Format"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF666BillFormat"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF666patchBillFormat",
        "summary": "Updates partially a 'BillFormat' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Bill Format"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF666BillFormat_Update"
            },
            "required": true,
            "in": "body",
            "name": "billFormat",
            "description": "The Bill Format to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF666BillFormat"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF666deleteBillFormat",
        "summary": "Deletes a 'BillFormat' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Bill Format"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      }
    },
    "/accountManagement/v2/billPresentationMedia": {
      "get": {
        "operationId": "tMF666listBillPresentationMedia",
        "summary": "List or find 'BillPresentationMedia' objects",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF666BillPresentationMedia"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF666createBillPresentationMedia",
        "summary": "Creates a 'BillPresentationMedia'",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF666BillPresentationMedia_Create"
            },
            "required": true,
            "in": "body",
            "name": "billPresentationMedia",
            "description": "The Bill Presentation Media to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF666BillPresentationMedia"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      }
    },
    "/accountManagement/v2/billPresentationMedia/{id}": {
      "get": {
        "operationId": "tMF666retrieveBillPresentationMedia",
        "summary": "Retrieves a 'BillPresentationMedia' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Bill Presentation Media"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF666BillPresentationMedia"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF666patchBillPresentationMedia",
        "summary": "Updates partially a 'BillPresentationMedia' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Bill Presentation Media"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF666BillPresentationMedia_Update"
            },
            "required": true,
            "in": "body",
            "name": "billPresentationMedia",
            "description": "The Bill Presentation Media to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF666BillPresentationMedia"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF666deleteBillPresentationMedia",
        "summary": "Deletes a 'BillPresentationMedia' by Id",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Bill Presentation Media"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      }
    },
    "/accountManagement/v2/hub": {
      "post": {
        "operationId": "tMF666registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF666EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF666EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      }
    },
    "/accountManagement/v2/hub/{id}": {
      "delete": {
        "operationId": "tMF666unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF666 AccountManagement"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF666Error"
            }
          }
        }
      }
    },
    "/partnershipTypeManagement/v2/partnershipType": {
      "get": {
        "operationId": "tMF668listPartnershipType",
        "summary": "List or find 'PartnershipType' objects",
        "tags": [
          "TMF668 PartnershipType"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF668PartnershipType"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF668createPartnershipType",
        "summary": "Creates a 'PartnershipType'",
        "tags": [
          "TMF668 PartnershipType"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF668PartnershipType_Create"
            },
            "required": true,
            "in": "body",
            "name": "partnershipType",
            "description": "The Partnership Type to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF668PartnershipType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          }
        }
      }
    },
    "/partnershipTypeManagement/v2/partnershipType/{id}": {
      "get": {
        "operationId": "tMF668retrievePartnershipType",
        "summary": "Retrieves a 'PartnershipType' by Id",
        "tags": [
          "TMF668 PartnershipType"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Partnership Type"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF668PartnershipType"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF668patchPartnershipType",
        "summary": "Updates partially a 'PartnershipType' by Id",
        "tags": [
          "TMF668 PartnershipType"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Partnership Type"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF668PartnershipType_Update"
            },
            "required": true,
            "in": "body",
            "name": "partnershipType",
            "description": "The Partnership Type to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF668PartnershipType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF668deletePartnershipType",
        "summary": "Deletes a 'PartnershipType' by Id",
        "tags": [
          "TMF668 PartnershipType"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Partnership Type"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          }
        }
      }
    },
    "/partnershipTypeManagement/v2/hub": {
      "post": {
        "operationId": "tMF668registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF668 PartnershipType"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF668EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF668EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          }
        }
      }
    },
    "/partnershipTypeManagement/v2/hub/{id}": {
      "delete": {
        "operationId": "tMF668unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF668 PartnershipType"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF668Error"
            }
          }
        }
      }
    },
    "/partyRoleManagement/v2/partyRole": {
      "get": {
        "operationId": "tMF669listPartyRole",
        "summary": "List or find 'PartyRole' objects",
        "tags": [
          "TMF669 PartyRole"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF669PartyRole"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF669createPartyRole",
        "summary": "Creates a 'PartyRole'",
        "tags": [
          "TMF669 PartyRole"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF669PartyRole_Create"
            },
            "required": true,
            "in": "body",
            "name": "partyRole",
            "description": "The Party Role to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF669PartyRole"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          }
        }
      }
    },
    "/partyRoleManagement/v2/partyRole/{id}": {
      "get": {
        "operationId": "tMF669retrievePartyRole",
        "summary": "Retrieves a 'PartyRole' by Id",
        "tags": [
          "TMF669 PartyRole"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Party Role"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF669PartyRole"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF669patchPartyRole",
        "summary": "Updates partially a 'PartyRole' by Id",
        "tags": [
          "TMF669 PartyRole"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Party Role"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF669PartyRole_Update"
            },
            "required": true,
            "in": "body",
            "name": "partyRole",
            "description": "The Party Role to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF669PartyRole"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF669deletePartyRole",
        "summary": "Deletes a 'PartyRole' by Id",
        "tags": [
          "TMF669 PartyRole"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Party Role"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          }
        }
      }
    },
    "/partyRoleManagement/v2/hub": {
      "post": {
        "operationId": "tMF669registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF669 PartyRole"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF669EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF669EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          }
        }
      }
    },
    "/partyRoleManagement/v2/hub/{id}": {
      "delete": {
        "operationId": "tMF669unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF669 PartyRole"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF669Error"
            }
          }
        }
      }
    },
    "/paymentMethods/v1/paymentMethod": {
      "get": {
        "operationId": "tMF670retrievePaymentMethods",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "To retrieve methods of a specific type",
            "enum": [
              "cash",
              "digitalWallet",
              "tokenizedCard",
              "bankAccountTransfer",
              "bankAccountDebit",
              "bankCard",
              "account",
              "bucket",
              "voucher",
              "check",
              "loyaltyAccount"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve the accounts of a specific bank",
            "in": "query",
            "name": "bankAccount.BIC",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific account",
            "in": "query",
            "name": "bankAccount.accountNumber",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve the accounts of a specific bank",
            "in": "query",
            "name": "bankAccount.bank",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific bank card",
            "in": "query",
            "name": "bankCard.cardNumber",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve cards with a specific name",
            "in": "query",
            "name": "bankCard.nameOnCard",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve cards of a specific type",
            "in": "query",
            "name": "bankCard.type",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific check",
            "in": "query",
            "name": "check.checkId",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve checks of a specific bank",
            "in": "query",
            "name": "check.bank",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve methods from a specific related party",
            "in": "query",
            "name": "relatedParty.id",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve methods from a specific related party",
            "in": "query",
            "name": "relatedParty.type",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific loyalty account",
            "in": "query",
            "name": "loyaltyAccount",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve digital wallets of a specific service",
            "in": "query",
            "name": "digitalWallet.service",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific digital wallet",
            "in": "query",
            "name": "digitalWallet.id",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific bucket",
            "in": "query",
            "name": "bucket",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific voucher",
            "in": "query",
            "name": "voucher.id",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve voucher with a specific code",
            "in": "query",
            "name": "voucher.code",
            "required": false,
            "type": "string"
          },
          {
            "description": "To apply a filter on every resource included in the response. It's value is a list of comma separated values of the different fields that are requested.",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "To limit the maximum number of results to be included in the response. The name of query parameter is ‘limit’ and its value is an integer indicating the maximum number of elements to be included in the response.",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "To apply an offset in the results to be included in the response. The name of query parameter is ‘offset’ and its value is an integer indicating the offset to be applied.",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment methods retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF670PaymentMethodType"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total results",
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "Invalid Token"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve a list of payment methods",
        "tags": [
          "TMF670 PaymentMethods"
        ]
      },
      "post": {
        "operationId": "tMF670createPaymentMethod",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentMethodRequest",
            "in": "body",
            "description": "The payment method to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF670PaymentMethodRequestType"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment method created successfully",
            "schema": {
              "$ref": "#/definitions/TMF670PaymentMethodType"
            },
            "headers": {
              "location": {
                "description": "Location where to query the created payment method",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Create a new payment method",
        "tags": [
          "TMF670 PaymentMethods"
        ]
      }
    },
    "/paymentMethods/v1/paymentMethod/{paymentMethodId}": {
      "get": {
        "operationId": "tMF670retrievePaymentMethod",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentMethodId",
            "in": "path",
            "description": "id of the payment method to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment method retrieved successfully",
            "schema": {
              "$ref": "#/definitions/TMF670PaymentMethodType"
            }
          },
          "400": {
            "description": "Invalid Token"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve a payment method",
        "tags": [
          "TMF670 PaymentMethods"
        ]
      },
      "delete": {
        "operationId": "tMF670deletePaymentMethod",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentMethodId",
            "in": "path",
            "description": "id of the payment method to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Payment method deleted successfully"
          },
          "400": {
            "description": "Invalid Token"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Delete a payment method",
        "tags": [
          "TMF670 PaymentMethods"
        ]
      }
    },
    "/paymentMethods/v1/accounts/{accountId}/paymentMethods": {
      "get": {
        "operationId": "tMF670retrieveAssociatedPaymentMethods",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "id of the account to fetch",
            "required": true,
            "type": "string"
          },
          {
            "description": "To retrieve methods of a specific type",
            "enum": [
              "cash",
              "digitalWallet",
              "tokenizedCard",
              "bankAccountTransfer",
              "bankAccountDebit",
              "bankCard",
              "account",
              "bucket",
              "voucher",
              "check",
              "loyaltyAccount"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve the accounts of a specific bank",
            "in": "query",
            "name": "bankAccount.BIC",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific account",
            "in": "query",
            "name": "bankAccount.accountNumber",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve the accounts of a specific bank",
            "in": "query",
            "name": "bankAccount.bank",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific bank card",
            "in": "query",
            "name": "bankCard.cardNumber",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve cards with a specific name",
            "in": "query",
            "name": "bankCard.nameOnCard",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve cards of a specific type",
            "in": "query",
            "name": "bankCard.type",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific check",
            "in": "query",
            "name": "check.checkId",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve checks of a specific bank",
            "in": "query",
            "name": "check.bank",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific telco account",
            "in": "query",
            "name": "account",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific loyalty account",
            "in": "query",
            "name": "loyaltyAccount",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve digital wallets of a specific service",
            "in": "query",
            "name": "digitalWallet.service",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific digital wallet",
            "in": "query",
            "name": "digitalWallet.id",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific bucket",
            "in": "query",
            "name": "bucket",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific voucher",
            "in": "query",
            "name": "voucher.id",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve voucher with a specific code",
            "in": "query",
            "name": "voucher.code",
            "required": false,
            "type": "string"
          },
          {
            "description": "To apply a filter on every resource included in the response. It's value is a list of comma separated values of the different fields that are requested.",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "To limit the maximum number of results to be included in the response. The name of query parameter is ‘limit’ and its value is an integer indicating the maximum number of elements to be included in the response.",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "To apply an offset in the results to be included in the response. The name of query parameter is ‘offset’ and its value is an integer indicating the offset to be applied.",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Associated payment methods retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF670PaymentMethodType"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total results",
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "Invalid Token"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve payment methods associated to an account",
        "tags": [
          "TMF670 PaymentMethods"
        ]
      }
    },
    "/promotionManagement/v2/promotion": {
      "get": {
        "operationId": "tMF671listPromotion",
        "summary": "List or find 'Promotion' objects",
        "tags": [
          "TMF671 Promotion"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF671Promotion"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF671createPromotion",
        "summary": "Creates a 'Promotion'",
        "tags": [
          "TMF671 Promotion"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF671Promotion_Create"
            },
            "required": true,
            "in": "body",
            "name": "promotion",
            "description": "The Promotion to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF671Promotion"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          }
        }
      }
    },
    "/promotionManagement/v2/promotion/{id}": {
      "get": {
        "operationId": "tMF671retrievePromotion",
        "summary": "Retrieves a 'Promotion' by Id",
        "tags": [
          "TMF671 Promotion"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Promotion"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF671Promotion"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF671patchPromotion",
        "summary": "Updates partially a 'Promotion' by Id",
        "tags": [
          "TMF671 Promotion"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Promotion"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF671Promotion_Update"
            },
            "required": true,
            "in": "body",
            "name": "promotion",
            "description": "The Promotion to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF671Promotion"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF671deletePromotion",
        "summary": "Deletes a 'Promotion' by Id",
        "tags": [
          "TMF671 Promotion"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Promotion"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          }
        }
      }
    },
    "/promotionManagement/v2/hub": {
      "post": {
        "operationId": "tMF671registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF671 Promotion"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF671EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF671EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          }
        }
      }
    },
    "/promotionManagement/v2/hub/{id}": {
      "delete": {
        "operationId": "tMF671unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF671 Promotion"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF671Error"
            }
          }
        }
      }
    },
    "/usersandroles/v1/permission": {
      "get": {
        "operationId": "tMF672retrievePermissions",
        "parameters": [
          {
            "description": "To obtain the list of permissions granted to a given user",
            "in": "query",
            "name": "user.id",
            "required": false,
            "type": "string"
          },
          {
            "description": "To obtain the list of permissions given by a given granter",
            "in": "query",
            "name": "granter.id",
            "required": false,
            "type": "string"
          },
          {
            "description": "To obtain the list of permissions associated to an specific asset",
            "in": "query",
            "name": "privileges.manageableAsset.id",
            "required": false,
            "type": "string"
          },
          {
            "description": "To obtain the list of permissions associated to an specific asset type",
            "in": "query",
            "name": "privileges.manageableAsset.entityTyped",
            "required": false,
            "type": "string"
          },
          {
            "description": "To obtain a subset of the resource data in the response",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of permissions provided",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF672PermissionType"
              },
              "type": "array"
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total results",
                "type": "integer"
              }
            }
          }
        },
        "summary": "Retrieve list of permissions",
        "tags": [
          "TMF672 UserRolesPermissions"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "tMF672createPermission",
        "parameters": [
          {
            "description": "The information required to create a permission resource",
            "in": "body",
            "name": "permissionCreate",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF672PermissionCreateType"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Permission registered in server",
            "headers": {
              "Location": {
                "description": "Location where to query the created permission resource",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/TMF672PermissionType"
            }
          }
        },
        "summary": "Create new permission",
        "tags": [
          "TMF672 UserRolesPermissions"
        ]
      }
    },
    "/usersandroles/v1/permission/{permissionId}": {
      "get": {
        "operationId": "tMF672retrievePermission",
        "parameters": [
          {
            "description": "The id of the permission to retrieve",
            "in": "path",
            "name": "permissionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "To obtain a subset of the resource data in the response",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Permission information provided",
            "schema": {
              "$ref": "#/definitions/TMF672PermissionType"
            }
          }
        },
        "summary": "Retrieve permission resource",
        "tags": [
          "TMF672 UserRolesPermissions"
        ]
      }
    },
    "/usersandroles/v1/role": {
      "get": {
        "operationId": "tMF672retrieveRoles",
        "parameters": [
          {
            "description": "To obtain the list of roles with an specific definition",
            "in": "query",
            "name": "involvementRole",
            "required": false,
            "type": "string"
          },
          {
            "description": "To obtain the list of roles involved with an specific function",
            "in": "query",
            "name": "function",
            "required": false,
            "type": "string"
          },
          {
            "description": "To obtain the list of roles defined with an specific action",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of roles provided",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF672UserRoleType"
              },
              "type": "array"
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total results",
                "type": "integer"
              }
            }
          }
        },
        "summary": "Retrieve list of user roles",
        "tags": [
          "TMF672 UserRolesPermissions"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "tMF672createUserRole",
        "parameters": [
          {
            "description": "The information required to create a user role resource",
            "in": "body",
            "name": "userroleCreate",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF672UserRoleCreateType"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "User Role registered in server",
            "headers": {
              "Location": {
                "description": "Location where to query the created user role resource",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/TMF672UserRoleType"
            }
          }
        },
        "summary": "Create new user role",
        "tags": [
          "TMF672 UserRolesPermissions"
        ]
      }
    },
    "/usersandroles/v1/role/{roleId}": {
      "get": {
        "operationId": "tMF672retrieveUserRole",
        "parameters": [
          {
            "description": "The id of the user role to retrieve",
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string"
          },
          {
            "description": "To obtain a subset of the resource data in the response",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User role information provided",
            "schema": {
              "$ref": "#/definitions/TMF672UserRoleType"
            }
          }
        },
        "summary": "Retrieve user role resource",
        "tags": [
          "TMF672 UserRolesPermissions"
        ]
      }
    },
    "/geographicAddressManagement/v1/geographicAddress": {
      "get": {
        "tags": [
          "TMF673 GeographicAddress"
        ],
        "operationId": "tMF673geographicAddressFind",
        "summary": "List geographic addresses",
        "description": "This operation is used to retrieve geographic addresses corresponding to search criteria.\nFiltering is allowed on all attributes. See example below.\nAttribute selection is possible for all attributes. Providing filtering criteria is mandatory to avoid too many answers retrieved.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF673GeographicAddress"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the re body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicAddressManagement/v1/geographicAddress/{geographicAddressId}": {
      "get": {
        "tags": [
          "TMF673 GeographicAddress"
        ],
        "operationId": "tMF673geographicAddressGet",
        "summary": "Retrieve a geographic address",
        "description": "Retrieves a geographic address using its unique ID. This ID should be retrieve either using the address completion process (cf. completion), or in another API of the ecosystem (party, appointment, etc.)\nAttribute selection is enabled for all first level attributes. Filtering on sub-resources may be available depending on the compliance level supported by an implementation\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "geographicAddressId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the geographic address"
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF673GeographicAddress"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicAddressManagement/v1/geographicAddressValidation": {
      "post": {
        "tags": [
          "TMF673 GeographicAddress"
        ],
        "operationId": "tMF673geographicAddressValidationCreate",
        "summary": "Create a geographic address validation request",
        "description": "This operation creates a geographic address validation request.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "addressValidationRequest",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF673GeographicAddressValidationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF673GeographicAddressValidation"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF673 GeographicAddress"
        ],
        "operationId": "tMF673geographicAddressValidationFind",
        "summary": "List geographic address validation requests",
        "description": "This operation retrieves geographic address validation entities.\nAttribute selection is enabled for all first level attributes. Filtering on sub-resources may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF673GeographicAddressValidation"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual of items returned in the response body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicAddressManagement/v1/geographicAddressValidation/{geographicAddressValidationId}": {
      "get": {
        "tags": [
          "TMF673 GeographicAddress"
        ],
        "operationId": "tMF673geographicAddressValidationGet",
        "summary": "Retrieve a geographic address validation request",
        "description": "This operation allows to retrieve an existing geographic address validation entity  using its Id.\nAttribute selection is enabled for all first level attributes.\nFiltering on sub-resources may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "geographicAddressValidationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the geographic address validation"
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF673GeographicAddressValidation"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TMF673 GeographicAddress"
        ],
        "operationId": "tMF673geographicAddressValidationPatch",
        "summary": "Update partially a geographic address validation request",
        "description": "This operation allows partial updates of an address validation entity.\nNote: this operation is available only to ADMIN API users.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "geographicAddressValidationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the geographic address validation"
          },
          {
            "name": "AddressValidation",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF673GeographicAddressValidation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF673GeographicAddressValidation"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF673 GeographicAddress"
        ],
        "operationId": "tMF673geographicAddressValidationDelete",
        "summary": "Delete a geographic address validation request",
        "description": "This operation allows to delete an existing address validation request.\nNote: this operation is available only to ADMIN API users\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "geographicAddressValidationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the geographic address validation"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicAddressManagement/v1/geographicAddress/{geographicAddressId}/geographicSubAddress": {
      "get": {
        "tags": [
          "TMF673 GeographicAddress"
        ],
        "operationId": "tMF673geographicSubAddressFind",
        "summary": "List subaddresses of a geographic address",
        "description": "This operation can be used to retrieve sub-addresses of a geographic address.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "geographicAddressId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the geographic address"
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF673GeographicSubAddress"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicAddressManagement/v1/geographicAddress/{geographicAddressId}/geographicSubAddress/{geographicSubAddressId}": {
      "get": {
        "tags": [
          "TMF673 GeographicAddress"
        ],
        "operationId": "tMF673geographicSubAddressGet",
        "summary": "Retrieve a sub-address of a geographic address",
        "description": "This operation can be used to retrieve a sub-address of a geographic address\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "geographicAddressId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the geographic address"
          },
          {
            "name": "geographicSubAddressId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the sub-address"
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF673GeographicSubAddress"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicAddressManagement/v1/area": {
      "get": {
        "tags": [
          "TMF673 GeographicAddress"
        ],
        "operationId": "tMF673areaFind",
        "summary": "List areas",
        "description": "This operation is the first step of an address completion process, allowing to retrieve geographic areas Step 1: I look for a geographic area (city, locality, district, etc.) using its name.\nFiltering is allowed on all attributes. \n Attribute selection is possible for all attributes.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "header",
            "description": "Attribute selection",
            "type": "string"
          },
          {
            "name": "fuzzy",
            "required": false,
            "in": "header",
            "description": "Can be used for approximate searches (sounds like, etc.)",
            "type": "string"
          },
          {
            "name": "name",
            "required": false,
            "in": "header",
            "description": "Name of the area",
            "type": "string"
          },
          {
            "name": "type",
            "required": false,
            "in": "header",
            "description": "Area type",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF673Area"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicAddressManagement/v1/street": {
      "get": {
        "tags": [
          "TMF673 GeographicAddress"
        ],
        "operationId": "tMF673streetFind",
        "summary": "List streets",
        "description": "This operation is the second step of an address completion process, allowing to retrieve streets Step 2: I look for the streets inside this geographic area.\nFiltering is allowed on all attributes.\nAttribute selection is possible for all attributes.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "area.id",
            "required": false,
            "in": "header",
            "description": "Unique identifier of the area",
            "type": "string"
          },
          {
            "name": "fuzzy",
            "required": false,
            "in": "header",
            "description": "Can be used for approximate searches (sounds like, etc.)",
            "type": "string"
          },
          {
            "name": "fields",
            "required": false,
            "in": "header",
            "description": "Attribute selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF673Street"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicAddressManagement/v1/streetSegment": {
      "get": {
        "tags": [
          "TMF673 GeographicAddress"
        ],
        "operationId": "tMF673streetSegmentFind",
        "summary": "List street segments",
        "description": "This operation is the last step of an address completion process, allowing to retrieve numbers in a street Step 3: I get all the street segments (numbers) existing in the street.\nFiltering is allowed on all attributes. \nAttribute selection is possible for all attributes.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "streetId",
            "required": true,
            "in": "query",
            "description": "Unique identifier of the street",
            "type": "string"
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF673StreetSegment"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Tota number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicAddressManagement/v1/hub": {
      "post": {
        "tags": [
          "TMF673 GeographicAddress"
        ],
        "operationId": "tMF673hubCreate",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF673Hub"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF673Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicAddressManagement/v1/hub/{hubId}": {
      "delete": {
        "tags": [
          "TMF673 GeographicAddress"
        ],
        "operationId": "tMF673hubDelete",
        "summary": "Unregister a listener",
        "description": "Clears the communication endpoint address that was set by creating the Hub.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the hub"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF673ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicSiteManagement/v1/geographicSite": {
      "post": {
        "tags": [
          "TMF674 GeographicSite"
        ],
        "operationId": "tMF674geographicSiteCreate",
        "summary": "Create a geographic site",
        "description": "This operation creates a geographic site entity.\nMandatory and non mandatory attributes, additional rules and default values are detailed in the specifications document.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "GeographicSite",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF674GeographicSite"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF674GeographicSite"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF674 GeographicSite"
        ],
        "operationId": "tMF674geographicSiteFind",
        "summary": "List geographic sites",
        "description": "This operation lists geographic site entities.\nAttribute selection is enabled for all first level attributes.\nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resouces to be provided in response requested by client",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resouces to be provided in response requested by client",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF674GeographicSite"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicSiteManagement/v1/geographicSite/{geographicSiteId}": {
      "get": {
        "tags": [
          "TMF674 GeographicSite"
        ],
        "operationId": "tMF674geographicSiteGet",
        "summary": "Retrieve a geographic site",
        "description": "This operation retrieves a geographic site entity.\nAttribute selection is enabled for all first level attributes.\nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "geographicSiteId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF674GeographicSite"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          }
        }
      },
      "put": {
        "tags": [
          "TMF674 GeographicSite"
        ],
        "operationId": "tMF674geographicSiteUpdate",
        "summary": "Update completely a geographic site",
        "description": "This operation updates completely the contents of a geographicSite resource by replacing the contents of that entity with the contents of the resource structure provided in the request.\nNotice that the PUT method is intended to modify completely the resource impacted, meaning that optional values that are not included in the request may be erased in the server after updating, and will not keep the previous value stored. Behavior of the server on optional values not included is undefined.\nNote : This operation is optional to be supported in this API.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "geographicSiteId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "GeographicSite",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF674GeographicSite"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF674GeographicSite"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TMF674 GeographicSite"
        ],
        "operationId": "tMF674geographicSitePatch",
        "summary": "Update partially a geographic site",
        "description": "This operation allows partial updates of a geographicSite resource entity. The definition of the modification is recommended to follow the json/patch (http://tools.ietf.org/html/rfc5789) and the extension proposed in Design Guidelines to manage modification of array entities.\nPatchable and non patchable attributes are detailed in the specifications document.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "geographicSiteId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "GeographicSite",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF674GeographicSite"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF674GeographicSite"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF674 GeographicSite"
        ],
        "operationId": "tMF674geographicSiteDelete",
        "summary": "Delete a geographic site",
        "description": "This operation deletes and removes from the server geographicSite resource previously registered.\nNote: this operation is available only to ADMIN API users\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "geographicSiteId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicSiteManagement/v1/hub": {
      "post": {
        "tags": [
          "TMF674 GeographicSite"
        ],
        "operationId": "tMF674hubCreate",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information",
            "schema": {
              "$ref": "#/definitions/TMF674HubInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF674Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicSiteManagement/v1/hub/{hubId}": {
      "delete": {
        "tags": [
          "TMF674 GeographicSite"
        ],
        "operationId": "tMF674hubDelete",
        "summary": "Unregister a listener",
        "description": "Clears the communication endpoint address that was set by creating the Hub\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF674ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicLocation/v1/geographicLocation": {
      "get": {
        "tags": [
          "TMF675 GeographicLocation"
        ],
        "operationId": "tMF675geographicLocationFind",
        "summary": "List geographic locations",
        "description": "This operation list geographic location entities.\nAttribute selection is enabled for all first level attributes. \nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index to start of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF675GeographicLocation"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicLocation/v1/geographicLocation/{geographicLocationId}": {
      "get": {
        "tags": [
          "TMF675 GeographicLocation"
        ],
        "operationId": "tMF675geographicLocationGet",
        "summary": "Retrieve a geographic location",
        "description": "This operation retrieves a geographic location entity.\nAttribute selection is enabled for all first level attributes.\nFiltering on sub-resources may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "geographicLocationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the geographic location"
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF675GeographicLocation"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicLocation/v1/retrieveGeographicLocation": {
      "post": {
        "tags": [
          "TMF675 GeographicLocation"
        ],
        "operationId": "tMF675retrieveGeographicLocationCreate",
        "summary": "Create a retrieve geographic location entity",
        "description": "This operation creates a retrieve geographic location entity.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "RetrieveGeographicLocation",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF675POST_REQ_RetrieveGeographicLocation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF675RetrieveGeographicLocation"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF675 GeographicLocation"
        ],
        "operationId": "tMF675retrieveGeographicLocationFind",
        "summary": "List retrieve geographic location entities",
        "description": "This operation list retrieveGeographicLocation entities.\nAttribute selection is enabled for all first level attributes.\nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index to start of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF675RetrieveGeographicLocation"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicLocation/v1/retrieveGeographicLocation/{retrieveGeographicLocationId}": {
      "get": {
        "tags": [
          "TMF675 GeographicLocation"
        ],
        "operationId": "tMF675retrieveGeographicLocationGet",
        "summary": "Retrieve a retrieve geographic location entity",
        "description": "This operation retrieves a retrieve geographic location entity.\nAttribute selection is enabled for all first level attributes.\nFiltering on sub-resources may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "retrieveGeographicLocationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the retrieve geographic location task"
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF675RetrieveGeographicLocation"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicLocation/v1/retrieveLocationRelation": {
      "post": {
        "tags": [
          "TMF675 GeographicLocation"
        ],
        "operationId": "tMF675retrieveLocationRelationCreate",
        "summary": "Create a retrieve location relation entity",
        "description": "This operation creates a retrieve location relation entity\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "RetrieveLocationRelation",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF675POST_REQ_RetrieveLocationRelation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF675RetrieveLocationRelation"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF675 GeographicLocation"
        ],
        "operationId": "tMF675retrieveLocationRelationFind",
        "summary": "List retrieve location relation entities",
        "description": "This operation list retrieve location relation entities.\nAttribute selection is enabled for all first level attributes.\nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index to start of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF675RetrieveLocationRelation"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicLocation/v1/retrieveLocationRelation/{retrieveLocationRelationId}": {
      "get": {
        "tags": [
          "TMF675 GeographicLocation"
        ],
        "operationId": "tMF675retrieveLocationRelationGet",
        "summary": "Retrieve a retrieve location relation entity",
        "description": "This operation retrieves a retrieve location relation entity.\nAttribute selection is enabled for all first level attributes.\nFiltering on sub-resources may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "retrieveLocationRelationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the retrieve location relation task"
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF675RetrieveLocationRelation"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicLocation/v1/hub": {
      "post": {
        "tags": [
          "TMF675 GeographicLocation"
        ],
        "operationId": "tMF675hubCreate",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF675HubInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF675Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          }
        }
      }
    },
    "/geographicLocation/v1/hub/{hubId}": {
      "delete": {
        "tags": [
          "TMF675 GeographicLocation"
        ],
        "operationId": "tMF675hubDelete",
        "summary": "Unregister a listener",
        "description": "Clears the communication endpoint address that was set by creating the Hub\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the Hub"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF675ErrorRepresentation"
            }
          }
        }
      }
    },
    "/usageConsumption/v1/usageConsumptionReport": {
      "get": {
        "tags": [
          "TMF677 UsageConsumption"
        ],
        "operationId": "tMF677usageConsumptionReportFind",
        "summary": "Query the calculation of an usage consumption report in synchronous mode",
        "description": "This operation is used to request the calculation of a new usage consumption report for a specific product identified by a msisdn number for example. \nAttribute selection is enabled for all first level attributes.\nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF677UsageConsumptionReport"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          }
        }
      }
    },
    "/usageConsumption/v1/usageConsumptionReport/{id}": {
      "get": {
        "tags": [
          "TMF677 UsageConsumption"
        ],
        "operationId": "tMF677usageConsumptionReportGet",
        "summary": "Retrieve an existing usage consumption report",
        "description": "This operation retrieves an usage report entity. This operation could be used only if the server has saved the usage consumption report on its database after calculation.\nAttribute selection is enabled for all first level attributes.\nFiltering on sub-resources may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the usage consumption report"
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF677UsageConsumptionReport"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF677 UsageConsumption"
        ],
        "operationId": "tMF677usageConsumptionReportDelete",
        "summary": "Delete an existing usage consumption report",
        "description": "This operation deletes a usage report entity.\nNote: this operation is not available only to ADMIN API users\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the usage consumption report"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          }
        }
      }
    },
    "/usageConsumption/v1/usageConsumptionReportRequest": {
      "post": {
        "tags": [
          "TMF677 UsageConsumption"
        ],
        "operationId": "tMF677usageConsumptionReportRequestCreate",
        "summary": "Create an usage consumption report request",
        "description": "This operation creates an usage consumption report request entity. This operation is used by the requester when the server couldn’t calculate and generate the report in synchronous mode. \nAfter, the API requester could follow the process with a GET operation on this same resource retrieving the status of the request. The server could also use the notification pattern to inform the API requester that the usage consumption report is available.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "UsageConsumptionReportRequest",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF677UsageConsumptionReportRequestIn"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF677UsageConsumptionReportRequest"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF677 UsageConsumption"
        ],
        "operationId": "tMF677usageConsumptionReportRequestFind",
        "summary": "List usage consumption report requests",
        "description": "This operation is used to retrieve usage consumption report requests corresponding to search criteria like a specific product identified by a msisdn number for example. \nAttribute selection is enabled for all attributes.\nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources  to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF677UsageConsumptionReportRequest"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          }
        }
      }
    },
    "/usageConsumption/v1/usageConsumptionReportRequest/{id}": {
      "get": {
        "tags": [
          "TMF677 UsageConsumption"
        ],
        "operationId": "tMF677usageConsumptionReportRequestGet",
        "summary": "Retrieve an usage consumption report request",
        "description": "This operation retrieves an usage consumption report request entity using its unique id.\nAttribute selection is enabled for all attributes.\nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF677UsageConsumptionReportRequest"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF677 UsageConsumption"
        ],
        "operationId": "tMF677usageConsumptionReportRequestDelete",
        "summary": "Delete an usage consumption report request",
        "description": "This operation deletes an usage consumption report request entity. \nNote: this operation is not available only to ADMIN API users\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          }
        }
      }
    },
    "/usageConsumption/v1/hub": {
      "post": {
        "tags": [
          "TMF677 UsageConsumption"
        ],
        "operationId": "tMF677hubCreate",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information",
            "schema": {
              "$ref": "#/definitions/TMF677HubInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF677Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          }
        }
      }
    },
    "/usageConsumption/v1/hub/{hubId}": {
      "delete": {
        "tags": [
          "TMF677 UsageConsumption"
        ],
        "operationId": "tMF677hubDelete",
        "summary": "Unregister listener",
        "description": "Clears the communication endpoint address that was set by creating the Hub\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF677ErrorRepresentation"
            }
          }
        }
      }
    },
    "/customerBillManagement/v2/customerBill": {
      "get": {
        "tags": [
          "TMF678 CustomerBill"
        ],
        "operationId": "tMF678customerBillFind",
        "summary": "List customer bills",
        "description": "This operation list customer bill entities.\nAttribute selection is enabled for all first level attributes.\nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          },
          {
            "name": "billingAccount.id",
            "required": false,
            "in": "query",
            "description": "Example of filter criteria that can be used to find customer bills",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF678CustomerBill"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          }
        }
      }
    },
    "/customerBillManagement/v2/customerBill/{id}": {
      "get": {
        "tags": [
          "TMF678 CustomerBill"
        ],
        "operationId": "tMF678customerBillGet",
        "summary": "Retrieve a customer bill",
        "description": "This operation retrieves a customer bill entity.\nAttribute selection is enabled for all first level attributes.\nFiltering on sub-resources may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF678CustomerBill"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TMF678 CustomerBill"
        ],
        "operationId": "tMF678customerBillPatch",
        "summary": "Partially update a customer bill",
        "description": "Note: this operation is available only to ADMIN API users. The PATCH Bill operation is optional. An implementation is not required to support PATCH to be compliant with the standard.\nThis operation allows partial updates of a customer bill entity.\nOnly state attribute is patchable.\nThis operation allows partial updates of a customer bill entity. Support of json/merge (https://tools.ietf.org/html/rfc7386) is mandatory, support of json/patch (http://tools.ietf.org/html/rfc5789) is optional.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "customerBill",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF678CustomerBillUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF678CustomerBill"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          }
        }
      }
    },
    "/customerBillManagement/v2/appliedCustomerBillingRate": {
      "get": {
        "tags": [
          "TMF678 CustomerBill"
        ],
        "operationId": "tMF678appliedCustomerBillingRateFind",
        "summary": "List applied customer billing rates",
        "description": "This operation list applied customer billing rate entities.\nAttribute selection is enabled for all first level attributes.\nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          },
          {
            "name": "bill.id",
            "required": false,
            "in": "query",
            "description": "Example of a filter criteria that can be used to find applied customer billing rates",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF678AppliedCustomerBillingRate"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          }
        }
      }
    },
    "/customerBillManagement/v2/appliedCustomerBillingRate/{id}": {
      "get": {
        "tags": [
          "TMF678 CustomerBill"
        ],
        "operationId": "tMF678appliedCustomerBillingRateGet",
        "summary": "Retrieve an applied customer billing rate",
        "description": "This operation retrieves an applied customer billing rate entity.\nAttribute selection is enabled for all first level attributes.\nFiltering on sub-resources may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF678AppliedCustomerBillingRate"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          }
        }
      }
    },
    "/customerBillManagement/v2/customerBillOnDemand": {
      "post": {
        "tags": [
          "TMF678 CustomerBill"
        ],
        "operationId": "tMF678customerBillOnDemandCreate",
        "summary": "Create a customer bill on demand",
        "description": "This operation creates a customer bill on demand entity.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "CustomerBillOnDemand",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF678CustomerBillOnDemandRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF678CustomerBillOnDemand"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF678 CustomerBill"
        ],
        "operationId": "tMF678customerBillOnDemandFind",
        "summary": "Retrieve customer bill on demand with filter criteria",
        "description": "This operation list customer bill on demand entities.\nAttribute selection is enabled for all first level attributes.\nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF678CustomerBillOnDemand"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          }
        }
      }
    },
    "/customerBillManagement/v2/customerBillOnDemand/{id}": {
      "get": {
        "tags": [
          "TMF678 CustomerBill"
        ],
        "operationId": "tMF678customerBillOnDemandGet",
        "summary": "Retrieve a customer bill on demand with its id",
        "description": "This operation retrieves a customer bill on demand entity.\nAttribute selection is enabled for all first level attributes.\nFiltering on sub-resources may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF678CustomerBillOnDemand"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          }
        }
      }
    },
    "/customerBillManagement/v2/hub": {
      "post": {
        "tags": [
          "TMF678 CustomerBill"
        ],
        "operationId": "tMF678hubCreate",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "Hub",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF678HubInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF678Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          }
        }
      }
    },
    "/customerBillManagement/v2/hub/{hubId}": {
      "delete": {
        "tags": [
          "TMF678 CustomerBill"
        ],
        "operationId": "tMF678hubDelete",
        "summary": "Unregister a listener",
        "description": "Clears the communication endpoint address that was set by creating the Hub\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF678ErrorRepresentation"
            }
          }
        }
      }
    },
    "/productOfferingQualificationManagement/v1/productOfferingQualification": {
      "post": {
        "tags": [
          "TMF679 ProductOfferingQualification"
        ],
        "operationId": "tMF679productOfferingQualificationCreate",
        "summary": "create productOfferingQualification",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "ProductOfferingQualification",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF679POST_REQ_ProductOfferingQualification"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF679ProductOfferingQualification"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF679 ProductOfferingQualification"
        ],
        "operationId": "tMF679productOfferingQualificationFind",
        "summary": "find productOfferingQualification",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF679ProductOfferingQualification"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          }
        }
      }
    },
    "/productOfferingQualificationManagement/v1/productOfferingQualification/{productOfferingQualificationId}": {
      "get": {
        "tags": [
          "TMF679 ProductOfferingQualification"
        ],
        "operationId": "tMF679productOfferingQualificationGet",
        "summary": "get productOfferingQualification",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "productOfferingQualificationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF679ProductOfferingQualification"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TMF679 ProductOfferingQualification"
        ],
        "operationId": "tMF679productOfferingQualificationPatch",
        "summary": "patch productOfferingQualification",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "productOfferingQualificationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "ProductOfferingQualification",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF679ProductOfferingQualification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF679ProductOfferingQualification"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF679 ProductOfferingQualification"
        ],
        "operationId": "tMF679productOfferingQualificationDelete",
        "summary": "delete productOfferingQualification",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "productOfferingQualificationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          }
        }
      }
    },
    "/productOfferingQualificationManagement/v1/hub": {
      "post": {
        "tags": [
          "TMF679 ProductOfferingQualification"
        ],
        "operationId": "tMF679hubCreate",
        "summary": "create hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hub",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF679Hub"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF679Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "TMF679 ProductOfferingQualification"
        ],
        "operationId": "tMF679hubFind",
        "summary": "find hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TMF679Hub"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          }
        }
      }
    },
    "/productOfferingQualificationManagement/v1/hub/{hubId}": {
      "get": {
        "tags": [
          "TMF679 ProductOfferingQualification"
        ],
        "operationId": "tMF679hubGet",
        "summary": "get hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF679Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TMF679 ProductOfferingQualification"
        ],
        "operationId": "tMF679hubPatch",
        "summary": "patch hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "hub",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/TMF679Hub"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TMF679Hub"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TMF679 ProductOfferingQualification"
        ],
        "operationId": "tMF679hubDelete",
        "summary": "delete hub",
        "description": "\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable\n- 6: Orange API is over capacity, retry later !",
            "schema": {
              "$ref": "#/definitions/TMF679ErrorRepresentation"
            }
          }
        }
      }
    },
    "/recommendationManagement/v2/recommendation": {
      "get": {
        "operationId": "tMF680listRecommendation",
        "summary": "List or find 'Recommendation' objects",
        "tags": [
          "TMF680 Recommendation"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF680Recommendation"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          }
        }
      }
    },
    "/recommendationManagement/v2/recommendation/{id}": {
      "get": {
        "operationId": "tMF680retrieveRecommendation",
        "summary": "Retrieves a 'Recommendation' by Id",
        "tags": [
          "TMF680 Recommendation"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Recommendation"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF680Recommendation"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          }
        }
      }
    },
    "/recommendationManagement/v2/hub": {
      "post": {
        "operationId": "tMF680registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF680 Recommendation"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF680EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF680EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          }
        }
      }
    },
    "/recommendationManagement/v2/hub/{id}": {
      "delete": {
        "operationId": "tMF680unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF680 Recommendation"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF680Error"
            }
          }
        }
      }
    },
    "/communicationManagement/v2/communicationMessage": {
      "get": {
        "operationId": "tMF681listCommunicationMessage",
        "summary": "List or find 'CommunicationMessage' objects",
        "tags": [
          "TMF681 Communication"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF681CommunicationMessage"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          }
        }
      },
      "post": {
        "operationId": "tMF681createCommunicationMessage",
        "summary": "Creates a 'CommunicationMessage'",
        "tags": [
          "TMF681 Communication"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF681CommunicationMessage_Create"
            },
            "required": true,
            "in": "body",
            "name": "communicationMessage",
            "description": "The Communication Message to be created"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TMF681CommunicationMessage"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          }
        }
      }
    },
    "/communicationManagement/v2/communicationMessage/send": {
      "post": {
        "operationId": "tMF681createsanewCommunicationMessageandsendit",
        "summary": "Creates a 'CommunicationMessage' and send it",
        "tags": [
          "TMF681 Communication"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/TMF681CommunicationMessage_Create"
            },
            "required": true,
            "in": "body",
            "name": "communicationMessage",
            "description": "The Communication Message to be created"
          }
        ],
        "responses": {
          "200": {
            "description": "Sent",
            "schema": {
              "$ref": "#/definitions/TMF681CommunicationMessage"
            }
          },
          "201": {
            "description": "Sent",
            "schema": {
              "$ref": "#/definitions/TMF681EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          }
        }
      }
    },
    "/communicationManagement/v2/communicationMessage/{id}": {
      "get": {
        "operationId": "tMF681retrieveCommunicationMessage",
        "summary": "Retrieves a 'CommunicationMessage' by Id",
        "tags": [
          "TMF681 Communication"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Communication Message"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF681CommunicationMessage"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "tMF681patchCommunicationMessage",
        "summary": "Updates partially a 'CommunicationMessage' by Id",
        "tags": [
          "TMF681 Communication"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Communication Message"
          },
          {
            "schema": {
              "$ref": "#/definitions/TMF681CommunicationMessage_Update"
            },
            "required": true,
            "in": "body",
            "name": "communicationMessage",
            "description": "The Communication Message to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TMF681CommunicationMessage"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "tMF681deleteCommunicationMessage",
        "summary": "Deletes a 'CommunicationMessage' by Id",
        "tags": [
          "TMF681 Communication"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Communication Message"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          }
        }
      }
    },
    "/communicationManagement/v2/communicationMessage/{id}/send": {
      "post": {
        "operationId": "tMF681sendsaCommunicationMessage",
        "summary": "Sends 'CommunicationMessage' ",
        "tags": [
          "TMF681 Communication"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Communication Message"
          }
        ],
        "responses": {
          "200": {
            "description": "Sent",
            "schema": {
              "$ref": "#/definitions/TMF681CommunicationMessage"
            }
          },
          "201": {
            "description": "Sent",
            "schema": {
              "$ref": "#/definitions/TMF681EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          }
        }
      }
    },
    "/communicationManagement/v2/hub": {
      "post": {
        "operationId": "tMF681registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF681 Communication"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/TMF681EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/TMF681EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          }
        }
      }
    },
    "/communicationManagement/v2/hub/{id}": {
      "delete": {
        "operationId": "tMF681unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "TMF681 Communication"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TMF681Error"
            }
          }
        }
      }
    },
    "/partyInteractionManagement/v1/partyInteraction": {
      "post": {
        "operationId": "tMF683createPartyInteraction",
        "parameters": [
          {
            "description": "Data for the party interaction creation",
            "in": "body",
            "name": "partyInteractionRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF683PartyInteractionRequestType"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Party interaction created successfully",
            "schema": {
              "$ref": "#/definitions/TMF683PartyInteractionType"
            },
            "headers": {
              "Location": {
                "description": "Location where to query the created party interaction",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Create a new party interaction",
        "tags": [
          "TMF683 PartyInteraction"
        ]
      },
      "get": {
        "operationId": "tMF683retrievePartyInteractions",
        "parameters": [
          {
            "description": "To retrieve interactions related with a specific account",
            "in": "query",
            "name": "accountId",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve interactions related with a specific customer",
            "in": "query",
            "name": "customerId",
            "required": false,
            "type": "string"
          },
          {
            "description": "To obtain interactions that happened after this value",
            "format": "date-time",
            "in": "query",
            "name": "startDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "To obtain interactions that happened before this value",
            "format": "date-time",
            "in": "query",
            "name": "endDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "To obtain interactions in a specific channel",
            "in": "query",
            "name": "channel.id",
            "required": false,
            "type": "string"
          },
          {
            "description": "To obtain interactions in a specific channel",
            "in": "query",
            "name": "channel.name",
            "required": false,
            "type": "string"
          },
          {
            "description": "To obtain interactions with a specific status",
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "description": "To obtain interactions with a specific subStatus",
            "in": "query",
            "name": "subStatus",
            "required": false,
            "type": "string"
          },
          {
            "description": "To obtain interactions of a specific type",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "To limit the amount of results",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string"
          },
          {
            "description": "To get the results starting from an offset value. Use for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Party interactions retrieved successfully",
            "schema": {
              "items": {
                "$ref": "#/definitions/TMF683PartyInteractionType"
              },
              "type": "array"
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total results",
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve a list of party interactions",
        "tags": [
          "TMF683 PartyInteraction"
        ]
      }
    },
    "/partyInteractionManagement/v1/partyInteraction/{partyInteractionId}": {
      "get": {
        "operationId": "tMF683retrievePartyInteraction",
        "parameters": [
          {
            "description": "The id of the party interaction to be fetched",
            "in": "path",
            "name": "partyInteractionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Party interaction retrieved successfully",
            "schema": {
              "$ref": "#/definitions/TMF683PartyInteractionType"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve a party interaction",
        "tags": [
          "TMF683 PartyInteraction"
        ]
      }
    },
    "/partyInteractionManagement/v1/partyInteraction/{partyInteractionId}/status": {
      "put": {
        "operationId": "tMF683modifyPartyInteractionStatus",
        "parameters": [
          {
            "description": "The id of the party interaction to be fetched",
            "in": "path",
            "name": "partyInteractionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "New value for the status field",
            "in": "body",
            "name": "partyInteractionStatusRequest",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Party interaction status modified successfully",
            "schema": {
              "$ref": "#/definitions/TMF683PartyInteractionType"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Modify party interaction status",
        "tags": [
          "TMF683 PartyInteraction"
        ]
      }
    },
    "/shipmentTracking/v1/shipmentTracking": {
      "get": {
        "operationId": "tMF684retrieveTrackings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Id of the order whose shipment has to be fetched",
            "in": "query",
            "name": "order.id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Tracking details retrieved successfully",
            "schema": {
              "$ref": "#/definitions/TMF684TrackingDetailsType"
            }
          }
        },
        "summary": "Retrieve tracking details of a shipment",
        "tags": [
          "TMF684 ShipmentTracking"
        ]
      },
      "post": {
        "operationId": "tMF684createTracking",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Necessary information to create a shipment tracking entity",
            "in": "body",
            "name": "shipmentTrackingRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF684TrackingRequestType"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tracking created successfully",
            "schema": {
              "$ref": "#/definitions/TMF684TrackingDetailsType"
            }
          }
        },
        "summary": "Create tracking details of a shipment",
        "tags": [
          "TMF684 ShipmentTracking"
        ]
      }
    },
    "/shipmentTracking/v1/shipmentTracking/{trackingId}": {
      "get": {
        "operationId": "tMF684retrieveTracking",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Id of the shipment that needs to be fetched",
            "in": "path",
            "name": "trackingId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Tracking details retrieved successfully",
            "schema": {
              "$ref": "#/definitions/TMF684TrackingDetailsType"
            }
          }
        },
        "summary": "Retrieve tracking details of a shipment",
        "tags": [
          "TMF684 ShipmentTracking"
        ]
      },
      "patch": {
        "operationId": "tMF684modifyTracking",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Id of the shipment that needs to be modified",
            "in": "path",
            "name": "trackingId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Modifications to be done",
            "in": "body",
            "name": "trackingModificationRequest",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tracking modified successfully",
            "schema": {
              "$ref": "#/definitions/TMF684TrackingDetailsType"
            }
          }
        },
        "summary": "Modify tracking details of a shipment",
        "tags": [
          "TMF684 ShipmentTracking"
        ]
      },
      "delete": {
        "operationId": "tMF684deleteTracking",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Id of the shipment that must be deleted",
            "in": "path",
            "name": "trackingId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Tracking details deleted successfully"
          }
        },
        "summary": "Delete tracking details of a shipment",
        "tags": [
          "TMF684 ShipmentTracking"
        ]
      }
    },
    "/shipmentTracking/v1/shipmentTracking/{trackingId}/checkpoint": {
      "post": {
        "operationId": "tMF684createTrackingCheckpoint",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Id of the tracking the checkpoint where be added onto",
            "in": "path",
            "name": "trackingId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Necessary data to add a new checkpoint",
            "in": "body",
            "name": "checkpointRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TMF684CheckpointType"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Checkpoint added successfully",
            "schema": {
              "$ref": "#/definitions/TMF684TrackingDetailsType"
            }
          }
        },
        "summary": "Add checkpoint to a shipment tracking",
        "tags": [
          "TMF684 ShipmentTracking"
        ]
      }
    },
    "/openid/v1/userinfo": {
      "get": {
        "operationId": "tMF691retrieveUserIdentity",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "token to be passed as a header linked to the user whose identity is requested",
            "required": true,
            "type": "string"
          },
          {
            "description": "To apply specific filter in the response ",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User identity information provided",
            "schema": {
              "$ref": "#/definitions/TMF691UserInfoType"
            }
          },
          "400": {
            "description": "Invalid Token"
          },
          "401": {
            "description": "Invalid Token"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve user identity information",
        "tags": [
          "TMF691 FederatedIdentity"
        ]
      }
    }
  },
  "definitions": {
    "TMF620ProductOffering": {
      "type": "object",
      "description": "Represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the productOffering"
        },
        "href": {
          "type": "string",
          "description": "Reference of the ProductOffering"
        },
        "name": {
          "type": "string",
          "description": "Name of the productOffering"
        },
        "description": {
          "type": "string",
          "description": "Description of the productOffering"
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether a productOffering represents a single productOffering (false), or a bundle of productOfferings (true)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the productOffering is valid"
        },
        "version": {
          "type": "string",
          "description": "ProductOffering version"
        },
        "@type": {
          "type": "string",
          "description": "Class type of the product offering"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base (class) type of the product offering"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this product offering"
        },
        "isSellable": {
          "type": "boolean",
          "description": "A flag indicating if this product offer can be sold stand-alone for sale or not. If this flag is false it indicates that the offer can only be sold within a bundle."
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620PlaceRef"
          }
        },
        "serviceLevelAgreement": {
          "$ref": "#/definitions/TMF620SLARef"
        },
        "productSpecification": {
          "$ref": "#/definitions/TMF620ProductSpecificationRef"
        },
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ChannelRef"
          }
        },
        "serviceCandidate": {
          "$ref": "#/definitions/TMF620ServiceCandidateRef"
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620Attachment"
          }
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620CategoryRef"
          }
        },
        "resourceCandidate": {
          "$ref": "#/definitions/TMF620ResourceCandidateRef"
        },
        "productOfferingTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductOfferingTerm"
          }
        },
        "marketSegment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620MarketSegmentRef"
          }
        },
        "productOfferingPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductOfferingPrice"
          }
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620AgreementRef"
          }
        },
        "bundledProductOffering": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620BundledProductOffering"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProdSpecCharValueUse"
          }
        }
      }
    },
    "TMF620ProductOffering_Create": {
      "type": "object",
      "description": "Represents entities that are orderable from the provider of the catalog, this resource includes pricing information.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the productOffering"
        },
        "description": {
          "type": "string",
          "description": "Description of the productOffering"
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether a productOffering represents a single productOffering (false), or a bundle of productOfferings (true)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the productOffering is valid"
        },
        "version": {
          "type": "string",
          "description": "ProductOffering version"
        },
        "@type": {
          "type": "string",
          "description": "Class type of the product offering"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base (class) type of the product offering"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this product offering"
        },
        "isSellable": {
          "type": "boolean",
          "description": "A flag indicating if this product offer can be sold stand-alone for sale or not. If this flag is false it indicates that the offer can only be sold within a bundle."
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620PlaceRef"
          }
        },
        "serviceLevelAgreement": {
          "$ref": "#/definitions/TMF620SLARef"
        },
        "productSpecification": {
          "$ref": "#/definitions/TMF620ProductSpecificationRef"
        },
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ChannelRef"
          }
        },
        "serviceCandidate": {
          "$ref": "#/definitions/TMF620ServiceCandidateRef"
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620Attachment"
          }
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620CategoryRef"
          }
        },
        "resourceCandidate": {
          "$ref": "#/definitions/TMF620ResourceCandidateRef"
        },
        "productOfferingTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductOfferingTerm"
          }
        },
        "marketSegment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620MarketSegmentRef"
          }
        },
        "productOfferingPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductOfferingPrice"
          }
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620AgreementRef"
          }
        },
        "bundledProductOffering": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620BundledProductOffering"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProdSpecCharValueUse"
          }
        }
      }
    },
    "TMF620ProductOffering_Update": {
      "type": "object",
      "description": "Represents entities that are orderable from the provider of the catalog, this resource includes pricing information.\nSkipped properties: id,href,id,href,lastUpdate",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the productOffering"
        },
        "description": {
          "type": "string",
          "description": "Description of the productOffering"
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether a productOffering represents a single productOffering (false), or a bundle of productOfferings (true)."
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the productOffering is valid"
        },
        "version": {
          "type": "string",
          "description": "ProductOffering version"
        },
        "@type": {
          "type": "string",
          "description": "Class type of the product offering"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base (class) type of the product offering"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this product offering"
        },
        "isSellable": {
          "type": "boolean",
          "description": "A flag indicating if this product offer can be sold stand-alone for sale or not. If this flag is false it indicates that the offer can only be sold within a bundle."
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620PlaceRef"
          }
        },
        "serviceLevelAgreement": {
          "$ref": "#/definitions/TMF620SLARef"
        },
        "productSpecification": {
          "$ref": "#/definitions/TMF620ProductSpecificationRef"
        },
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ChannelRef"
          }
        },
        "serviceCandidate": {
          "$ref": "#/definitions/TMF620ServiceCandidateRef"
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620Attachment"
          }
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620CategoryRef"
          }
        },
        "resourceCandidate": {
          "$ref": "#/definitions/TMF620ResourceCandidateRef"
        },
        "productOfferingTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductOfferingTerm"
          }
        },
        "marketSegment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620MarketSegmentRef"
          }
        },
        "productOfferingPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductOfferingPrice"
          }
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620AgreementRef"
          }
        },
        "bundledProductOffering": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620BundledProductOffering"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProdSpecCharValueUse"
          }
        }
      }
    },
    "TMF620ImportJob": {
      "type": "object",
      "description": "Represents a task used to import resources from a file",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the import job"
        },
        "href": {
          "type": "string",
          "description": "Reference of the import job"
        },
        "contentType": {
          "type": "string",
          "description": "Indicates the format of the imported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource where the content of the file specified by the import job must be applied"
        },
        "status": {
          "type": "string",
          "description": "Status of the import job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be imported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure if status is failed"
        }
      }
    },
    "TMF620ImportJob_Create": {
      "type": "object",
      "description": "Represents a task used to import resources from a file\nSkipped properties: id,href",
      "required": [
        "url"
      ],
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Indicates the format of the imported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource where the content of the file specified by the import job must be applied"
        },
        "status": {
          "type": "string",
          "description": "Status of the import job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be imported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure if status is failed"
        }
      }
    },
    "TMF620ProductSpecification": {
      "type": "object",
      "description": "Is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the product specification"
        },
        "href": {
          "type": "string",
          "description": "Reference of the product specification"
        },
        "name": {
          "type": "string",
          "description": "Name of the product specification"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the product specification is"
        },
        "brand": {
          "type": "string",
          "description": "The manufacturer or trademark of the specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether a productSpecification represents a single productSpecification (false), or a bundle of productSpecification (true)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "productNumber": {
          "type": "string",
          "description": "An identification number assigned to uniquely identity the specification"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the product specification is valid"
        },
        "version": {
          "type": "string",
          "description": "Product specification version"
        },
        "@type": {
          "type": "string",
          "description": "class type of the product specification"
        },
        "@baseType": {
          "type": "string",
          "description": "base class type  (immediate parent) of the product specification"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "hyperlink reference to schema describing this object"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620RelatedPartyRef"
          }
        },
        "productSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductSpecCharacteristic"
          }
        },
        "serviceSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ServiceSpecificationRef"
          }
        },
        "targetProductSchema": {
          "$ref": "#/definitions/TMF620TargetProductSchemaRef"
        },
        "productSpecificationRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductSpecificationRelationship"
          }
        },
        "resourceSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ResourceSpecificationRef"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620Attachment"
          }
        },
        "bundledProductSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620BundledProductSpecification"
          }
        }
      }
    },
    "TMF620ProductSpecification_Create": {
      "type": "object",
      "description": "Is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the product specification"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the product specification is"
        },
        "brand": {
          "type": "string",
          "description": "The manufacturer or trademark of the specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether a productSpecification represents a single productSpecification (false), or a bundle of productSpecification (true)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "productNumber": {
          "type": "string",
          "description": "An identification number assigned to uniquely identity the specification"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the product specification is valid"
        },
        "version": {
          "type": "string",
          "description": "Product specification version"
        },
        "@type": {
          "type": "string",
          "description": "class type of the product specification"
        },
        "@baseType": {
          "type": "string",
          "description": "base class type  (immediate parent) of the product specification"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "hyperlink reference to schema describing this object"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620RelatedPartyRef"
          }
        },
        "productSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductSpecCharacteristic"
          }
        },
        "serviceSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ServiceSpecificationRef"
          }
        },
        "targetProductSchema": {
          "$ref": "#/definitions/TMF620TargetProductSchemaRef"
        },
        "productSpecificationRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductSpecificationRelationship"
          }
        },
        "resourceSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ResourceSpecificationRef"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620Attachment"
          }
        },
        "bundledProductSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620BundledProductSpecification"
          }
        }
      }
    },
    "TMF620ProductSpecification_Update": {
      "type": "object",
      "description": "Is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.\nSkipped properties: id,href,id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the product specification"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the product specification is"
        },
        "brand": {
          "type": "string",
          "description": "The manufacturer or trademark of the specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether a productSpecification represents a single productSpecification (false), or a bundle of productSpecification (true)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "productNumber": {
          "type": "string",
          "description": "An identification number assigned to uniquely identity the specification"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the product specification is valid"
        },
        "version": {
          "type": "string",
          "description": "Product specification version"
        },
        "@type": {
          "type": "string",
          "description": "class type of the product specification"
        },
        "@baseType": {
          "type": "string",
          "description": "base class type  (immediate parent) of the product specification"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "hyperlink reference to schema describing this object"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620RelatedPartyRef"
          }
        },
        "productSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductSpecCharacteristic"
          }
        },
        "serviceSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ServiceSpecificationRef"
          }
        },
        "targetProductSchema": {
          "$ref": "#/definitions/TMF620TargetProductSchemaRef"
        },
        "productSpecificationRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductSpecificationRelationship"
          }
        },
        "resourceSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ResourceSpecificationRef"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620Attachment"
          }
        },
        "bundledProductSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620BundledProductSpecification"
          }
        }
      }
    },
    "TMF620Catalog": {
      "type": "object",
      "description": "The root entity for entity catalog management. An entity catalog can be defined as a collection of entity catalog items and arranging them in a particular manner based on the need.\nIn comparison to Product, Service and Resource catalogs, the entity catalog is intended for the purpose of providing any SID entity to consumers via a catalog, with its specification and policy providing governance over its content. Even Entity catalog may have an overlap with Product, Service or Resource catalog, it doesn't replace them. It is primarily intended to address those SID entities which may not be addressed by any of Product, Service or Resource catalog.\nAn entity catalog comprises of a list of RootEntities made available through EntityCatalogItems. This API addresses only RootEntity extended items as EntitySpecification. An entity catalog typically includes name, description and time period that it is valid for.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the Catalog"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the catalog"
        },
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of catalog. For entity catalogs, this will be 'EntityCatalog'."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Indicates<b> </b>the base (class) type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Catalog version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the catalog is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        }
      }
    },
    "TMF620Catalog_Create": {
      "type": "object",
      "description": "The root entity for entity catalog management. An entity catalog can be defined as a collection of entity catalog items and arranging them in a particular manner based on the need.\nIn comparison to Product, Service and Resource catalogs, the entity catalog is intended for the purpose of providing any SID entity to consumers via a catalog, with its specification and policy providing governance over its content. Even Entity catalog may have an overlap with Product, Service or Resource catalog, it doesn't replace them. It is primarily intended to address those SID entities which may not be addressed by any of Product, Service or Resource catalog.\nAn entity catalog comprises of a list of RootEntities made available through EntityCatalogItems. This API addresses only RootEntity extended items as EntitySpecification. An entity catalog typically includes name, description and time period that it is valid for.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of catalog. For entity catalogs, this will be 'EntityCatalog'."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Indicates<b> </b>the base (class) type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Catalog version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the catalog is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        }
      }
    },
    "TMF620Catalog_Update": {
      "type": "object",
      "description": "The root entity for entity catalog management. An entity catalog can be defined as a collection of entity catalog items and arranging them in a particular manner based on the need.\nIn comparison to Product, Service and Resource catalogs, the entity catalog is intended for the purpose of providing any SID entity to consumers via a catalog, with its specification and policy providing governance over its content. Even Entity catalog may have an overlap with Product, Service or Resource catalog, it doesn't replace them. It is primarily intended to address those SID entities which may not be addressed by any of Product, Service or Resource catalog.\nAn entity catalog comprises of a list of RootEntities made available through EntityCatalogItems. This API addresses only RootEntity extended items as EntitySpecification. An entity catalog typically includes name, description and time period that it is valid for.\nSkipped properties: id,href,id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of catalog. For entity catalogs, this will be 'EntityCatalog'."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Indicates<b> </b>the base (class) type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Catalog version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the catalog is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        }
      }
    },
    "TMF620ExportJob": {
      "type": "object",
      "description": "Represents a task used to export resources to a file",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the export job"
        },
        "href": {
          "type": "string",
          "description": "Reference of the export job"
        },
        "query": {
          "type": "string",
          "description": "Used to scope the exported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
        },
        "contentType": {
          "type": "string",
          "description": "The format of the exported data"
        },
        "status": {
          "type": "string",
          "description": "Status of the export job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be exported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Data at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure"
        }
      }
    },
    "TMF620ExportJob_Create": {
      "type": "object",
      "description": "Represents a task used to export resources to a file\nSkipped properties: id,href",
      "required": [
        "url"
      ],
      "properties": {
        "query": {
          "type": "string",
          "description": "Used to scope the exported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
        },
        "contentType": {
          "type": "string",
          "description": "The format of the exported data"
        },
        "status": {
          "type": "string",
          "description": "Status of the export job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be exported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Data at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure"
        }
      }
    },
    "TMF620Category": {
      "type": "object",
      "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the category"
        },
        "href": {
          "type": "string",
          "description": "Reference of the catalog"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the category is valid"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        },
        "@type": {
          "type": "string",
          "description": "the class type of the Category"
        },
        "@baseType": {
          "type": "string",
          "description": "the base class type of the category"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "link to the schema describing this category"
        },
        "subCategory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620CategoryRef"
          }
        },
        "productOffering": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductOfferingRef"
          }
        }
      }
    },
    "TMF620Category_Create": {
      "type": "object",
      "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the category is valid"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        },
        "@type": {
          "type": "string",
          "description": "the class type of the Category"
        },
        "@baseType": {
          "type": "string",
          "description": "the base class type of the category"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "link to the schema describing this category"
        },
        "subCategory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620CategoryRef"
          }
        },
        "productOffering": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductOfferingRef"
          }
        }
      }
    },
    "TMF620Category_Update": {
      "type": "object",
      "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.\nSkipped properties: id,href,id,href",
      "properties": {
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the category is valid"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        },
        "@type": {
          "type": "string",
          "description": "the class type of the Category"
        },
        "@baseType": {
          "type": "string",
          "description": "the base class type of the category"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "link to the schema describing this category"
        },
        "subCategory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620CategoryRef"
          }
        },
        "productOffering": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductOfferingRef"
          }
        }
      }
    },
    "TMF620ProductOfferingPrice": {
      "type": "object",
      "description": "An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased. The price is valid for a defined period of time and may not represent the actual price paid by a customer.",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique id of this resource"
        },
        "href": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Name of the productOfferingPrice"
        },
        "description": {
          "type": "string",
          "description": "Description of the productOfferingPrice"
        },
        "version": {
          "type": "string",
          "description": "ProductOffering version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the productOfferingPrice is valid"
        },
        "priceType": {
          "type": "string",
          "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
        },
        "unitOfMeasure": {
          "$ref": "#/definitions/TMF620Money",
          "description": "A number and unit representing how many (for instance 1 dozen) of an ProductOffering is available at the offered price. Its meaning depends on the priceType. It could be a price, a rate, or a discount."
        },
        "recurringChargePeriodType": {
          "type": "string",
          "description": "The period to repeat the application of the price\nCould be month, week..."
        },
        "recurringChargePeriodLength": {
          "type": "integer",
          "description": "the period of the recurring charge:  1, 2, ... .It sets to zero if it is not applicable"
        },
        "@type": {
          "type": "string",
          "description": "The class type of this Product offering"
        },
        "@baseType": {
          "type": "string",
          "description": "the immediate base class type of this product offering"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "hyperlink reference to the schema describing this resource"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "the last update time of this POP"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicating if this POP is composite (bundle) or not"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "the lifecycle status of this POP"
        },
        "price": {
          "$ref": "#/definitions/TMF620Money",
          "description": "The amount of money that characterizes the price."
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "description": "Percentage to apply for ProdOfferPriceAlteration (Discount)"
        },
        "bundledPopRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620BundledPopRelationship"
          }
        },
        "popRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620PopRelationship"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProdSpecCharValueUse"
          }
        },
        "productOfferingTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductOfferingTerm"
          }
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620PlaceRef"
          }
        },
        "constraint": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ConstraintRef"
          }
        },
        "pricingLogicAlgorithm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620PricingLogicAlgorithm"
          }
        },
        "tax": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620Tax"
          }
        }
      }
    },
    "TMF620ProductOfferingPrice_Create": {
      "type": "object",
      "description": "An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased. The price is valid for a defined period of time and may not represent the actual price paid by a customer.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the productOfferingPrice"
        },
        "description": {
          "type": "string",
          "description": "Description of the productOfferingPrice"
        },
        "version": {
          "type": "string",
          "description": "ProductOffering version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the productOfferingPrice is valid"
        },
        "priceType": {
          "type": "string",
          "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
        },
        "unitOfMeasure": {
          "$ref": "#/definitions/TMF620Money",
          "description": "A number and unit representing how many (for instance 1 dozen) of an ProductOffering is available at the offered price. Its meaning depends on the priceType. It could be a price, a rate, or a discount."
        },
        "recurringChargePeriodType": {
          "type": "string",
          "description": "The period to repeat the application of the price\nCould be month, week..."
        },
        "recurringChargePeriodLength": {
          "type": "integer",
          "description": "the period of the recurring charge:  1, 2, ... .It sets to zero if it is not applicable"
        },
        "@type": {
          "type": "string",
          "description": "The class type of this Product offering"
        },
        "@baseType": {
          "type": "string",
          "description": "the immediate base class type of this product offering"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "hyperlink reference to the schema describing this resource"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "the last update time of this POP"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicating if this POP is composite (bundle) or not"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "the lifecycle status of this POP"
        },
        "price": {
          "$ref": "#/definitions/TMF620Money",
          "description": "The amount of money that characterizes the price."
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "description": "Percentage to apply for ProdOfferPriceAlteration (Discount)"
        },
        "bundledPopRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620BundledPopRelationship"
          }
        },
        "popRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620PopRelationship"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProdSpecCharValueUse"
          }
        },
        "productOfferingTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductOfferingTerm"
          }
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620PlaceRef"
          }
        },
        "constraint": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ConstraintRef"
          }
        },
        "pricingLogicAlgorithm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620PricingLogicAlgorithm"
          }
        },
        "tax": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620Tax"
          }
        }
      }
    },
    "TMF620ProductOfferingPrice_Update": {
      "type": "object",
      "description": "An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased. The price is valid for a defined period of time and may not represent the actual price paid by a customer.\nSkipped properties: id,href,id,href,lastUpdate",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the productOfferingPrice"
        },
        "description": {
          "type": "string",
          "description": "Description of the productOfferingPrice"
        },
        "version": {
          "type": "string",
          "description": "ProductOffering version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the productOfferingPrice is valid"
        },
        "priceType": {
          "type": "string",
          "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
        },
        "unitOfMeasure": {
          "$ref": "#/definitions/TMF620Money",
          "description": "A number and unit representing how many (for instance 1 dozen) of an ProductOffering is available at the offered price. Its meaning depends on the priceType. It could be a price, a rate, or a discount."
        },
        "recurringChargePeriodType": {
          "type": "string",
          "description": "The period to repeat the application of the price\nCould be month, week..."
        },
        "recurringChargePeriodLength": {
          "type": "integer",
          "description": "the period of the recurring charge:  1, 2, ... .It sets to zero if it is not applicable"
        },
        "@type": {
          "type": "string",
          "description": "The class type of this Product offering"
        },
        "@baseType": {
          "type": "string",
          "description": "the immediate base class type of this product offering"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "hyperlink reference to the schema describing this resource"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicating if this POP is composite (bundle) or not"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "the lifecycle status of this POP"
        },
        "price": {
          "$ref": "#/definitions/TMF620Money",
          "description": "The amount of money that characterizes the price."
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "description": "Percentage to apply for ProdOfferPriceAlteration (Discount)"
        },
        "bundledPopRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620BundledPopRelationship"
          }
        },
        "popRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620PopRelationship"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProdSpecCharValueUse"
          }
        },
        "productOfferingTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductOfferingTerm"
          }
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620PlaceRef"
          }
        },
        "constraint": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ConstraintRef"
          }
        },
        "pricingLogicAlgorithm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620PricingLogicAlgorithm"
          }
        },
        "tax": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620Tax"
          }
        }
      }
    },
    "TMF620TimePeriod": {
      "type": "object",
      "description": "A base / value business entity used to represent a period of time between two timepoints.",
      "properties": {
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, starting at the TimePeriod"
        },
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, ending at the TimePeriod."
        }
      }
    },
    "TMF620PlaceRef": {
      "type": "object",
      "description": "Place reference. Place defines the places where the products are sold or delivered.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the place"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the place"
        },
        "name": {
          "type": "string",
          "description": "A user-friendly name for the place, such as \"Paris Store\", \"London Store\", \"Main Home\""
        },
        "geoLocationUrl": {
          "type": "string",
          "description": "A url providing a map for localizing the place"
        },
        "address": {
          "type": "string",
          "description": "A string characterizing an address (for instance a formatted address or an identifier taken from an address database or an address API)."
        },
        "@referredType": {
          "type": "string",
          "description": "class type of the referred Place object"
        },
        "role": {
          "type": "string",
          "description": "Role of the place (for instance: 'home delivery', 'shop retrieval')"
        }
      }
    },
    "TMF620SLARef": {
      "type": "object",
      "description": "ServiceLevelAgreement reference: A service level agreement (SLA) is a type of agreement that represents a formal negotiated agreement between two parties designed to create a common understanding about products, services, priorities, responsibilities, and so forth. The SLA is a set of appropriate procedures and targets formally or informally agreed between parties in order to achieve and maintain specified Quality of Service.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of service level agreement"
        },
        "href": {
          "type": "string",
          "description": "Reference of the service level agreement"
        },
        "name": {
          "type": "string",
          "description": "Name of the service level agreement"
        },
        "@referredType": {
          "type": "string",
          "description": "class type of referred Service Level Agreement"
        }
      }
    },
    "TMF620ProductSpecificationRef": {
      "type": "object",
      "description": "Product specification reference: A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the product specification"
        },
        "href": {
          "type": "string",
          "description": "Reference of the product specification"
        },
        "version": {
          "type": "string",
          "description": "Version of the product specification"
        },
        "name": {
          "type": "string",
          "description": "Name of the product specification"
        },
        "@referredType": {
          "type": "string",
          "description": "class type of referred Product Specification"
        }
      }
    },
    "TMF620ChannelRef": {
      "type": "object",
      "description": "Channel reference. The channel defines the channel for selling product offerings.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the channel"
        },
        "href": {
          "type": "string",
          "description": "Reference of the channel"
        },
        "name": {
          "type": "string",
          "description": "Name of the channel"
        },
        "@referredType": {
          "type": "string",
          "description": "(Class) type of the referred channel like DistributionChannel, SalesChannel and so on"
        }
      }
    },
    "TMF620ServiceCandidateRef": {
      "type": "object",
      "description": "ServiceCandidate reference. ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the service candidate"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the service candidate"
        },
        "version": {
          "type": "string",
          "description": "Version of the service candidate"
        },
        "name": {
          "type": "string",
          "description": "Name of the service candidate"
        },
        "@referredType": {
          "type": "string",
          "description": "The Class type of  referred Service Candidate"
        }
      }
    },
    "TMF620Attachment": {
      "type": "object",
      "description": "Complements the description of an element (for instance a product) through video, pictures...",
      "properties": {
        "description": {
          "type": "string",
          "description": "A narrative text describing the content of the attachment"
        },
        "href": {
          "type": "string",
          "description": "Reference of the attachment"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the attachment"
        },
        "type": {
          "type": "string",
          "description": "Attachment type such as video, picture"
        },
        "url": {
          "type": "string",
          "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
        },
        "mimeType": {
          "type": "string",
          "description": "Attachment mime type such as extension file for video, picture and document"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod"
        },
        "@type": {
          "type": "string",
          "description": "the class type of the Attachment"
        },
        "@baseType": {
          "type": "string",
          "description": "The immediate base class type of the attachment"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this attachment entity"
        }
      }
    },
    "TMF620CategoryRef": {
      "type": "object",
      "description": "Category reference. The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique reference of the category"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the category"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "@referredType": {
          "type": "string",
          "description": "the class type of the referred Category"
        }
      }
    },
    "TMF620ResourceCandidateRef": {
      "type": "object",
      "description": "ResourceCandidate reference: A resource candidate is an entity that makes a ResourceSpecification available to a catalog.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the resource candidate"
        },
        "href": {
          "type": "string",
          "description": "Reference of the resource candidate"
        },
        "version": {
          "type": "string",
          "description": "Version of the resource candidate"
        },
        "name": {
          "type": "string",
          "description": "Name of the resource candidate"
        },
        "@referredType": {
          "type": "string",
          "description": "The Class type of referred Resource Candidate"
        }
      }
    },
    "TMF620ProductOfferingTerm": {
      "type": "object",
      "description": "A condition under which a ProductOffering is made available to Customers. For instance, a productOffering can be offered with multiple commitment periods.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the productOfferingTerm"
        },
        "description": {
          "type": "string",
          "description": "Description of the productOfferingTerm"
        },
        "duration": {
          "$ref": "#/definitions/TMF620Quantity",
          "description": "Duration of the productOfferingTerm"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the productOfferingterm is valid"
        },
        "@type": {
          "type": "string",
          "description": "The class type of ProductOfferingTerm"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this product offering term"
        }
      }
    },
    "TMF620MarketSegmentRef": {
      "type": "object",
      "description": "provides references to the corresponding market segment as target of product offerings. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the market segment"
        },
        "href": {
          "type": "string",
          "description": "Reference of the market segment"
        },
        "name": {
          "type": "string",
          "description": "Name of the market segment"
        },
        "@referredType": {
          "type": "string",
          "description": "(Class) type of the referred market segment"
        }
      }
    },
    "TMF620AgreementRef": {
      "type": "object",
      "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
      "properties": {
        "href": {
          "type": "string",
          "description": "Reference of the agreement"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the agreement"
        },
        "name": {
          "type": "string",
          "description": "Name of the agreement"
        },
        "@referredType": {
          "type": "string",
          "description": "class type of the referred Agreement"
        }
      }
    },
    "TMF620BundledProductOffering": {
      "type": "object",
      "description": "A type of ProductOffering that belongs to a grouping of ProductOfferings made available to the market. It inherits of all attributes of ProductOffering.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the BundledProductOffering"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the BundledProductOffering"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the BundledProductOffering"
        },
        "bundledProductOffering": {
          "$ref": "#/definitions/TMF620BundledProdOfferOption"
        }
      }
    },
    "TMF620ProdSpecCharValueUse": {
      "type": "object",
      "description": "A use of the ProdSpecCharacteristicValue by a ProductOffering to which additional properties (attributes) apply or override the properties of similar properties contained in ProdSpecCharacteristicValue. It should be noted that characteristics which their value(s) addressed by this object must exist in corresponding product specification. The available characteristic values for a ProductSpecCharacteristic in a Product specification can be modified at the ProductOffering level. For example, a characteristic 'Color' might have values White, Blue, Green, and Red. But, the list of values can be restricted to e.g. White and Blue in an associated product offering. It should be noted that the list of values in 'ProdSpecCharValueUse' is a strict subset of the list of values as defined in the corresponding product specification characteristics.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the associated productSpecCharacteristic"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the productSpecCharacteristic is"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
        },
        "minCardinality": {
          "type": "integer",
          "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
        },
        "maxCardinality": {
          "type": "integer",
          "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the productSpecCharacteristic is valid"
        },
        "productSpecCharacteristicValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductSpecCharacteristicValue"
          }
        },
        "productSpecification": {
          "$ref": "#/definitions/TMF620ProductSpecificationRef"
        }
      }
    },
    "TMF620Quantity": {
      "type": "object",
      "description": "A base / value and unit  used to represent quantity",
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64",
          "description": "A quantity of something, typically the total of a thing or things in number, size, value, extent, or money."
        },
        "units": {
          "type": "string",
          "description": "The unit of measure for the quantity, such as meters, cubic yards, kilograms [ISO 80000], and the currency referring to [ISO 4217]."
        }
      }
    },
    "TMF620Price": {
      "type": "object",
      "description": "Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price Alteration.",
      "properties": {
        "taxIncludedAmount": {
          "$ref": "#/definitions/TMF620Money",
          "description": "All taxes included amount (expressed in the given currency)"
        },
        "dutyFreeAmount": {
          "$ref": "#/definitions/TMF620Money",
          "description": "All taxes excluded amount (expressed in the given currency)"
        },
        "taxRate": {
          "type": "number",
          "format": "float",
          "description": "Tax rate"
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "description": "Percentage to apply for ProdOfferPriceAlteration"
        }
      }
    },
    "TMF620PriceAlteration": {
      "type": "object",
      "description": "Is an amount, usually of money, that modifies the price charged for an order item.",
      "properties": {
        "name": {
          "type": "string",
          "description": "A short descriptive name such as \"Monthly discount\""
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail the semantics of this order item price alteration"
        },
        "priceType": {
          "type": "string",
          "description": "A category that describes the price such as recurring, one time and usage."
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "Could be minutes, GB..."
        },
        "recurringChargePeriod": {
          "type": "string",
          "description": "Could be month, week..."
        },
        "applicationDuration": {
          "type": "integer",
          "description": "Duration during which the alteration applies on the order item price (for instance 2 months free of charge for the recurring charge)"
        },
        "priority": {
          "type": "integer",
          "description": "Priority level for applying this alteration among all the defined alterations on the order item price"
        },
        "priceCondition": {
          "type": "string",
          "description": "Condition that triggers the price application"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the price alteration is valid"
        },
        "price": {
          "$ref": "#/definitions/TMF620Price"
        }
      }
    },
    "TMF620Money": {
      "type": "object",
      "description": "A base / value business entity used to represent money",
      "properties": {
        "value": {
          "type": "number",
          "format": "float",
          "description": "A positive floating point number"
        },
        "unit": {
          "type": "string",
          "description": "Currency (ISO4217 norm uses 3 letters to define the currency)"
        }
      }
    },
    "TMF620BundledProdOfferOption": {
      "type": "object",
      "description": "A set of numbers that specifies the lower and upper limits for a ProductOffering that can be procured as part of the related BundledProductOffering. Values can range from 0 to unbounded",
      "properties": {
        "numberRelOfferLowerLimit": {
          "type": "integer",
          "description": "lower limit for a product offering that can be procured as part of the related BundledProductOffering"
        },
        "numberRelOfferUpperLimit": {
          "type": "integer",
          "description": "upper limit for a product offering that can be procured as part of the related BundledProductOffering"
        },
        "numberRelOfferDefault": {
          "type": "integer",
          "description": "Default number of produc offereings that should be procured as part of the related BundledProductOffering"
        }
      }
    },
    "TMF620ProductSpecCharacteristicValue": {
      "type": "object",
      "description": "A number or text that can be assigned to a ProductSpecCharacteristic.",
      "properties": {
        "isDefault": {
          "type": "boolean",
          "description": "Indicates if the value is the default value for a characteristic"
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "Could be minutes, GB..."
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period of time for which a value is applicable"
        },
        "value": {
          "type": "string",
          "description": "A discrete value that the characteristic can take on. the value type is defined by 'valueType' characteristic"
        },
        "valueFrom": {
          "type": "string",
          "description": "The low range value that a characteristic can take on"
        },
        "valueTo": {
          "type": "string",
          "description": "The upper range value that a characteristic can take on"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic can take on, such as numeric, text, and so forth"
        },
        "rangeInterval": {
          "type": "string",
          "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
        },
        "regex": {
          "type": "string",
          "description": "Regular expression to define constraint on the allowed value"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the characteristic value"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Hyperlink reference to schema describing this object"
        }
      }
    },
    "TMF620RelatedPartyRef": {
      "type": "object",
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of a related party"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related party, could be a party reference or a party role reference"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party."
        },
        "name": {
          "type": "string",
          "description": "Name of the related party"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "Validity period of the related party"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of referred party/party role reference"
        }
      }
    },
    "TMF620ProductSpecCharacteristic": {
      "type": "object",
      "description": "A characteristic quality or distinctive feature of a ProductSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the productSpecCharacteristic"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the productSpecCharacteristic is"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
        },
        "configurable": {
          "type": "boolean",
          "description": "If true, the Boolean indicates that the productSpecCharacteristic is configurable"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the productSpecCharacteristic is valid"
        },
        "@type": {
          "type": "string",
          "description": "the class type of this characteristic"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "hyperlink reference to the schema describing this characteristic"
        },
        "@valueSchemaLocation": {
          "type": "string",
          "description": "This (optional) field provides a link to the schema describing the value type."
        },
        "minCardinality": {
          "type": "integer",
          "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality"
        },
        "maxCardinality": {
          "type": "integer",
          "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality"
        },
        "isUnique": {
          "type": "boolean",
          "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
        },
        "regex": {
          "type": "string",
          "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value"
        },
        "extensible": {
          "type": "boolean",
          "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a product"
        },
        "productSpecCharRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductSpecCharRelationship"
          }
        },
        "productSpecCharacteristicValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF620ProductSpecCharacteristicValue"
          }
        }
      }
    },
    "TMF620ServiceSpecificationRef": {
      "type": "object",
      "description": "Service specification reference: ServiceSpecification(s) required to realize a ProductSpecification.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the service specification"
        },
        "href": {
          "type": "string",
          "description": "Reference of the serviceSpecification"
        },
        "name": {
          "type": "string",
          "description": "Name of the requiredServiceSpecification"
        },
        "version": {
          "type": "string",
          "description": "Service specification version"
        },
        "@referredType": {
          "type": "string",
          "description": "the class type of associated service specification"
        }
      }
    },
    "TMF620TargetProductSchemaRef": {
      "type": "object",
      "description": "The reference object to the schema and type of target product which is described by product specification",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "class type of the target product"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing the target product"
        }
      }
    },
    "TMF620ProductSpecificationRelationship": {
      "type": "object",
      "description": "A migration, substitution, dependency or exclusivity relationship between/among product specifications.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the productSpecification"
        },
        "href": {
          "type": "string",
          "description": "Reference of the productSpecification"
        },
        "type": {
          "type": "string",
          "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the productSpecificationRelationship is valid"
        }
      }
    },
    "TMF620ResourceSpecificationRef": {
      "type": "object",
      "description": "Resource Specification reference: The ResourceSpecification is required to realize a ProductSpecification.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the resource specification"
        },
        "href": {
          "type": "string",
          "description": "Reference of the resource specification"
        },
        "name": {
          "type": "string",
          "description": "Name of the requiredResourceSpecification"
        },
        "version": {
          "type": "string",
          "description": "Resource specification version"
        },
        "@referredType": {
          "type": "string",
          "description": "the class type of associated resource specification"
        }
      }
    },
    "TMF620BundledProductSpecification": {
      "type": "object",
      "description": "A type of ProductSpecification that belongs to a grouping of ProductSpecifications made available to the market. It inherits of all attributes of ProductSpecification.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the product specification"
        },
        "href": {
          "type": "string",
          "description": "Reference of the product specification"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the product specification"
        },
        "@type": {
          "type": "string",
          "description": "the class type of the corresponding product specification"
        }
      }
    },
    "TMF620ProductSpecCharRelationship": {
      "type": "object",
      "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among productSpecCharacteristics.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the productSpecCharRelationship is valid"
        },
        "charSpecSeq": {
          "type": "integer",
          "description": "The order in which a CharacteristicSpecification appears within another CharacteristicSpecification that defines a grouping of CharacteristicSpecifications.\n\nFor example, a grouping may represent the name of an individual. The given name is first, the middle name is second, and the last name is third."
        },
        "id": {
          "type": "string",
          "description": "the identifier of the associated product specification"
        },
        "name": {
          "type": "string",
          "description": "Name of the target product specification characteristic"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the target product specification"
        },
        "@type": {
          "type": "string",
          "description": "Class type of target product specification"
        }
      }
    },
    "TMF620ProductOfferingRef": {
      "type": "object",
      "description": "ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the product offering"
        },
        "href": {
          "type": "string",
          "description": "Reference of the product offering"
        },
        "name": {
          "type": "string",
          "description": "Name of the product offering"
        },
        "@referredType": {
          "type": "string",
          "description": "the class type of the referred product offering"
        }
      }
    },
    "TMF620BundledPopRelationship": {
      "type": "object",
      "description": "this object represents a bundle relationship from a bundle product offering (parent) to a simple product offering (child). A simple product offering may participate in more than one bundle relationships.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the associated product offering"
        },
        "href": {
          "type": "string",
          "description": "hyperlink reference of the associated product offering"
        },
        "name": {
          "type": "string",
          "description": "Name of  the associated product offering"
        },
        "@type": {
          "type": "string",
          "description": "(Class) type of the associated product offering"
        }
      }
    },
    "TMF620PopRelationship": {
      "type": "object",
      "description": "product offering relationship",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the associated product offering"
        },
        "href": {
          "type": "string",
          "description": "hyperlink reference of the associated product offering"
        },
        "name": {
          "type": "string",
          "description": "Name of  the associated product offering"
        },
        "@type": {
          "type": "string",
          "description": "(Class) type of the associated product offering"
        }
      }
    },
    "TMF620ConstraintRef": {
      "type": "object",
      "description": "Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec.",
      "properties": {
        "id": {
          "type": "string",
          "description": "reference id to the target constraint"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the target constraint"
        },
        "version": {
          "type": "string",
          "description": "constraint version"
        },
        "name": {
          "type": "string",
          "description": "Name given to the constraint"
        },
        "@referredType": {
          "type": "string",
          "description": "The (class) type of the referred constraint"
        }
      }
    },
    "TMF620PricingLogicAlgorithm": {
      "type": "object",
      "description": "The PricingLogicAlgorithm entity represents an instantiation of an interface specification to external rating function (without a modeled bahavior in SID). Some of the parameters of the interface definiition may be already set (such as price per unit) and some may be gathered during the rating process from the event (such as call duration) or from ProductCharacteristicValues (such as assigned bandwidth)",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique id of the PLA"
        },
        "href": {
          "type": "string",
          "description": "hyperlink reference of this PLA"
        },
        "name": {
          "type": "string",
          "description": "Name given to the PLA"
        },
        "description": {
          "type": "string",
          "description": "Description of the PLA"
        },
        "validFor": {
          "$ref": "#/definitions/TMF620TimePeriod",
          "description": "The period for which the PLA is valid"
        },
        "plaSpecId": {
          "type": "string",
          "description": "id of corresponding PLA specification"
        },
        "@type": {
          "type": "string",
          "description": "The class type of this PLA"
        }
      }
    },
    "TMF620Tax": {
      "type": "object",
      "description": "An amount of money levied on the price of a Product by a legislative body.",
      "properties": {
        "taxAmount": {
          "$ref": "#/definitions/TMF620Money",
          "description": "tax amount"
        },
        "taxCategory": {
          "$ref": "#/definitions/TMF620Money",
          "description": "A categorization of the tax rate."
        },
        "taxRate": {
          "type": "number",
          "format": "float",
          "description": "Tax rate"
        }
      }
    },
    "TMF620EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF620EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF620Error": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "An integer coding the error type. This is given to caller so he can translate them if required."
        },
        "message": {
          "type": "string",
          "description": "A short localized string that describes the error."
        },
        "description": {
          "type": "string",
          "description": "(optional) A long localized error description if needed. It can contain precise information about which parameter is missing, or what are the identifier acceptable values."
        },
        "infoURL": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        }
      }
    },
    "TMF621TroubleTicket": {
      "type": "object",
      "description": "A trouble ticket is a record of an issue that is created, tracked, and managed by a trouble ticket management system",
      "required": [
        "description",
        "severity",
        "ticketType"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the trouble ticket"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink, a reference to the trouble ticket entity"
        },
        "name": {
          "type": "string",
          "description": "Name of the trouble ticket, typically a short description provided by the user that create the ticket"
        },
        "description": {
          "type": "string",
          "description": "Description of the trouble or issue"
        },
        "externalId": {
          "type": "string",
          "description": "Additional identifier coming from an external system"
        },
        "ticketType": {
          "type": "string",
          "description": "represent a business type of the trouble ticket e.g. incident, complain, request"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date on which the trouble ticket was created"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time that the trouble ticked was last updated"
        },
        "severity": {
          "type": "string",
          "description": "The severity of the issue. Indicate the implication of the issue on the expected functionality e.g. of a system, application, service etc.. \nSeverity values can be for example : Critical, Major, Minor"
        },
        "priority": {
          "type": "string",
          "description": "The priority of the trouble ticket and how quickly the issue should be resolved. Example: Critical, High, Medium, Low. The value is set by the ticket management system considering the severity, ticket type etc..."
        },
        "requestedResolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The resolution date requested by the user"
        },
        "expectedResolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The expected resolution date determined by the trouble ticket system"
        },
        "resolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the trouble ticket was resolved"
        },
        "status": {
          "type": "string",
          "description": "The current status of the trouble ticket"
        },
        "statusChangeReason": {
          "type": "string",
          "description": "The reason for changing the status"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of the trouble ticket. e.g. billingTicket, networkTicket, resourceTicket"
        },
        "@baseType": {
          "type": "string",
          "description": "The base type (class) of the resource. Here can be 'TroubleTicket'"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Link to the schema describing this REST resource"
        },
        "relatedEntity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF621RelatedEntityRef"
          },
          "description": "An entity that is related to the ticket such as a bill, a product, etc. The entity against which the ticket is associated."
        },
        "channel": {
          "$ref": "#/definitions/TMF621Channel",
          "description": "The channel that origin the trouble ticket"
        },
        "statusChange": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF621StatusChange"
          },
          "description": "The status change history that are associated to the ticket.Populated by the server"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF621Note"
          },
          "description": "The note(s) that are associated to the ticket."
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF621RelatedPartyRef"
          },
          "description": "The related party(ies) that are associated to the ticket."
        },
        "ticketRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF621TicketRelationship"
          },
          "description": "A list of trouble ticket relationships (TroubleTicketRelationship [*]). Represents a relationship between trouble tickets"
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF621Attachment"
          },
          "description": "File(s) attached to the trouble ticket. e.g. pictur of broken device, scaning of a bill or charge"
        }
      }
    },
    "TMF621TroubleTicket_Create": {
      "type": "object",
      "description": "A trouble ticket is a record of an issue that is created, tracked, and managed by a trouble ticket management system\nSkipped properties: id,href",
      "required": [
        "description",
        "severity",
        "ticketType"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the trouble ticket, typically a short description provided by the user that create the ticket"
        },
        "description": {
          "type": "string",
          "description": "Description of the trouble or issue"
        },
        "externalId": {
          "type": "string",
          "description": "Additional identifier coming from an external system"
        },
        "ticketType": {
          "type": "string",
          "description": "represent a business type of the trouble ticket e.g. incident, complain, request"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date on which the trouble ticket was created"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time that the trouble ticked was last updated"
        },
        "severity": {
          "type": "string",
          "description": "The severity of the issue. Indicate the implication of the issue on the expected functionality e.g. of a system, application, service etc.. \nSeverity values can be for example : Critical, Major, Minor"
        },
        "priority": {
          "type": "string",
          "description": "The priority of the trouble ticket and how quickly the issue should be resolved. Example: Critical, High, Medium, Low. The value is set by the ticket management system considering the severity, ticket type etc..."
        },
        "requestedResolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The resolution date requested by the user"
        },
        "expectedResolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The expected resolution date determined by the trouble ticket system"
        },
        "resolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the trouble ticket was resolved"
        },
        "status": {
          "type": "string",
          "description": "The current status of the trouble ticket"
        },
        "statusChangeReason": {
          "type": "string",
          "description": "The reason for changing the status"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of the trouble ticket. e.g. billingTicket, networkTicket, resourceTicket"
        },
        "@baseType": {
          "type": "string",
          "description": "The base type (class) of the resource. Here can be 'TroubleTicket'"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Link to the schema describing this REST resource"
        },
        "relatedEntity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF621RelatedEntityRef"
          },
          "description": "An entity that is related to the ticket such as a bill, a product, etc. The entity against which the ticket is associated."
        },
        "channel": {
          "$ref": "#/definitions/TMF621Channel",
          "description": "The channel that origin the trouble ticket"
        },
        "statusChange": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF621StatusChange"
          },
          "description": "The status change history that are associated to the ticket.Populated by the server"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF621Note"
          },
          "description": "The note(s) that are associated to the ticket."
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF621RelatedPartyRef"
          },
          "description": "The related party(ies) that are associated to the ticket."
        },
        "ticketRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF621TicketRelationship"
          },
          "description": "A list of trouble ticket relationships (TroubleTicketRelationship [*]). Represents a relationship between trouble tickets"
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF621Attachment"
          },
          "description": "File(s) attached to the trouble ticket. e.g. picture of broken device, scanning of a bill or charge"
        }
      }
    },
    "TMF621TroubleTicket_Update": {
      "type": "object",
      "description": "A trouble ticket is a record of an issue that is created, tracked, and managed by a trouble ticket management system\nSkipped properties: id,href,id,href,creationDate,lastUpdated,statusChange,@baseType,@type,@schemaLocation",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the trouble ticket, typically a short description provided by the user that create the ticket"
        },
        "description": {
          "type": "string",
          "description": "Description of the trouble or issue"
        },
        "externalId": {
          "type": "string",
          "description": "Additional identifier coming from an external system"
        },
        "ticketType": {
          "type": "string",
          "description": "represent a business type of the trouble ticket e.g. incident, complain, request"
        },
        "severity": {
          "type": "string",
          "description": "The severity of the issue. Indicate the implication of the issue on the expected functionality e.g. of a system, application, service etc.. \nSeverity values can be for example : Critical, Major, Minor"
        },
        "priority": {
          "type": "string",
          "description": "The priority of the trouble ticket and how quickly the issue should be resolved. Example: Critical, High, Medium, Low. The value is set by the ticket management system considering the severity, ticket type etc..."
        },
        "requestedResolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The resolution date requested by the user"
        },
        "expectedResolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The expected resolution date determined by the trouble ticket system"
        },
        "resolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the trouble ticket was resolved"
        },
        "status": {
          "type": "string",
          "description": "The current status of the trouble ticket"
        },
        "statusChangeReason": {
          "type": "string",
          "description": "The reason for changing the status"
        },
        "relatedEntity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF621RelatedEntityRef"
          },
          "description": "An entity that is related to the ticket such as a bill, a product, etc. The entity against which the ticket is associated."
        },
        "channel": {
          "$ref": "#/definitions/TMF621Channel",
          "description": "The channel that origin the trouble ticket"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF621Note"
          },
          "description": "The note(s) that are associated to the ticket."
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF621RelatedPartyRef"
          },
          "description": "The related party(ies) that are associated to the ticket."
        },
        "ticketRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF621TicketRelationship"
          },
          "description": "A list of trouble ticket relationships (TroubleTicketRelationship [*]). Represents a relationship between trouble tickets"
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF621Attachment"
          },
          "description": "File(s) attached to the trouble ticket. e.g. pictur of broken device, scaning of a bill or charge"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF621RelatedEntityRef": {
      "type": "object",
      "description": "Related Entity reference. Reference to an arbitrary entity from a context entity.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the related entity"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink, a reference to the related entity (e.g. customerBill, productOrder, etc.)"
        },
        "name": {
          "type": "string",
          "description": "The name of the related entity if applicable (e.g. name of the customer, name of the bill, name of the product etc...)"
        },
        "role": {
          "type": "string",
          "description": "The role of the related entity in the context of the contained resource (e.g. disputedBill, damagedDevice"
        },
        "@referredType": {
          "type": "string",
          "description": "A string. Indicates the type (class) of related entity. For example, Product Order Customer Bill, Payment, etc."
        }
      }
    },
    "TMF621Channel": {
      "type": "object",
      "description": "The communication channel for example WEB, Call Center",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the channel"
        },
        "name": {
          "type": "string",
          "description": "The name of the channel"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of channel"
        }
      }
    },
    "TMF621StatusChange": {
      "type": "object",
      "description": "Holds the status notification reasons and associated date the status changed, populated by the server",
      "properties": {
        "status": {
          "type": "string",
          "description": "The status of the trouble ticket"
        },
        "changeReason": {
          "type": "string",
          "description": "The reason why the status changed."
        },
        "changeDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the status changed."
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of statusChange"
        }
      }
    },
    "TMF621Note": {
      "type": "object",
      "description": "Extra information about a given entity",
      "properties": {
        "id": {
          "type": "string",
          "description": "Quick identifier of the note"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date that the note created"
        },
        "text": {
          "type": "string",
          "description": "The text of the note"
        },
        "author": {
          "type": "string",
          "description": "The name of the note author, can be the agent name or any other party that created the note"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of note"
        }
      }
    },
    "TMF621RelatedPartyRef": {
      "type": "object",
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of a related party"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related party, could be a party reference or a party role reference"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party."
        },
        "name": {
          "type": "string",
          "description": "Name of the related party"
        },
        "@referredType": {
          "type": "string",
          "description": "A string. Indicates the type (class) of related party. For example, Organization or Individual (if party), Customer, Supplier, etc. (if party role)."
        }
      }
    },
    "TMF621TicketRelationship": {
      "type": "object",
      "description": "Represents a relationship between trouble tickets",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the related trouble ticket"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink, a reference to the related trouble ticket entity"
        },
        "type": {
          "type": "string",
          "description": "Type of the trouble ticket relationship can be isChiled, dependent etc..."
        }
      }
    },
    "TMF621Attachment": {
      "type": "object",
      "description": "Attachment refers to extensions or additional parts that is or may be attached to something (agreements, contracts, appointments) to perform a particular function. They can be communication attachments, documents and other.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the binary attachment"
        },
        "href": {
          "type": "string",
          "description": "Reference of the attached document"
        },
        "size": {
          "type": "number",
          "format": "date-time",
          "description": "The size in Bytes of the of the document or attachment. If this component contains the embedded data then the size is the size of the embedded data; if it is a reference without the data then it is the size of the referenced document."
        },
        "name": {
          "type": "string",
          "description": "name of the binary attachment"
        },
        "description": {
          "type": "string",
          "description": "the description of the binary attachment"
        },
        "sizeUnit": {
          "type": "string",
          "description": "The unit of measure for the size"
        },
        "mimeType": {
          "type": "string",
          "description": "mimeType of the Attachement ( e,g application/pdf)"
        },
        "url": {
          "type": "string",
          "description": "URL of the Attachment"
        },
        "validFor": {
          "$ref": "#/definitions/TMF621TimePeriod",
          "description": "validity period of the Attachment"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of the attachment."
        }
      }
    },
    "TMF621TimePeriod": {
      "properties": {
        "startDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "endDateTime": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "TMF621EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF621EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF621Error": {
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "Application related code."
        },
        "reason": {
          "type": "integer",
          "description": "Text that explains the reason for error."
        },
        "message": {
          "type": "string",
          "description": "(optional) Text that provide more details and corrective actions related to the error."
        },
        "status": {
          "type": "integer",
          "description": "(optional) http error code extension like 400-2"
        },
        "referenceError": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        },
        "@type": {
          "type": "string",
          "description": "(optional) The class type of a REST resource."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "(optional) A link to the schema describing a REST resource."
        }
      }
    },
    "TMF622PriorityType": {
      "description": "",
      "type": "string",
      "enum": [
        "0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "TMF622ActionType": {
      "description": "",
      "type": "string",
      "enum": [
        "add",
        "modify",
        "noChange",
        "delete"
      ]
    },
    "TMF622StateType": {
      "description": "",
      "type": "string",
      "enum": [
        "acknowledged",
        "inProgress",
        "cancelled",
        "completed",
        "rejected",
        "pending",
        "held",
        "failed",
        "partial"
      ]
    },
    "TMF622RelationShipType": {
      "description": "",
      "type": "string",
      "enum": [
        "reliesOn",
        "brings",
        "hasParent",
        "hasChild"
      ]
    },
    "TMF622PriceType": {
      "description": "",
      "type": "string",
      "enum": [
        "recuring",
        "oneTime",
        "usage"
      ]
    },
    "TMF622ErrorRepresentation": {
      "description": "This structure is a representation of an error.",
      "required": [
        "code",
        "reason",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "description": "",
          "type": "string"
        },
        "message": {
          "description": "",
          "type": "string"
        },
        "status": {
          "description": "",
          "type": "string"
        },
        "referenceError": {
          "description": "",
          "type": "string"
        },
        "@type": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF622BillingAccountRef": {
      "description": "A BillingAccount is a detailed description of a bill structure.",
      "required": [
        "id",
        "href"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the billing account",
          "type": "string"
        },
        "href": {
          "description": "Unique reference of the billing account",
          "type": "string"
        },
        "name": {
          "description": "Name of the billing account",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of resource.",
          "type": "string"
        }
      }
    },
    "TMF622Place": {
      "description": "Place defines the places where the products are sold or delivered.",
      "required": [
        "role"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the place",
          "type": "string"
        },
        "href": {
          "description": "Unique reference of the place",
          "type": "string"
        },
        "name": {
          "description": "A user-friendly name for the place, such as 'Paris Store', 'Main Home'.",
          "type": "string"
        },
        "role": {
          "description": "Role of the place",
          "type": "string"
        },
        "@referredType": {
          "description": "Type of Place.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource.",
          "type": "string"
        }
      }
    },
    "TMF622AppointmentRef": {
      "description": "If the product order item requires an appointment between the service provider and the customer.",
      "required": [
        "href",
        "id"
      ],
      "type": "object",
      "properties": {
        "href": {
          "description": "Hyperlink to access the appointment",
          "type": "string"
        },
        "id": {
          "description": "id of the appointment",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of resource.",
          "type": "string"
        }
      }
    },
    "TMF622ProductOrder": {
      "description": "",
      "required": [
        "id",
        "orderItem"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "ID created on repository side (OM system)",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink to access the order",
          "type": "string"
        },
        "externalId": {
          "description": "ID given by the consumer and only understandable by him (to facilitate his searches afterwards).",
          "type": "string"
        },
        "priority": {
          "$ref": "#/definitions/TMF622PriorityType"
        },
        "description": {
          "description": "Description of the product order",
          "type": "string"
        },
        "category": {
          "description": "Used to categorize the order from a business perspective that can be useful for the OM system (e.g. 'enterprise', 'residential', ...).",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/TMF622StateType"
        },
        "orderDate": {
          "description": "Date when the order was created",
          "type": "string",
          "format": "date-time"
        },
        "completionDate": {
          "description": "Date when the order was completed.",
          "type": "string",
          "format": "date-time"
        },
        "requestedStartDate": {
          "description": "Order start date wished by the requestor",
          "type": "string",
          "format": "date-time"
        },
        "requestedCompletionDate": {
          "description": "Requested delivery date from the requestor perspective",
          "type": "string",
          "format": "date-time"
        },
        "expectedCompletionDate": {
          "description": "Expected delivery date amended by the provider",
          "type": "string",
          "format": "date-time"
        },
        "notificationContact": {
          "description": "Contact attached to the order to send back information regarding this order",
          "type": "string"
        },
        "@baseType": {
          "description": "Indicates the base type of the resource. Here can be 'ProductOrder'.",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of resource. Here can be 'ProductOrder'.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource.",
          "type": "string"
        },
        "channel": {
          "$ref": "#/definitions/TMF622Channel"
        },
        "note": {
          "$ref": "#/definitions/TMF622Note"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622RelatedPartyRef"
          }
        },
        "payment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622PaymentRef"
          }
        },
        "billingAccount": {
          "$ref": "#/definitions/TMF622BillingAccountRef"
        },
        "orderTotalPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622OrderPrice"
          }
        },
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622OrderItem"
          }
        }
      }
    },
    "TMF622Note": {
      "description": "Extra information about a given entity",
      "required": [
        "text"
      ],
      "type": "object",
      "properties": {
        "text": {
          "description": "Texte of the note",
          "type": "string"
        },
        "date": {
          "description": "Date of the note",
          "type": "string",
          "format": "date-time"
        },
        "author": {
          "description": "Author of the note",
          "type": "string"
        }
      }
    },
    "TMF622RelatedPartyRef": {
      "description": "A related party defines party or party role linked to a specific entity.",
      "required": [
        "id",
        "href",
        "role"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the related party",
          "type": "string"
        },
        "href": {
          "description": "Reference of the related party, could be a party reference or a party role reference.",
          "type": "string"
        },
        "name": {
          "description": "Name of the related party",
          "type": "string"
        },
        "role": {
          "description": "Role played by the related party",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the base (class) type of the party.",
          "type": "string"
        }
      }
    },
    "TMF622OrderItem": {
      "description": "An identified part of the order. A product order is decomposed into one or more order items.",
      "required": [
        "id",
        "action"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of the line item (generally it is a sequence number 01, 02, 03, ...)",
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/TMF622ActionType"
        },
        "state": {
          "$ref": "#/definitions/TMF622StateType"
        },
        "quantity": {
          "description": "Quantity ordered",
          "type": "integer",
          "format": "int64"
        },
        "@type": {
          "description": "Indicates the type of resource. Here it can be a type of productOrderItem.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "An URL to the schema describing this REST resource.",
          "type": "string"
        },
        "appointment": {
          "$ref": "#/definitions/TMF622AppointmentRef"
        },
        "billingAccount": {
          "$ref": "#/definitions/TMF622BillingAccountRef"
        },
        "itemPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622OrderPrice"
          }
        },
        "itemTotalPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622OrderPrice"
          }
        },
        "productOffering": {
          "$ref": "#/definitions/TMF622ProductOfferingRef"
        },
        "product": {
          "$ref": "#/definitions/TMF622Product"
        },
        "orderItemRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622OrderItemRelationShip"
          }
        },
        "qualification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622QualificationRef"
          }
        },
        "payment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622PaymentRef"
          }
        },
        "itemTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622OrderTerm"
          }
        },
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622OrderItem"
          }
        }
      }
    },
    "TMF622OrderPrice": {
      "description": "An amount, usually of money, that represents the actual price paid by the Customer for this item or this order.",
      "required": [
        "priceType",
        "price"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "A short descriptive name such as \"Subscription price\".",
          "type": "string"
        },
        "description": {
          "description": "A narrative that explains in detail the semantics of this order item price",
          "type": "string"
        },
        "priceType": {
          "$ref": "#/definitions/TMF622PriceType"
        },
        "unitOfMeasure": {
          "description": "Could be minutes, gigaBytes,...",
          "type": "string"
        },
        "recurringChargePeriod": {
          "description": "Could be month, week,...",
          "type": "string"
        },
        "@type": {
          "description": "Indicate the type of orderPrice.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this orderPrice extension.",
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/TMF622Price"
        },
        "priceAlteration": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622PriceAlteration"
          }
        },
        "billingAccount": {
          "$ref": "#/definitions/TMF622BillingAccountRef"
        }
      }
    },
    "TMF622ProductOfferingRef": {
      "description": "A product offering represents entities that are order-able from the provider of the catalog, this resource includes pricing information.",
      "required": [
        "id",
        "href"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product offering.",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product offering.",
          "type": "string"
        },
        "name": {
          "description": "Name of the product offering.",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicate the class (type) of product offering.",
          "type": "string"
        }
      }
    },
    "TMF622Product": {
      "description": "Configure the product characteristics (only configurable characteristics and necessary only if a non default value is selected) and/or identify the product that needs to be modified/deleted.",
      "type": "object",
      "properties": {
        "id": {
          "description": "",
          "type": "string"
        },
        "href": {
          "description": "",
          "type": "string"
        },
        "name": {
          "description": "",
          "type": "string"
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622Place"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622ProductCharacteristic"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622RelatedPartyRef"
          }
        },
        "productRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622ProductRelationship"
          }
        },
        "productSpecification": {
          "$ref": "#/definitions/TMF622ProductSpecificationRef"
        },
        "@type": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF622OrderItemRelationShip": {
      "description": "Linked order items to the one instantiate.",
      "required": [
        "type",
        "id"
      ],
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/TMF622RelationShipType"
        },
        "id": {
          "description": "The identifier of the related ordered item.",
          "type": "string"
        }
      }
    },
    "TMF622ProductCharacteristic": {
      "description": "Characteristics of the product to instantiate or to modify.",
      "required": [
        "name",
        "value"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the characteristic.",
          "type": "string"
        },
        "value": {
          "description": "Value of the characteristic.",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "This field provided a link to the schema describing this REST resource.",
          "type": "string"
        }
      }
    },
    "TMF622ProductRelationship": {
      "description": "",
      "required": [
        "type",
        "product"
      ],
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/TMF622RelationShipType"
        },
        "product": {
          "$ref": "#/definitions/TMF622Product"
        }
      }
    },
    "TMF622Channel": {
      "description": "The channel defines the channel for selling product offerings where order has been submitted.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of  the channel",
          "type": "string"
        },
        "href": {
          "description": "Unique reference of the channel",
          "type": "string"
        },
        "name": {
          "description": "Name of the channel",
          "type": "string"
        },
        "role": {
          "description": "Role of the channel - could be 'initChannel', 'submitChannel' for example.",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of resource.",
          "type": "string"
        }
      }
    },
    "TMF622PriceAlteration": {
      "description": "Is an amount, usually of money, that modifies the price charged for an order item.",
      "required": [
        "priceType"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "",
          "type": "string"
        },
        "description": {
          "description": "",
          "type": "string"
        },
        "priceType": {
          "$ref": "#/definitions/TMF622PriceType"
        },
        "unitOfMeasure": {
          "description": "",
          "type": "string"
        },
        "recurringChargePeriod": {
          "description": "",
          "type": "string"
        },
        "applicationDuration": {
          "description": "",
          "type": "string"
        },
        "priority": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "price": {
          "$ref": "#/definitions/TMF622Price"
        },
        "@type": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF622Price": {
      "description": "Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price Alteration.",
      "type": "object",
      "properties": {
        "taxIncludedAmount": {
          "$ref": "#/definitions/TMF622Money"
        },
        "dutyFreeAmount": {
          "$ref": "#/definitions/TMF622Money"
        },
        "taxRate": {
          "description": "Tax rate.",
          "type": "number",
          "format": "float"
        },
        "percentage": {
          "description": "Percentage to apply for ProdOfferPriceAlteration.",
          "type": "number",
          "format": "float"
        },
        "@type": {
          "description": "Indicates the (class) type of the price.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource.",
          "type": "string"
        }
      }
    },
    "TMF622QualificationRef": {
      "description": "It could be a serviceQualification or a productOfferingQualification that has been executed previously and captured in the productOrder to provide 'eligibility' information.",
      "required": [
        "id",
        "href"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of a pre-existing qualification.",
          "type": "string"
        },
        "href": {
          "description": "href of the qualification.",
          "type": "string"
        },
        "qualificationItemId": {
          "description": "Id of an item of a qualification.",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the type of resource. Here it can be a type of qualification. (could a service qualification or a product offering qualification).",
          "type": "string"
        }
      }
    },
    "TMF622PaymentRef": {
      "description": "If an immediate payment has been done at the product order submission, the payment information are captured and stored (as a reference) in the order.",
      "required": [
        "id",
        "href"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of a payment.",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink to access to a payment.",
          "type": "string"
        },
        "name": {
          "description": "Name of a payment.",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the type of resource. Here can be 'cash', 'BankCard', ‘Check’, etc...",
          "type": "string"
        }
      }
    },
    "TMF622OrderTerm": {
      "description": "Description of a productTerm linked to this orderItem. This represent a commitment with a duration.\nDuration or name must be provided.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the productOrderTerm.",
          "type": "string"
        },
        "description": {
          "description": "Description of the productOrderTerm.",
          "type": "string"
        },
        "duration": {
          "$ref": "#/definitions/TMF622Quantity"
        },
        "@type": {
          "description": "Indicated the type of Term.",
          "type": "string"
        }
      }
    },
    "TMF622Quantity": {
      "description": "",
      "required": [
        "value",
        "unit"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "",
          "type": "number",
          "format": "float"
        },
        "unit": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF622ProductSpecificationRef": {
      "description": "A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.",
      "required": [
        "id",
        "href"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product specification.",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product specification.",
          "type": "string"
        },
        "version": {
          "description": "Version of the product specification.",
          "type": "string"
        },
        "name": {
          "description": "Name of the product specification.",
          "type": "string"
        },
        "targetResourceSchema": {
          "$ref": "#/definitions/TMF622TargetResourceSchema"
        }
      }
    },
    "TMF622Money": {
      "description": "A base / value business entity used to represent money.",
      "required": [
        "value",
        "unit"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "A positive floating point number.",
          "type": "number",
          "format": "float"
        },
        "unit": {
          "description": "Currency (ISO4217 norm uses 3 letters to define the currency).",
          "type": "string"
        }
      }
    },
    "TMF622POST_REQ_OrderItem": {
      "description": "",
      "required": [
        "id",
        "action"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of the line item (generally it is a sequence number 01, 02, 03, ...)",
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/TMF622ActionType"
        },
        "quantity": {
          "description": "Quantity ordered",
          "type": "integer",
          "format": "int64"
        },
        "@type": {
          "description": "Indicates the type of resource. Here it can be a type of productOrderItem.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "An URL to the schema describing this REST resource.",
          "type": "string"
        },
        "appointment": {
          "$ref": "#/definitions/TMF622AppointmentRef"
        },
        "billingAccount": {
          "$ref": "#/definitions/TMF622BillingAccountRef"
        },
        "itemPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622OrderPrice"
          }
        },
        "itemTotalPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622OrderPrice"
          }
        },
        "productOffering": {
          "$ref": "#/definitions/TMF622ProductOfferingRef"
        },
        "product": {
          "$ref": "#/definitions/TMF622Product"
        },
        "orderItemRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622OrderItemRelationShip"
          }
        },
        "qualification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622QualificationRef"
          }
        },
        "payment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622PaymentRef"
          }
        },
        "itemTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622OrderTerm"
          }
        },
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622OrderItem"
          }
        }
      }
    },
    "TMF622POST_REQ_ProductOrder": {
      "description": "",
      "required": [
        "orderItem"
      ],
      "type": "object",
      "properties": {
        "externalId": {
          "description": "ID given by the consumer and only understandable by him (to facilitate his searches afterwards).",
          "type": "string"
        },
        "priority": {
          "$ref": "#/definitions/TMF622PriorityType"
        },
        "description": {
          "description": "Description of the product order",
          "type": "string"
        },
        "category": {
          "description": "Used to categorize the order from a business perspective that can be useful for the OM system (e.g. 'enterprise', 'residential', ...).",
          "type": "string"
        },
        "requestedStartDate": {
          "description": "Order start date wished by the requestor",
          "type": "string",
          "format": "date-time"
        },
        "requestedCompletionDate": {
          "description": "Requested delivery date from the requestor perspective",
          "type": "string",
          "format": "date-time"
        },
        "notificationContact": {
          "description": "Contact attached to the order to send back information regarding this order",
          "type": "string"
        },
        "@baseType": {
          "description": "Indicates the base type of the resource. Here can be 'ProductOrder'.",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of resource. Here can be 'ProductOrder'.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource.",
          "type": "string"
        },
        "channel": {
          "$ref": "#/definitions/TMF622Channel"
        },
        "note": {
          "$ref": "#/definitions/TMF622Note"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622RelatedPartyRef"
          }
        },
        "payment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622PaymentRef"
          }
        },
        "billingAccount": {
          "$ref": "#/definitions/TMF622BillingAccountRef"
        },
        "orderTotalPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622OrderPrice"
          }
        },
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF622POST_REQ_OrderItem"
          }
        }
      }
    },
    "TMF622TargetResourceSchema": {
      "description": "Target to the schema describing the product spec resource (and type)",
      "required": [
        "@type",
        "@schemaLocation"
      ],
      "type": "object",
      "properties": {
        "@type": {
          "description": "Indicates the (class) type of resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "This field provided a link to the schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF629Customer": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "href": {
          "type": "string",
          "description": "Url used to reference the party role."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for PartyRoles"
        },
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles."
        },
        "status": {
          "type": "string",
          "description": "Used to track the lifecycle status of the party role."
        },
        "statusReason": {
          "type": "string",
          "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
        },
        "validFor": {
          "$ref": "#/definitions/TMF629TimePeriod",
          "description": "The time period that the PartyRole is valid for."
        },
        "engagedParty": {
          "$ref": "#/definitions/TMF629PartyRef"
        },
        "type": {
          "$ref": "#/definitions/TMF629RoleTypeRef",
          "description": "The role type - useful only in the context of a partnership defining more than one role type."
        },
        "account": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629AccountRef"
          }
        },
        "paymentMethod": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629PaymentMethodRef"
          }
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629ContactMedium"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629Characteristic"
          },
          "description": "Describes the characteristic of a party role."
        },
        "creditProfile": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629CreditProfile"
          }
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629AgreementRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629RelatedPartyRef"
          }
        }
      }
    },
    "TMF629Customer_Create": {
      "type": "object",
      "description": "\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles."
        },
        "status": {
          "type": "string",
          "description": "Used to track the lifecycle status of the party role."
        },
        "statusReason": {
          "type": "string",
          "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
        },
        "validFor": {
          "$ref": "#/definitions/TMF629TimePeriod",
          "description": "The time period that the PartyRole is valid for."
        },
        "engagedParty": {
          "$ref": "#/definitions/TMF629PartyRef"
        },
        "type": {
          "$ref": "#/definitions/TMF629RoleTypeRef",
          "description": "The role type - useful only in the context of a partnership defining more than one role type."
        },
        "account": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629AccountRef"
          }
        },
        "paymentMethod": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629PaymentMethodRef"
          }
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629ContactMedium"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629Characteristic"
          },
          "description": "Describes the characteristic of a party role."
        },
        "creditProfile": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629CreditProfile"
          }
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629AgreementRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629RelatedPartyRef"
          }
        }
      }
    },
    "TMF629Customer_Update": {
      "type": "object",
      "description": "\nSkipped properties: id,href,id,href",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles."
        },
        "status": {
          "type": "string",
          "description": "Used to track the lifecycle status of the party role."
        },
        "statusReason": {
          "type": "string",
          "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
        },
        "validFor": {
          "$ref": "#/definitions/TMF629TimePeriod",
          "description": "The time period that the PartyRole is valid for."
        },
        "engagedParty": {
          "$ref": "#/definitions/TMF629PartyRef"
        },
        "type": {
          "$ref": "#/definitions/TMF629RoleTypeRef",
          "description": "The role type - useful only in the context of a partnership defining more than one role type."
        },
        "account": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629AccountRef"
          }
        },
        "paymentMethod": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629PaymentMethodRef"
          }
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629ContactMedium"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629Characteristic"
          },
          "description": "Describes the characteristic of a party role."
        },
        "creditProfile": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629CreditProfile"
          }
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629AgreementRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF629RelatedPartyRef"
          }
        }
      }
    },
    "TMF629TimePeriod": {
      "type": "object",
      "description": "A base / value business entity used to represent a period of time between two timepoints.",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, ending at the TimePeriod."
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, starting at the TimePeriod"
        }
      }
    },
    "TMF629PartyRef": {
      "type": "object",
      "description": "Party reference. A party represents an organization or an individual.",
      "required": [
        "id",
        "href"
      ],
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "description": {
          "type": "string",
          "description": "Text describing the referred party"
        },
        "href": {
          "type": "string",
          "description": "Reference of the referred party (such as a partner or any other party role)."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the referred party"
        },
        "name": {
          "type": "string",
          "description": "Name of the referred party (such as a partner or any other party role)"
        }
      }
    },
    "TMF629RoleTypeRef": {
      "type": "object",
      "description": "RoleType reference.",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the role type. It uniquely identifies the role type within the partnership type."
        },
        "partnershipHref": {
          "type": "string",
          "description": "Reference url of the partnership type containing the role type"
        },
        "partnershipId": {
          "type": "string",
          "description": "The identifier of the partnership type containing the role type"
        },
        "partnershipName": {
          "type": "string",
          "description": "The name of the partnership type defining this role type"
        }
      }
    },
    "TMF629AccountRef": {
      "type": "object",
      "description": "Account reference. A account may be a party account or a financial account.",
      "required": [
        "id",
        "href",
        "name"
      ],
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the account"
        },
        "href": {
          "type": "string",
          "description": "Reference of the account"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the account"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        }
      }
    },
    "TMF629PaymentMethodRef": {
      "type": "object",
      "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
      "required": [
        "id",
        "href"
      ],
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the payment mean"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the payment mean"
        },
        "name": {
          "type": "string",
          "description": "Name of the payment mean"
        }
      }
    },
    "TMF629ContactMedium": {
      "type": "object",
      "description": "Indicates the contact medium that could be used to contact the party.",
      "required": [
        "type",
        "characteristic"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "preferred": {
          "type": "boolean",
          "description": "If true, indicates that is the preferred contact medium"
        },
        "type": {
          "type": "string",
          "description": "Type of the contact medium, such as: email address, telephone number, postal address"
        },
        "validFor": {
          "$ref": "#/definitions/TMF629TimePeriod",
          "description": "The time period that the contact medium is valid for"
        },
        "characteristic": {
          "$ref": "#/definitions/TMF629MediumCharacteristic"
        }
      }
    },
    "TMF629Characteristic": {
      "type": "object",
      "description": "Describes a given characteristic of an object or entity through a name/value pair.",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the characteristic"
        },
        "value": {
          "type": "string",
          "description": "The value of the characteristic provided as a string."
        }
      }
    },
    "TMF629CreditProfile": {
      "type": "object",
      "description": "Credit profile for the party (containing credit scoring, ...). By default only the current credit profile  is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one.",
      "required": [
        "creditProfileDate",
        "validFor"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "creditProfileDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date the profile was established"
        },
        "creditRiskRating": {
          "type": "integer",
          "description": "This is an integer whose value is used to rate the risk"
        },
        "creditScore": {
          "type": "integer",
          "description": "A measure of a person's or an organization's creditworthiness calculated on the basis of a combination of factors such as their income and credit history."
        },
        "validFor": {
          "$ref": "#/definitions/TMF629TimePeriod",
          "description": "The period for which the profile is valid"
        }
      }
    },
    "TMF629AgreementRef": {
      "type": "object",
      "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the agreement"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the agreement"
        },
        "name": {
          "type": "string",
          "description": "Name of the agreement"
        }
      }
    },
    "TMF629RelatedPartyRef": {
      "type": "object",
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the related party, could be a party reference or a party role reference"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related party"
        },
        "name": {
          "type": "string",
          "description": "Name of the related party"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party."
        }
      }
    },
    "TMF629MediumCharacteristic": {
      "type": "object",
      "description": "Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city"
        },
        "country": {
          "type": "string",
          "description": "The country"
        },
        "emailAddress": {
          "type": "string",
          "description": "Full email address in standard format"
        },
        "faxNumber": {
          "type": "string",
          "description": "The fax number of the contact"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The primary phone number of the contact"
        },
        "postCode": {
          "type": "string",
          "description": "Postcode"
        },
        "stateOrProvince": {
          "type": "string",
          "description": "State or province"
        },
        "street1": {
          "type": "string",
          "description": "Describes the street"
        },
        "street2": {
          "type": "string",
          "description": "Complementary street description"
        },
        "type": {
          "type": "string",
          "description": "Type of medium (fax, mobile phone...)"
        }
      }
    },
    "TMF629EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF629EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF629Error": {
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "Application related code."
        },
        "reason": {
          "type": "integer",
          "description": "Text that explains the reason for error."
        },
        "message": {
          "type": "string",
          "description": "(optional) Text that provide more details and corrective actions related to the error."
        },
        "status": {
          "type": "integer",
          "description": "(optional) http error code extension like 400-2"
        },
        "referenceError": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        },
        "@type": {
          "type": "string",
          "description": "(optional) The class type of a REST resource."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "(optional) A link to the schema describing a REST resource."
        }
      }
    },
    "TMF632ErrorRepresentation": {
      "description": "Standard tmf error representation",
      "required": [
        "code",
        "reason"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Application related code (as defined in the API or from a common list)",
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "description": "Text that explains the reason for error. This can be shown to a client user.",
          "type": "string"
        },
        "message": {
          "description": "Text that provides more details and corrective actions related to the error. This can be shown to a client user.",
          "type": "string"
        },
        "status": {
          "description": "http error code extension like 400-2",
          "type": "string"
        },
        "referenceError": {
          "description": "url pointing to documentation describing the error",
          "type": "string"
        },
        "@type": {
          "description": "Class type of the resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF632Individual": {
      "description": "",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier for the individual",
          "type": "string"
        },
        "href": {
          "description": "Reference of th individual",
          "type": "string"
        },
        "gender": {
          "description": "Gender",
          "type": "string"
        },
        "placeOfBirth": {
          "description": "An hyperlink to the place of birth",
          "type": "string"
        },
        "countryOfBirth": {
          "description": "The country of birth",
          "type": "string"
        },
        "nationality": {
          "description": "Nationality",
          "type": "string"
        },
        "maritalStatus": {
          "description": "Marital status (married, divorced, widow ...)",
          "type": "string"
        },
        "birthDate": {
          "description": "Birth date",
          "type": "string",
          "format": "date"
        },
        "title": {
          "description": "Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ...",
          "type": "string"
        },
        "givenName": {
          "description": "First name",
          "type": "string"
        },
        "familyName": {
          "description": "Last name",
          "type": "string"
        },
        "middleName": {
          "description": "Middles names",
          "type": "string"
        },
        "fullName": {
          "description": "Full name flatten (first, middle, and last names)",
          "type": "string"
        },
        "formattedName": {
          "description": "A formatted name useful for specific contexts ( Chinese, Japanese, Korean, ...)",
          "type": "string"
        },
        "location": {
          "description": "Temporary current location od the individual (may be used if the individual has approved its sharing)",
          "type": "string"
        },
        "status": {
          "description": "Status of the individual - initialized, validated, deceased...",
          "type": "string"
        },
        "disability": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF632Disability"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF632Characteristic"
          }
        },
        "otherName": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF632OtherNameIndividual"
          }
        },
        "individualIdentification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF632IndividualIdentification"
          }
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF632ExternalReference"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF632RelatedParty"
          }
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF632ContactMedium"
          }
        }
      }
    },
    "TMF632Characteristic": {
      "description": "",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the characteristic",
          "type": "string"
        },
        "value": {
          "description": "Value of the characteristic",
          "type": "string"
        }
      }
    },
    "TMF632OtherNameIndividual": {
      "description": "",
      "type": "object",
      "properties": {
        "title": {
          "description": "Use for titles (aristrocatic, social, ...): Pr, Dr, Sir,....",
          "type": "string"
        },
        "givenName": {
          "description": "First name",
          "type": "string"
        },
        "familyName": {
          "description": "Last name",
          "type": "string"
        },
        "middleName": {
          "description": "Middle names",
          "type": "string"
        },
        "fullName": {
          "description": "Full name flatten (first, middle, and last names)",
          "type": "string"
        },
        "formattedName": {
          "description": "A formatted name useful for specific context (Chinese, Japanese, Korean,...)",
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF632ValidFor"
        }
      }
    },
    "TMF632IndividualIdentification": {
      "description": "",
      "type": "object",
      "properties": {
        "type": {
          "description": "Identification type (passport, national identity card, driver's license, ....)",
          "type": "string"
        },
        "identificationId": {
          "description": "Identifier",
          "type": "string"
        },
        "issuingAuthority": {
          "description": "Authority which has issued the identifier (social security, town hall, ...)",
          "type": "string"
        },
        "issuingDate": {
          "description": "Date at wich the identifier was issued",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TMF632ExternalReference": {
      "description": "",
      "type": "object",
      "properties": {
        "href": {
          "description": "External reference",
          "type": "string"
        },
        "type": {
          "description": "Reference type",
          "type": "string"
        }
      }
    },
    "TMF632RelatedParty": {
      "description": "",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of related party",
          "type": "string"
        },
        "href": {
          "description": "Reference of the related party, could be a party reference or a partyRole reference",
          "type": "string"
        },
        "role": {
          "description": "Role of the related party",
          "type": "string"
        },
        "name": {
          "description": "name of the related party",
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF632ValidFor"
        }
      }
    },
    "TMF632ContactMedium": {
      "description": "",
      "type": "object",
      "properties": {
        "type": {
          "description": "Email address, telephone number, postal address",
          "type": "string"
        },
        "preferred": {
          "description": "if true, indicates that is the preferres contact medium",
          "type": "boolean"
        },
        "validFor": {
          "$ref": "#/definitions/TMF632ValidFor"
        },
        "medium": {
          "$ref": "#/definitions/TMF632Medium"
        }
      }
    },
    "TMF632ValidFor": {
      "description": "",
      "type": "object",
      "properties": {
        "startDateTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "endDateTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TMF632Medium": {
      "description": "",
      "type": "object",
      "properties": {
        "city": {
          "description": "City",
          "type": "string"
        },
        "country": {
          "description": "",
          "type": "string"
        },
        "postcode": {
          "description": "Postcode",
          "type": "string"
        },
        "stateOrProvince": {
          "description": "State or province",
          "type": "string"
        },
        "streetOne": {
          "description": "Describes the street",
          "type": "string"
        },
        "streetTwo": {
          "description": "Complementary street description",
          "type": "string"
        },
        "emailAddress": {
          "description": "Full email address in standard format",
          "type": "string"
        },
        "type": {
          "description": "Type of medium (fax, mobile phone...)",
          "type": "string"
        },
        "number": {
          "description": "Phone number",
          "type": "string"
        }
      }
    },
    "TMF632Disability": {
      "description": "",
      "type": "object",
      "properties": {
        "disability": {
          "description": "Physical or mental handicap",
          "type": "string"
        }
      }
    },
    "TMF632Organization": {
      "description": "",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the organization",
          "type": "string"
        },
        "href": {
          "description": "Reference of the organization",
          "type": "string"
        },
        "isLegalEntity": {
          "description": "To tag if the organization is legal entity known by national referential",
          "type": "boolean"
        },
        "type": {
          "description": "Type of Organization (Compagny, ...)",
          "type": "string"
        },
        "existsDuring": {
          "$ref": "#/definitions/TMF632ExistsDuring"
        },
        "tradingName": {
          "description": "The name that the organization (unit) trades under",
          "type": "string"
        },
        "nameType": {
          "description": "Co, Inc, Ltd, Pty Ltd, Plc, Gmbh,....",
          "type": "string"
        },
        "status": {
          "description": "Status of the organization (initialzed, validated, closed)",
          "type": "string"
        },
        "otherName": {
          "$ref": "#/definitions/TMF632OtherNameOrganization"
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF632Characteristic"
          }
        },
        "organizationIdentification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF632OrganizationIdentification"
          }
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF632ExternalReference"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF632RelatedParty"
          }
        },
        "organizationParentRelationship": {
          "$ref": "#/definitions/TMF632OrganizationParentRelationship"
        },
        "organizationChildRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF632OrganizationChildRelationship"
          }
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF632ContactMedium"
          }
        }
      }
    },
    "TMF632ExistsDuring": {
      "description": "",
      "type": "object",
      "properties": {
        "startDateTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "endDateTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TMF632OrganizationIdentification": {
      "description": "",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of identification information used to identify the company in country or internationaly",
          "type": "string"
        },
        "identificationId": {
          "description": "Identifier",
          "type": "string"
        },
        "issuingAuthority": {
          "description": "Authority which has issued the identifier (chamber of commerce...)",
          "type": "string"
        },
        "issuingDate": {
          "description": "Date at which the identifier was issued",
          "type": "string",
          "format": "date-time"
        },
        "validFor": {
          "$ref": "#/definitions/TMF632ValidFor"
        }
      }
    },
    "TMF632OrganizationParentRelationship": {
      "description": "",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the parent organization",
          "type": "string"
        },
        "href": {
          "description": "Reference of the parent organization",
          "type": "string"
        },
        "relationshipType": {
          "description": "Juridical, hierarchical, geopraphical, functional....",
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF632ValidFor"
        }
      }
    },
    "TMF632OrganizationChildRelationship": {
      "description": "",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of child organization",
          "type": "string"
        },
        "href": {
          "description": "Reference of the child organization",
          "type": "string"
        },
        "relationshipType": {
          "description": "Juridical, hierarchcal, goegraphical, functional...",
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF632ValidFor"
        }
      }
    },
    "TMF632Hub": {
      "description": "A HUB resource is used by client side to subscribe to notification(s)",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the hub",
          "type": "string"
        },
        "callback": {
          "description": "The callback being registered",
          "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
          "type": "string"
        }
      }
    },
    "TMF632OtherNameOrganization": {
      "description": "",
      "type": "object",
      "properties": {
        "nameType": {
          "description": "Co. , Inc. , Ltd. , Pty Ltd. , Plc; , Gmbh",
          "type": "string"
        },
        "tradingName": {
          "description": "The name that the organization trades under",
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF632ValidFor"
        }
      }
    },
    "TMF632HubInput": {
      "description": "A HUB resource is used by client side to subscribe to notification(s)",
      "type": "object",
      "properties": {
        "callback": {
          "description": "The callback being registered",
          "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
          "type": "string"
        }
      }
    },
    "TMF633ServiceCatalog": {
      "type": "object",
      "description": "The root entity for service catalog management.\nA service catalog is a group of service specifications made available through service candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers). \nA service catalog typically includes name, description and time period that is valid for. It will have a list of ServiceCandidate catalog items. A ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.\nA ServiceCandidate and its associated ServiceSpecification may be \"published\" - made visible -in any number of ServiceCatalogs, or in none.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the Catalog"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the catalog"
        },
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of catalog. For service catalogs, this will be 'ServiceCatalog'."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Indicates<b> </b>the base (class) type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Catalog version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF633TimePeriod",
          "description": "The period for which the catalog is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        }
      }
    },
    "TMF633ServiceCatalog_Create": {
      "type": "object",
      "description": "The root entity for service catalog management.\nA service catalog is a group of service specifications made available through service candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers). \nA service catalog typically includes name, description and time period that is valid for. It will have a list of ServiceCandidate catalog items. A ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.\nA ServiceCandidate and its associated ServiceSpecification may be \"published\" - made visible -in any number of ServiceCatalogs, or in none.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of catalog. For service catalogs, this will be 'ServiceCatalog'."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Indicates<b> </b>the base (class) type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Catalog version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF633TimePeriod",
          "description": "The period for which the catalog is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        }
      }
    },
    "TMF633ServiceCatalog_Update": {
      "type": "object",
      "description": "The root entity for service catalog management.\nA service catalog is a group of service specifications made available through service candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers). \nA service catalog typically includes name, description and time period that is valid for. It will have a list of ServiceCandidate catalog items. A ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.\nA ServiceCandidate and its associated ServiceSpecification may be \"published\" - made visible -in any number of ServiceCatalogs, or in none.\nSkipped properties: id,href,id,href,@type,lastUpdate",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Indicates<b> </b>the base (class) type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Catalog version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF633TimePeriod",
          "description": "The period for which the catalog is valid"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        }
      }
    },
    "TMF633ServiceCategory": {
      "type": "object",
      "description": "The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the category"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the category"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of this category"
        },
        "@schemalLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base class type of this category"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF633TimePeriod",
          "description": "The period for which the category is valid"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633RelatedPartyRef"
          }
        },
        "serviceCandidate": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633ServiceCandidateRef"
          }
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633CategoryRef"
          }
        }
      }
    },
    "TMF633ServiceCategory_Create": {
      "type": "object",
      "description": "The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of this category"
        },
        "@schemalLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base class type of this category"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF633TimePeriod",
          "description": "The period for which the category is valid"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633RelatedPartyRef"
          }
        },
        "serviceCandidate": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633ServiceCandidateRef"
          }
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633CategoryRef"
          }
        }
      }
    },
    "TMF633ServiceCategory_Update": {
      "type": "object",
      "description": "The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories.\nSkipped properties: id,href,id,href,@type,lastUpdate",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        },
        "@schemalLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base class type of this category"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF633TimePeriod",
          "description": "The period for which the category is valid"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633RelatedPartyRef"
          }
        },
        "serviceCandidate": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633ServiceCandidateRef"
          }
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633CategoryRef"
          }
        }
      }
    },
    "TMF633ServiceCandidate": {
      "type": "object",
      "description": "ServiceCandidate is an entity that makes a service specification available to a catalog. A\nServiceCandidate and its associated service specification may be published - made visible - in any number of service catalogs, or in none. One service specification can be composed of other service specifications.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of this REST resource"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to this REST resource"
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "the version of service candidate"
        },
        "validFor": {
          "$ref": "#/definitions/TMF633TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the service candidate."
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633CategoryRef"
          }
        },
        "serviceSpecification": {
          "$ref": "#/definitions/TMF633ServiceSpecificationRef"
        }
      }
    },
    "TMF633ServiceCandidate_Create": {
      "type": "object",
      "description": "ServiceCandidate is an entity that makes a service specification available to a catalog. A\nServiceCandidate and its associated service specification may be published - made visible - in any number of service catalogs, or in none. One service specification can be composed of other service specifications.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "the version of service candidate"
        },
        "validFor": {
          "$ref": "#/definitions/TMF633TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the service candidate."
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633CategoryRef"
          }
        },
        "serviceSpecification": {
          "$ref": "#/definitions/TMF633ServiceSpecificationRef"
        }
      }
    },
    "TMF633ServiceCandidate_Update": {
      "type": "object",
      "description": "ServiceCandidate is an entity that makes a service specification available to a catalog. A\nServiceCandidate and its associated service specification may be published - made visible - in any number of service catalogs, or in none. One service specification can be composed of other service specifications.\nSkipped properties: id,href,id,href,@type,lastUpdate",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "the version of service candidate"
        },
        "validFor": {
          "$ref": "#/definitions/TMF633TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the service candidate."
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633CategoryRef"
          }
        },
        "serviceSpecification": {
          "$ref": "#/definitions/TMF633ServiceSpecificationRef"
        }
      }
    },
    "TMF633ServiceSpecification": {
      "type": "object",
      "description": "ServiceSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same  specification, these services would therefore share the same set of characteristics.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of this REST resource"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to this REST resource"
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Service specification version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF633TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the service specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this service specification is a bundled specification (true) or single (false)."
        },
        "resourceSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633ResourceSpecificationRef"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633Attachment"
          }
        },
        "serviceSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633ServiceSpecCharacteristic"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633RelatedPartyRef"
          }
        },
        "serviceSpecRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633ServiceSpecRelationship"
          }
        },
        "targetServiceSchema": {
          "$ref": "#/definitions/TMF633TargetServiceSchemaRef"
        }
      }
    },
    "TMF633ServiceSpecification_Create": {
      "type": "object",
      "description": "ServiceSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same  specification, these services would therefore share the same set of characteristics.\nSkipped properties: id,href",
      "required": [
        "name",
        "@type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Service specification version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF633TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the service specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this service specification is a bundled specification (true) or single (false)."
        },
        "resourceSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633ResourceSpecificationRef"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633Attachment"
          }
        },
        "serviceSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633ServiceSpecCharacteristic"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633RelatedPartyRef"
          }
        },
        "serviceSpecRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633ServiceSpecRelationship"
          }
        },
        "targetServiceSchema": {
          "$ref": "#/definitions/TMF633TargetServiceSchemaRef"
        }
      }
    },
    "TMF633ServiceSpecification_Update": {
      "type": "object",
      "description": "ServiceSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same  specification, these services would therefore share the same set of characteristics.\nSkipped properties: id,href,id,href,lastUpdate,@type",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Service specification version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF633TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the service specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this service specification is a bundled specification (true) or single (false)."
        },
        "resourceSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633ResourceSpecificationRef"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633Attachment"
          }
        },
        "serviceSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633ServiceSpecCharacteristic"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633RelatedPartyRef"
          }
        },
        "serviceSpecRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633ServiceSpecRelationship"
          }
        },
        "targetServiceSchema": {
          "$ref": "#/definitions/TMF633TargetServiceSchemaRef"
        }
      }
    },
    "TMF633ImportJob": {
      "type": "object",
      "description": "Represents a task used to import resources from a file",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the import job"
        },
        "href": {
          "type": "string",
          "description": "Reference of the import job"
        },
        "contentType": {
          "type": "string",
          "description": "Indicates the format of the imported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource where the content of the file specified by the import job must be applied"
        },
        "status": {
          "type": "string",
          "description": "Status of the import job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be imported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure if status is failed"
        }
      }
    },
    "TMF633ImportJob_Create": {
      "type": "object",
      "description": "Represents a task used to import resources from a file\nSkipped properties: id,href",
      "required": [
        "url"
      ],
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Indicates the format of the imported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource where the content of the file specified by the import job must be applied"
        },
        "status": {
          "type": "string",
          "description": "Status of the import job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be imported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure if status is failed"
        }
      }
    },
    "TMF633ExportJob": {
      "type": "object",
      "description": "Represents a task used to export resources to a file",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the export job"
        },
        "href": {
          "type": "string",
          "description": "Reference of the export job"
        },
        "query": {
          "type": "string",
          "description": "Used to scope the exported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
        },
        "contentType": {
          "type": "string",
          "description": "The format of the exported data"
        },
        "status": {
          "type": "string",
          "description": "Status of the export job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be exported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Data at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure"
        }
      }
    },
    "TMF633ExportJob_Create": {
      "type": "object",
      "description": "Represents a task used to export resources to a file\nSkipped properties: id,href",
      "required": [
        "url"
      ],
      "properties": {
        "query": {
          "type": "string",
          "description": "Used to scope the exported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
        },
        "contentType": {
          "type": "string",
          "description": "The format of the exported data"
        },
        "status": {
          "type": "string",
          "description": "Status of the export job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be exported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Data at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure"
        }
      }
    },
    "TMF633TimePeriod": {
      "type": "object",
      "description": "A base / value business entity used to represent a period of time between two timepoints.",
      "properties": {
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, starting at the TimePeriod"
        },
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, ending at the TimePeriod."
        }
      }
    },
    "TMF633RelatedPartyRef": {
      "type": "object",
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of a related party"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related party, could be a party reference or a party role reference"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party."
        },
        "name": {
          "type": "string",
          "description": "Name of the related party"
        },
        "validFor": {
          "$ref": "#/definitions/TMF633TimePeriod",
          "description": "Validity period of the related party"
        }
      }
    },
    "TMF633ServiceCandidateRef": {
      "type": "object",
      "description": "reference to ServiceCandidate object",
      "properties": {
        "id": {
          "type": "string",
          "description": "reference id to the target ServiceCandidate"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the target ServiceCandidate"
        },
        "version": {
          "type": "string",
          "description": "ServiceCandidate version"
        },
        "name": {
          "type": "string",
          "description": "Name given to the ServiceCandidate"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of the ServiceCandidate"
        }
      }
    },
    "TMF633CategoryRef": {
      "type": "object",
      "description": "Category reference. The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique reference of the category"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the category"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        }
      }
    },
    "TMF633ServiceSpecificationRef": {
      "type": "object",
      "description": "reference to  ServiceSpecification object",
      "properties": {
        "id": {
          "type": "string",
          "description": "reference id to the target ServiceSpecification"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the target ServiceSpecification"
        },
        "version": {
          "type": "string",
          "description": "ServiceSpecification version"
        },
        "name": {
          "type": "string",
          "description": "Name given to the ServiceSpecification"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of the ServiceSpecification"
        }
      }
    },
    "TMF633ResourceSpecificationRef": {
      "type": "object",
      "description": "Resource Specification reference: The ResourceSpecification is required to realize a ProductSpecification.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the resource specification"
        },
        "href": {
          "type": "string",
          "description": "Reference of the resource specification"
        },
        "name": {
          "type": "string",
          "description": "Name of the requiredResourceSpecification"
        },
        "version": {
          "type": "string",
          "description": "Resource specification version"
        }
      }
    },
    "TMF633Attachment": {
      "type": "object",
      "description": "Complements the description of an element (for instance a product) through video, pictures...",
      "properties": {
        "description": {
          "type": "string",
          "description": "A narrative text describing the content of the attachment"
        },
        "href": {
          "type": "string",
          "description": "Reference of the attachment"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the attachment"
        },
        "type": {
          "type": "string",
          "description": "Attachment type such as video, picture"
        },
        "url": {
          "type": "string",
          "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
        }
      }
    },
    "TMF633ServiceSpecCharacteristic": {
      "type": "object",
      "description": "This class represents the key features of this service specification. For example, bandwidth is a characteristic of many different types of services; if bandwidth is a relevant characteristic (e.g., from the point-of-view of a Customer obtaining this Service via a Product) then bandwidth would be a ServiceSpecCharacteristic for that particular Service.",
      "properties": {
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the ServiceSpecCharacteristic is"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
        },
        "configurable": {
          "type": "boolean",
          "description": "If true, the Boolean indicates that the ServiceSpecCharacteristic is configurable"
        },
        "validFor": {
          "$ref": "#/definitions/TMF633TimePeriod",
          "description": "The period for which the ServiceSpecCharacteristic is valid"
        },
        "@type": {
          "type": "string",
          "description": "(Class) type of the ServiceSpecCharacteristic"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this characteristic"
        },
        "@valueSchemaLocation": {
          "type": "string",
          "description": "This (optional) field provides a link to the schema describing the value type."
        },
        "minCardinality": {
          "type": "integer",
          "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
        },
        "maxCardinality": {
          "type": "integer",
          "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
        },
        "isUnique": {
          "type": "boolean",
          "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
        },
        "regex": {
          "type": "string",
          "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
        },
        "extensible": {
          "type": "boolean",
          "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for an Entity."
        },
        "serviceSpecCharacteristicValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633ServiceSpecCharacteristicValue"
          }
        },
        "serviceSpecCharRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF633ServiceSpecCharRelationship"
          }
        }
      }
    },
    "TMF633ServiceSpecRelationship": {
      "type": "object",
      "description": "A migration, substitution, dependency or exclusivity relationship between/among service specifications.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
        },
        "role": {
          "type": "string",
          "description": "The association role for this service specification"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of target ServiceSpecification"
        },
        "href": {
          "type": "string",
          "description": "Reference of the target ServiceSpecification"
        },
        "name": {
          "type": "string",
          "description": "The name given to the target service specification instance"
        },
        "validFor": {
          "$ref": "#/definitions/TMF633TimePeriod",
          "description": "The period for which the ServiceSpecRelationship is valid"
        }
      }
    },
    "TMF633TargetServiceSchemaRef": {
      "type": "object",
      "description": "The reference object to the schema and type of target service which is described by service specification",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Class type of the target service"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing the target service"
        }
      }
    },
    "TMF633ServiceSpecCharacteristicValue": {
      "type": "object",
      "description": "A ServiceSpecCharacteristicValue object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a ServiceSpecCharacteristic object. The values of the attributes in the ServiceSpecCharacteristicValue object describe the values of the attributes that a corresponding ServiceSpecCharacteristic object can take on.",
      "properties": {
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
        },
        "isDefault": {
          "type": "boolean",
          "description": "If true, the Boolean Indicates if the value is the default value for a characteristic"
        },
        "value": {
          "type": "object",
          "description": "the  value that the characteristic can take on."
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
        },
        "validFor": {
          "$ref": "#/definitions/TMF633TimePeriod",
          "description": "The period of time for which a value is applicable."
        },
        "valueFrom": {
          "type": "integer",
          "description": "The low range value that a characteristic can take on"
        },
        "valueTo": {
          "type": "integer",
          "description": "The upper range value that a characteristic can take on"
        },
        "rangeInterval": {
          "type": "string",
          "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
        },
        "regex": {
          "type": "string",
          "description": "A regular expression constraint for given value"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the characteristic value"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Hyperlink reference to schema describing this object."
        }
      }
    },
    "TMF633ServiceSpecCharRelationship": {
      "type": "object",
      "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
        },
        "name": {
          "type": "string",
          "description": "Name of the target  characteristic"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the target specification"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the target specification"
        },
        "@type": {
          "type": "string",
          "description": "class type of target specification"
        },
        "validFor": {
          "$ref": "#/definitions/TMF633TimePeriod",
          "description": "The period for which the object is valid"
        }
      }
    },
    "TMF633EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF633EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF633Error": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "An integer coding the error type. This is given to caller so he can translate them if required."
        },
        "message": {
          "type": "string",
          "description": "A short localized string that describes the error."
        },
        "description": {
          "type": "string",
          "description": "(optional) A long localized error description if needed. It can contain precise information about which parameter is missing, or what are the identifier acceptable values."
        },
        "infoURL": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        }
      }
    },
    "TMF634ResourceCatalog": {
      "type": "object",
      "description": "The root entity for resource catalog management.\nA resource catalog is a group of resource specifications made available through resource candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the Catalog"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the catalog"
        },
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of catalog. For resource catalogs, this will be 'ResourceCatalog'."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Indicates<b> </b>the base (class) type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Catalog version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which the catalog is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634RelatedPartyRef"
          }
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634CategoryRef"
          }
        }
      }
    },
    "TMF634ResourceCatalog_Create": {
      "type": "object",
      "description": "The root entity for resource catalog management.\nA resource catalog is a group of resource specifications made available through resource candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers).\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of catalog. For resource catalogs, this will be 'ResourceCatalog'."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Indicates<b> </b>the base (class) type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Catalog version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which the catalog is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634RelatedPartyRef"
          }
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634CategoryRef"
          }
        }
      }
    },
    "TMF634ResourceCatalog_Update": {
      "type": "object",
      "description": "The root entity for resource catalog management.\nA resource catalog is a group of resource specifications made available through resource candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers).\nSkipped properties: id,href,id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of catalog. For resource catalogs, this will be 'ResourceCatalog'."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Indicates<b> </b>the base (class) type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Catalog version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which the catalog is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634RelatedPartyRef"
          }
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634CategoryRef"
          }
        }
      }
    },
    "TMF634ResourceCategory": {
      "type": "object",
      "description": "The (resource) category resource is used to group resource candidates in logical containers. Categories can contain other categories.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the category"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the category"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of this category"
        },
        "@schemalLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base class type of this category"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which the category is valid"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634CategoryRef"
          }
        },
        "resourceCandidate": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceCandidateRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634RelatedPartyRef"
          }
        }
      }
    },
    "TMF634ResourceCategory_Create": {
      "type": "object",
      "description": "The (resource) category resource is used to group resource candidates in logical containers. Categories can contain other categories.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of this category"
        },
        "@schemalLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base class type of this category"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which the category is valid"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634CategoryRef"
          }
        },
        "resourceCandidate": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceCandidateRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634RelatedPartyRef"
          }
        }
      }
    },
    "TMF634ResourceCategory_Update": {
      "type": "object",
      "description": "The (resource) category resource is used to group resource candidates in logical containers. Categories can contain other categories.\nSkipped properties: id,href,id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of this category"
        },
        "@schemalLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base class type of this category"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which the category is valid"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634CategoryRef"
          }
        },
        "resourceCandidate": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceCandidateRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634RelatedPartyRef"
          }
        }
      }
    },
    "TMF634ResourceCandidate": {
      "type": "object",
      "description": "ResourceCandidate is an entity that makes a resource specification available to a catalog. A ResourceCandidate and its associated resource specification may be published - made visible - in any number of resource catalogs, or in none.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of this REST resource"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to this REST resource"
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "the version of resource candidate"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource candidate."
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634CategoryRef"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/TMF634ResourceSpecificationRef"
        }
      }
    },
    "TMF634ResourceCandidate_Create": {
      "type": "object",
      "description": "ResourceCandidate is an entity that makes a resource specification available to a catalog. A ResourceCandidate and its associated resource specification may be published - made visible - in any number of resource catalogs, or in none.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "the version of resource candidate"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource candidate."
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634CategoryRef"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/TMF634ResourceSpecificationRef"
        }
      }
    },
    "TMF634ResourceCandidate_Update": {
      "type": "object",
      "description": "ResourceCandidate is an entity that makes a resource specification available to a catalog. A ResourceCandidate and its associated resource specification may be published - made visible - in any number of resource catalogs, or in none.\nSkipped properties: id,href,id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "the version of resource candidate"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource candidate."
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634CategoryRef"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/TMF634ResourceSpecificationRef"
        }
      }
    },
    "TMF634ResourceSpecification": {
      "type": "object",
      "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is an abstract base class for representing a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of this REST resource"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to this REST resource"
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Resource Specification version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "targetResourceSchema": {
          "$ref": "#/definitions/TMF634TargetResourceSchemaRef"
        },
        "feature": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634Feature"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634Attachment"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634RelatedPartyRef"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecRelationship"
          }
        }
      }
    },
    "TMF634ResourceSpecification_Create": {
      "type": "object",
      "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is an abstract base class for representing a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification.\nSkipped properties: id,href",
      "required": [
        "name",
        "@type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Resource Specification version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "targetResourceSchema": {
          "$ref": "#/definitions/TMF634TargetResourceSchemaRef"
        },
        "feature": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634Feature"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634Attachment"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634RelatedPartyRef"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecRelationship"
          }
        }
      }
    },
    "TMF634ResourceSpecification_Update": {
      "type": "object",
      "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is an abstract base class for representing a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification.\nSkipped properties: id,href,id,href,lastUpdate,@type",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Resource Specification version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "targetResourceSchema": {
          "$ref": "#/definitions/TMF634TargetResourceSchemaRef"
        },
        "feature": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634Feature"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634Attachment"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634RelatedPartyRef"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecRelationship"
          }
        }
      }
    },
    "TMF634PhysicalResourceSpec": {
      "type": "object",
      "description": "This is a concrete class that is used to define the invariant characteristics and behavior (attributes, methods, constraints, and relationships) of a PhysicalResource.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of this REST resource"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to this REST resource"
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Resource Specification version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "model": {
          "type": "string",
          "description": "This is a string that represents a manufacturer-allocated number used to identify the general type and/or category of the hardware item. This, in combination with the Part and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is an optional attribute."
        },
        "part": {
          "type": "string",
          "description": "This is a string that defines a manufacturer-allocated part number assigned by the organization that manufactures the hardware item. This, in combination with the Model and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute."
        },
        "sku": {
          "type": "string",
          "description": "This is a string that defines the manufacturer-allocated Stock Keeping Unit (SKU) number of the hardware item. This is an optional attribute."
        },
        "vendor": {
          "type": "string",
          "description": "This is a string that defines the name of the manufacturer. This, in combination with the Model and the Part, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute for a physical resource."
        },
        "place": {
          "$ref": "#/definitions/TMF634PlaceRef"
        },
        "targetResourceSchema": {
          "$ref": "#/definitions/TMF634TargetResourceSchemaRef"
        },
        "feature": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634Feature"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634Attachment"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634RelatedPartyRef"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecRelationship"
          }
        }
      }
    },
    "TMF634PhysicalResourceSpec_Create": {
      "type": "object",
      "description": "This is a concrete class that is used to define the invariant characteristics and behavior (attributes, methods, constraints, and relationships) of a PhysicalResource.\nSkipped properties: id,href",
      "required": [
        "name",
        "@type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Resource Specification version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "model": {
          "type": "string",
          "description": "This is a string that represents a manufacturer-allocated number used to identify the general type and/or category of the hardware item. This, in combination with the Part and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is an optional attribute."
        },
        "part": {
          "type": "string",
          "description": "This is a string that defines a manufacturer-allocated part number assigned by the organization that manufactures the hardware item. This, in combination with the Model and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute."
        },
        "sku": {
          "type": "string",
          "description": "This is a string that defines the manufacturer-allocated Stock Keeping Unit (SKU) number of the hardware item. This is an optional attribute."
        },
        "vendor": {
          "type": "string",
          "description": "This is a string that defines the name of the manufacturer. This, in combination with the Model and the Part, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute for a physical resource."
        },
        "place": {
          "$ref": "#/definitions/TMF634PlaceRef"
        },
        "targetResourceSchema": {
          "$ref": "#/definitions/TMF634TargetResourceSchemaRef"
        },
        "feature": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634Feature"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634Attachment"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634RelatedPartyRef"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecRelationship"
          }
        }
      }
    },
    "TMF634PhysicalResourceSpec_Update": {
      "type": "object",
      "description": "This is a concrete class that is used to define the invariant characteristics and behavior (attributes, methods, constraints, and relationships) of a PhysicalResource.\nSkipped properties: id,href,id,href,lastUpdate,@type",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Resource Specification version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "model": {
          "type": "string",
          "description": "This is a string that represents a manufacturer-allocated number used to identify the general type and/or category of the hardware item. This, in combination with the Part and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is an optional attribute."
        },
        "part": {
          "type": "string",
          "description": "This is a string that defines a manufacturer-allocated part number assigned by the organization that manufactures the hardware item. This, in combination with the Model and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute."
        },
        "sku": {
          "type": "string",
          "description": "This is a string that defines the manufacturer-allocated Stock Keeping Unit (SKU) number of the hardware item. This is an optional attribute."
        },
        "vendor": {
          "type": "string",
          "description": "This is a string that defines the name of the manufacturer. This, in combination with the Model and the Part, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute for a physical resource."
        },
        "place": {
          "$ref": "#/definitions/TMF634PlaceRef"
        },
        "targetResourceSchema": {
          "$ref": "#/definitions/TMF634TargetResourceSchemaRef"
        },
        "feature": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634Feature"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634Attachment"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634RelatedPartyRef"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecRelationship"
          }
        }
      }
    },
    "TMF634LogicalResourceSpec": {
      "type": "object",
      "description": "This is a base class that is used to define the invariant characteristics and behavior (attributes, methods, constraints, and relationships) of a LogicalResource.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of this REST resource"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to this REST resource"
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Resource Specification version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "targetResourceSchema": {
          "$ref": "#/definitions/TMF634TargetResourceSchemaRef"
        },
        "feature": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634Feature"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634Attachment"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634RelatedPartyRef"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecRelationship"
          }
        }
      }
    },
    "TMF634LogicalResourceSpec_Create": {
      "type": "object",
      "description": "This is a base class that is used to define the invariant characteristics and behavior (attributes, methods, constraints, and relationships) of a LogicalResource.\nSkipped properties: id,href",
      "required": [
        "name",
        "@type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Resource Specification version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "targetResourceSchema": {
          "$ref": "#/definitions/TMF634TargetResourceSchemaRef"
        },
        "feature": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634Feature"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634Attachment"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634RelatedPartyRef"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecRelationship"
          }
        }
      }
    },
    "TMF634LogicalResourceSpec_Update": {
      "type": "object",
      "description": "This is a base class that is used to define the invariant characteristics and behavior (attributes, methods, constraints, and relationships) of a LogicalResource.\nSkipped properties: id,href,id,href,lastUpdate,@type",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Resource Specification version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "targetResourceSchema": {
          "$ref": "#/definitions/TMF634TargetResourceSchemaRef"
        },
        "feature": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634Feature"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634Attachment"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634RelatedPartyRef"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecRelationship"
          }
        }
      }
    },
    "TMF634ImportJob": {
      "type": "object",
      "description": "Represents a task used to import resources from a file",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the import job"
        },
        "href": {
          "type": "string",
          "description": "Reference of the import job"
        },
        "contentType": {
          "type": "string",
          "description": "Indicates the format of the imported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource where the content of the file specified by the import job must be applied"
        },
        "status": {
          "type": "string",
          "description": "Status of the import job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be imported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure if status is failed"
        }
      }
    },
    "TMF634ImportJob_Create": {
      "type": "object",
      "description": "Represents a task used to import resources from a file\nSkipped properties: id,href",
      "required": [
        "url"
      ],
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Indicates the format of the imported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource where the content of the file specified by the import job must be applied"
        },
        "status": {
          "type": "string",
          "description": "Status of the import job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be imported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure if status is failed"
        }
      }
    },
    "TMF634ExportJob": {
      "type": "object",
      "description": "Represents a task used to export resources to a file",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the export job"
        },
        "href": {
          "type": "string",
          "description": "Reference of the export job"
        },
        "query": {
          "type": "string",
          "description": "Used to scope the exported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
        },
        "contentType": {
          "type": "string",
          "description": "The format of the exported data"
        },
        "status": {
          "type": "string",
          "description": "Status of the export job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be exported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Data at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure"
        }
      }
    },
    "TMF634ExportJob_Create": {
      "type": "object",
      "description": "Represents a task used to export resources to a file\nSkipped properties: id,href",
      "required": [
        "url"
      ],
      "properties": {
        "query": {
          "type": "string",
          "description": "Used to scope the exported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
        },
        "contentType": {
          "type": "string",
          "description": "The format of the exported data"
        },
        "status": {
          "type": "string",
          "description": "Status of the export job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be exported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Data at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure"
        }
      }
    },
    "TMF634TimePeriod": {
      "type": "object",
      "description": "A base / value business entity used to represent a period of time between two timepoints.",
      "properties": {
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, starting at the TimePeriod"
        },
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, ending at the TimePeriod."
        }
      }
    },
    "TMF634RelatedPartyRef": {
      "type": "object",
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of a related party"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related party, could be a party reference or a party role reference"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party."
        },
        "name": {
          "type": "string",
          "description": "Name of the related party"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "Validity period of the related party"
        }
      }
    },
    "TMF634CategoryRef": {
      "type": "object",
      "description": "Category reference. The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique reference of the category"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the category"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        }
      }
    },
    "TMF634ResourceCandidateRef": {
      "type": "object",
      "description": "ResourceCandidate reference: A resource candidate is an entity that makes a ResourceSpecification available to a catalog.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the resource candidate"
        },
        "href": {
          "type": "string",
          "description": "Reference of the resource candidate"
        },
        "version": {
          "type": "string",
          "description": "Version of the resource candidate"
        },
        "name": {
          "type": "string",
          "description": "Name of the resource candidate"
        }
      }
    },
    "TMF634ResourceSpecificationRef": {
      "type": "object",
      "description": "Resource Specification reference: The ResourceSpecification is required to realize a ProductSpecification.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the resource specification"
        },
        "href": {
          "type": "string",
          "description": "Reference of the resource specification"
        },
        "name": {
          "type": "string",
          "description": "Name of the requiredResourceSpecification"
        },
        "version": {
          "type": "string",
          "description": "Resource specification version"
        }
      }
    },
    "TMF634TargetResourceSchemaRef": {
      "type": "object",
      "description": "The reference object to the schema and type of target resource which is described by resource specification",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Class type of the target resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing the target resource"
        }
      }
    },
    "TMF634Feature": {
      "type": "object",
      "description": "applicable feature(s) for this resource specification.",
      "properties": {
        "id": {
          "type": "string",
          "description": "reference id to the feature. It is optional if the feature is not defined as a stand-alone object."
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the target feature. It is optional if the feature is not defined as a separate REST resource."
        },
        "version": {
          "type": "string",
          "description": "feature version"
        },
        "name": {
          "type": "string",
          "description": "Unique name given to the feature. it is Required if the feature is not introduced as a separate REST resource"
        },
        "@type": {
          "type": "string",
          "description": "The optional (class) type of the feature"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicating if the feature is bundle (true) or not (false)."
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which this relationship is valid"
        },
        "isEnabled": {
          "type": "boolean",
          "description": "A flag indicating if the feature is enabled (true) or not (false)."
        }
      }
    },
    "TMF634Attachment": {
      "type": "object",
      "description": "Complements the description of an element (for instance a product) through video, pictures...",
      "properties": {
        "description": {
          "type": "string",
          "description": "A narrative text describing the content of the attachment"
        },
        "href": {
          "type": "string",
          "description": "Reference of the attachment"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the attachment"
        },
        "type": {
          "type": "string",
          "description": "Attachment type such as video, picture"
        },
        "url": {
          "type": "string",
          "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
        }
      }
    },
    "TMF634ResourceSpecCharacteristic": {
      "type": "object",
      "description": "This class defines the characteristic features of a resource specification. Every ResourceSpecification has a variety of important attributes, methods, constraints, and\nrelationships, which distinguish a resource specification from other resource specifications.",
      "properties": {
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains the CharacteristicSpecification."
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
        },
        "configurable": {
          "type": "boolean",
          "description": "If true, the Boolean indicates that the ResourceSpecCharacteristic is configurable"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period of time for which a characteristic is applicable."
        },
        "@type": {
          "type": "string",
          "description": "(Class) type of the ResourceSpecCharacteristic"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this characteristic specification"
        },
        "@valueSchemaLocation": {
          "type": "string",
          "description": "This (optional) field provides a link to the schema describing the value type"
        },
        "minCardinality": {
          "type": "integer",
          "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
        },
        "maxCardinality": {
          "type": "integer",
          "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
        },
        "isUnique": {
          "type": "boolean",
          "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
        },
        "regex": {
          "type": "string",
          "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
        },
        "extensible": {
          "type": "boolean",
          "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
        },
        "resourceSpecCharRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecCharRelationship"
          }
        },
        "resourceSpecCharacteristicValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF634ResourceSpecCharacteristicValue"
          }
        }
      }
    },
    "TMF634ResourceSpecRelationship": {
      "type": "object",
      "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
        },
        "role": {
          "type": "string",
          "description": "The association role for this resource specification"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of target ResourceSpecification"
        },
        "href": {
          "type": "string",
          "description": "Reference of the target ResourceSpecification"
        },
        "name": {
          "type": "string",
          "description": "The name given to the target resource specification instance"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which the ResourceSpecRelationship is valid"
        }
      }
    },
    "TMF634ResourceSpecCharRelationship": {
      "type": "object",
      "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
        },
        "name": {
          "type": "string",
          "description": "Name of the target characteristic"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the target specification"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the target specification"
        },
        "@type": {
          "type": "string",
          "description": "class type of target specification"
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period for which the object is valid"
        }
      }
    },
    "TMF634ResourceSpecCharacteristicValue": {
      "type": "object",
      "description": "A number or text that can be assigned to a ResourceSpecCharacteristic.",
      "properties": {
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
        },
        "isDefault": {
          "type": "boolean",
          "description": "If true, the Boolean Indicates if the value is the default value for a characteristic"
        },
        "value": {
          "type": "object",
          "description": "The value that the characteristic can take on. If the value is a complex type, the definition of the type should be found by the link as defined in @schemaLocation"
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
        },
        "validFor": {
          "$ref": "#/definitions/TMF634TimePeriod",
          "description": "The period of time for which a value is applicable."
        },
        "valueFrom": {
          "type": "integer",
          "description": "The low range value that a characteristic can take on"
        },
        "valueTo": {
          "type": "integer",
          "description": "The upper range value that a characteristic can take on"
        },
        "rangeInterval": {
          "type": "string",
          "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
        },
        "regex": {
          "type": "string",
          "description": "A regular expression constraint for given value"
        },
        "@type": {
          "type": "string",
          "description": "The class type of a complex value type"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This (optional) field provides a link to the schema describing the value type"
        }
      }
    },
    "TMF634PlaceRef": {
      "type": "object",
      "description": "Place reference. Place defines the places where the products are sold or delivered.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the place"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the place"
        },
        "name": {
          "type": "string",
          "description": "A user-friendly name for the place, such as \"Paris Store\", \"London Store\", \"Main Home\""
        },
        "role": {
          "type": "string",
          "description": "Role of the place (for instance: 'home delivery', 'shop retrieval')"
        }
      }
    },
    "TMF634EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF634EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF634Error": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "An integer coding the error type. This is given to caller so he can translate them if required."
        },
        "message": {
          "type": "string",
          "description": "A short localized string that describes the error."
        },
        "description": {
          "type": "string",
          "description": "(optional) A long localized error description if needed. It can contain precise information about which parameter is missing, or what are the identifier acceptable values."
        },
        "infoURL": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        }
      }
    },
    "TMF635Usage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Received",
            "Rejected",
            "Recycled",
            "Guided",
            "Rated",
            "Rerate",
            "Billed"
          ]
        },
        "usageSpecification": {
          "$ref": "#/definitions/TMF635UsageSpecificationRef"
        },
        "usageCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF635UsageCharacteristic"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF635Reference"
          }
        },
        "ratedProductUsage": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF635RatedProductUsage"
          }
        }
      }
    },
    "TMF635UsageSpecification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF635ValidFor"
        },
        "usageSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF635UsageSpecCharacteristic"
          }
        }
      }
    },
    "TMF635UsageSpecificationRef": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "TMF635RatedProductUsage": {
      "type": "object",
      "properties": {
        "ratingDate": {
          "type": "string",
          "format": "date-time"
        },
        "usageRatingTag": {
          "type": "string"
        },
        "isBilled": {
          "type": "boolean"
        },
        "ratingAmountType": {
          "type": "string"
        },
        "taxIncludedRatingAmount": {
          "type": "number",
          "format": "float"
        },
        "taxExcludedRatingAmount": {
          "type": "number",
          "format": "float"
        },
        "taxRate": {
          "type": "number",
          "format": "float"
        },
        "isTaxExempt": {
          "type": "boolean"
        },
        "offerTariffType": {
          "type": "string"
        },
        "bucketValueConvertedInAmount": {
          "type": "number",
          "format": "float"
        },
        "currencyCode": {
          "type": "string"
        },
        "productRef": {
          "type": "string"
        }
      }
    },
    "TMF635Reference": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF635ValidFor"
        }
      }
    },
    "TMF635UsageCharacteristic": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "TMF635UsageSpecCharacteristic": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "configurable": {
          "type": "boolean"
        },
        "usageSpecCharacteristicValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF635UsageSpecCharacteristicValue"
          }
        }
      }
    },
    "TMF635UsageSpecCharacteristicValue": {
      "type": "object",
      "properties": {
        "valueType": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        },
        "valueFrom": {
          "type": "string"
        },
        "valueTo": {
          "type": "string"
        }
      }
    },
    "TMF635ValidFor": {
      "type": "object",
      "properties": {
        "startDateTime": {
          "type": "string",
          "format": "date-time"
        },
        "endDateTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TMF635Hub": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "callback": {
          "type": "string"
        },
        "query": {
          "type": "string"
        }
      }
    },
    "TMF637StatusType": {
      "description": "",
      "type": "string",
      "enum": [
        "created",
        "pendingActive",
        "cancelled",
        "active",
        "pendingTerminate",
        "terminated",
        "suspended",
        "aborted"
      ]
    },
    "TMF637ErrorRepresentation": {
      "description": "Error Representation",
      "required": [
        "code",
        "reason"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "description": "",
          "type": "string"
        },
        "message": {
          "description": "",
          "type": "string"
        },
        "status": {
          "description": "",
          "type": "string"
        },
        "referenceError": {
          "description": "",
          "type": "string"
        },
        "@type": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF637Product": {
      "description": "A Product represents the subscription of a ProductOffering by a Party playing a PartyRole, such as a Customer.  For example, Jean has subscribed to company ABC’s internet ProductOffering.\nThe association between ProductSpecification and Product allows ProductSpecification, to be instantiated as Product and related to customers or other involved parties.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product",
          "type": "string"
        },
        "description": {
          "description": "The description of the product. It could be copied from the description of the Product Offering.",
          "type": "string"
        },
        "isBundle": {
          "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering",
          "type": "boolean"
        },
        "isCustomerVisible": {
          "description": "If true, the product is visible by the customer",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the product. It could be the same as the name of the Product Offering",
          "type": "string"
        },
        "productSerialNumber": {
          "description": "Serial number for the product. This is typically applicable to tangible products e.g. Broadband Router.",
          "type": "string"
        },
        "startDate": {
          "description": "The date from which the product starts",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/TMF637StatusType"
        },
        "terminationDate": {
          "description": "The date when the product was terminated. Not applicable to active products",
          "type": "string",
          "format": "date-time"
        },
        "@baseType": {
          "description": "Indicates the base type of the resource. Here can be 'Product'",
          "type": "string"
        },
        "@type": {
          "description": "Indicated the type of resource.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource.",
          "type": "string"
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF637Place"
          }
        },
        "productOffering": {
          "$ref": "#/definitions/TMF637ProductOfferingRef"
        },
        "productSpecification": {
          "$ref": "#/definitions/TMF637ProductSpecification"
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF637ProductCharacteristic"
          }
        },
        "productRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF637ProductRelationship"
          }
        },
        "billingAccount": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF637BillingAccountRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF637RelatedParty"
          }
        },
        "realizingResource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF637RealizingResource"
          }
        },
        "realizingService": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF637RealizingService"
          }
        },
        "productPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF637ProductPrice"
          }
        },
        "productOrder": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF637ProductOrderRef"
          }
        },
        "productTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF637ProductTerm"
          }
        }
      }
    },
    "TMF637ProductOfferingRef": {
      "description": "ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product offering",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product offering",
          "type": "string"
        },
        "name": {
          "description": "Name of the product offering",
          "type": "string"
        },
        "@referredType": {
          "description": "Type (class) of the product offering",
          "type": "string"
        }
      }
    },
    "TMF637ProductSpecification": {
      "description": "A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product specification",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product specification",
          "type": "string"
        },
        "version": {
          "description": "Version of the product specification",
          "type": "string"
        },
        "name": {
          "description": "Name of the product specification",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicate the productSpecification type class",
          "type": "string"
        },
        "describing": {
          "$ref": "#/definitions/TMF637TargetResourceSchema"
        }
      }
    },
    "TMF637ProductCharacteristic": {
      "description": "Characteristics of the product to instantiate or to modify.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the characteristic",
          "type": "string"
        },
        "value": {
          "description": "Value of the characteristic",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "This field provided a link to the schema describing this REST resource.",
          "type": "string"
        }
      }
    },
    "TMF637ProductRelationship": {
      "description": "Type of the product relationship. it can be 'bundled' if the product is a bundle and you want to describe the 'bundled' products inside this bundle, 'reliesOn' if the product needs another already owned product to rely on \n(e.g. an option on an already owned mobile access product) or 'targets' or 'isTargeted' (depending on the way of expressing the link) for any other kind of links that may be useful",
      "required": [
        "product"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of the product relationship",
          "type": "string"
        },
        "product": {
          "$ref": "#/definitions/TMF637ProductRef"
        }
      }
    },
    "TMF637BillingAccountRef": {
      "description": "A BillingAccount is a detailed description of a bill structure",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identier of the billing account",
          "type": "string"
        },
        "href": {
          "description": "Reference of the billing account",
          "type": "string"
        },
        "name": {
          "description": "Name of the billing account",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the billing account",
          "type": "string"
        }
      }
    },
    "TMF637RelatedParty": {
      "description": "The party which the product is related with.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the related party",
          "type": "string"
        },
        "href": {
          "description": "Reference of the related party",
          "type": "string"
        },
        "name": {
          "description": "Name of the related party",
          "type": "string"
        },
        "role": {
          "description": "Role played by the related party",
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF637TimePeriod"
        },
        "@referredType": {
          "description": "Indicates the (class) type of party",
          "type": "string"
        }
      }
    },
    "TMF637RealizingResource": {
      "description": "RealizingResource reference. RealizingResource is a link to the resource that realizes the product.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the resource",
          "type": "string"
        },
        "href": {
          "description": "Reference of the resource",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource.",
          "type": "string"
        },
        "role": {
          "description": "Role of the resource",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicate the class (type) of the realizing resource",
          "type": "string"
        }
      }
    },
    "TMF637RealizingService": {
      "description": "RealizingService reference. RealizingService is a link to the service that realizes the product.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the service",
          "type": "string"
        },
        "href": {
          "description": "Reference of the service",
          "type": "string"
        },
        "name": {
          "description": "Name of the service",
          "type": "string"
        },
        "role": {
          "description": "Role of the realizing service",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicate the class (type) of the realizing service.",
          "type": "string"
        }
      }
    },
    "TMF637ProductPrice": {
      "description": "An amount, usually of money, that represents the actual price paid by a Customer for a purchase, a rent or a lease of a Product. The price is valid for a defined period of time.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of a productOfferingPrice",
          "type": "string"
        },
        "name": {
          "description": "A short descriptive name such as \"Subscription price\"",
          "type": "string"
        },
        "description": {
          "description": "A narrative that explains in detail the semantics of this product price",
          "type": "string"
        },
        "priceType": {
          "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth",
          "type": "string"
        },
        "recurringChargePeriod": {
          "description": "Could be month, week...",
          "type": "string"
        },
        "unitOfMeasure": {
          "description": "Could be minutes, GB...",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of ProductPrice class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource",
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/TMF637Price"
        },
        "prodPriceAlteration": {
          "$ref": "#/definitions/TMF637PriceAlteration"
        },
        "billingAccount": {
          "$ref": "#/definitions/TMF637BillingAccountRef"
        }
      }
    },
    "TMF637Price": {
      "description": "Provides all amounts (tax included, duty free, tax rate), used currency and percentage applied for price and price alteration",
      "type": "object",
      "properties": {
        "taxIncludedAmount": {
          "$ref": "#/definitions/TMF637Money"
        },
        "dutyFreeAmount": {
          "$ref": "#/definitions/TMF637Money"
        },
        "percentage": {
          "description": "Percentage applied",
          "type": "number",
          "format": "float"
        },
        "taxRate": {
          "description": "Applied tax rate on amount",
          "type": "number",
          "format": "float"
        },
        "@type": {
          "description": "Indicates the (class) type of the price",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource.",
          "type": "string"
        }
      }
    },
    "TMF637TimePeriod": {
      "description": "A time period described through 2 dates",
      "type": "object",
      "properties": {
        "startDateTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "endDateTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TMF637ProductRef": {
      "description": "A product reference to be used for relationship target",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product",
          "type": "string"
        }
      }
    },
    "TMF637Place": {
      "description": "Place defines the places where the products is installed or has a footprint (a place could be used for geo fencing",
      "required": [
        "role"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the place",
          "type": "string"
        },
        "href": {
          "description": "Reference of the place",
          "type": "string"
        },
        "name": {
          "description": "A user-friendly name for the place",
          "type": "string"
        },
        "role": {
          "description": "Role of the place (for instance: 'installation site', 'A-extremity site', 'Supervised Perimeter' etc...)",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicate the type of Place class (example: 'geographicAddress')",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF637PriceAlteration": {
      "description": "Is an amount, usually of money, that modifies the price charged for a Product",
      "type": "object",
      "properties": {
        "id": {
          "description": "Link to the schema describing this REST resource.",
          "type": "string"
        },
        "name": {
          "description": "A short descriptive name such as \"Monthly discount\"",
          "type": "string"
        },
        "description": {
          "description": "A narrative that explains in detail the semantics of this ProdPriceAlteration",
          "type": "string"
        },
        "priceType": {
          "description": "A category that describes the price such as recurring, one shot and so forth",
          "type": "string"
        },
        "unitOfMeasure": {
          "description": "Could be minutes, GB...",
          "type": "string"
        },
        "recurringChargePeriod": {
          "description": "Could be month, week...",
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF637TimePeriod"
        },
        "priority": {
          "description": "Priority level for applying this alteration among all the defined alterations",
          "type": "integer",
          "format": "int32"
        },
        "@type": {
          "description": "Indicated the class (type) of the price alteration.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing the price alteration.",
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/TMF637Price"
        }
      }
    },
    "TMF637Hub": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics",
      "discriminator": "id",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the hub",
          "type": "string"
        },
        "callback": {
          "description": "The callback address to be registered",
          "type": "string"
        },
        "query": {
          "description": "Additional Data to be passed",
          "type": "string"
        }
      }
    },
    "TMF637HubInput": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics",
      "type": "object",
      "properties": {
        "callback": {
          "description": "The callback address to be registered",
          "type": "string"
        },
        "query": {
          "description": "Additional Data to be passed",
          "type": "string"
        }
      }
    },
    "TMF637ProductOrderRef": {
      "description": "The product order(s) related to this product inventory",
      "required": [
        "orderItemId"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of product order",
          "type": "string"
        },
        "href": {
          "description": "Hypertext Reference of the product order",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicate the class (type) of productOrder",
          "type": "string"
        },
        "orderItemId": {
          "description": "Identifier of the order item where the product was managed",
          "type": "string"
        },
        "orderItemAction": {
          "description": "Action of the order item for this product",
          "type": "string"
        }
      }
    },
    "TMF637ProductTerm": {
      "description": "This represent a commitment with a duration",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the commitment term",
          "type": "string"
        },
        "description": {
          "description": "Description of the commitment term",
          "type": "string"
        },
        "duration": {
          "$ref": "#/definitions/TMF637Quantity"
        },
        "validFor": {
          "$ref": "#/definitions/TMF637TimePeriod"
        },
        "@type": {
          "description": "Indicate the class (type) of the product term",
          "type": "string"
        }
      }
    },
    "TMF637Money": {
      "description": "A base / value business entity used to represent money.",
      "required": [
        "value",
        "unit"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "A positive floating point number",
          "type": "string"
        },
        "unit": {
          "description": "Currency (ISO4217 norm uses 3 letters to define the currency).",
          "type": "string"
        }
      }
    },
    "TMF637TargetResourceSchema": {
      "description": "Target to the schema describing the product spec resource",
      "required": [
        "@type"
      ],
      "type": "object",
      "properties": {
        "@type": {
          "description": "Indicated the type of the productSpec described there - for example an E-Line Spec, a CPE spec",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing the product spec",
          "type": "string"
        }
      }
    },
    "TMF637Quantity": {
      "description": "Description of a quantity like for the Duration attribute",
      "required": [
        "amount",
        "units"
      ],
      "type": "object",
      "properties": {
        "amount": {
          "description": "A value for the quantity",
          "type": "number",
          "format": "float"
        },
        "units": {
          "description": "A unit associated with the quantity (for example months)",
          "type": "string"
        }
      }
    },
    "TMF638stateValues": {
      "description": "",
      "type": "string",
      "enum": [
        "feasibilityChecked",
        "designed",
        "reserved",
        "inactive",
        "active",
        "terminated"
      ]
    },
    "TMF638ErrorRepresentation": {
      "description": "",
      "required": [
        "code",
        "reason"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Application related code (as defined in the API or from a common list)",
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "description": "Text that explains the reason for error. This can be shown to a client user.",
          "type": "string"
        },
        "message": {
          "description": "Text that provide more details and corrective actions related to the error. This can be shown to a client user.",
          "type": "string"
        },
        "status": {
          "description": "http error code extension like 400-2",
          "type": "string"
        },
        "referenceError": {
          "description": "url pointing to documentation describing the error",
          "type": "string"
        },
        "@type": {
          "description": "The class type of a REST resource.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "it provides a link to the schema describing a REST resource.",
          "type": "string"
        }
      }
    },
    "TMF638Service": {
      "description": "Service is an abstract base class for defining the Service hierarchy. All Services are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of Service: CustomerFacingService and ResourceFacingService.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the service",
          "type": "string"
        },
        "href": {
          "description": "Reference of the service",
          "type": "string"
        },
        "type": {
          "description": "Service type",
          "type": "string"
        },
        "name": {
          "description": "Name of the service",
          "type": "string"
        },
        "description": {
          "description": "Free-text description of the service",
          "type": "string"
        },
        "@type": {
          "description": "",
          "type": "string"
        },
        "@baseType": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/TMF638stateValues"
        },
        "category": {
          "description": "Is it a customer facing or resource facing service",
          "type": "string"
        },
        "isServiceEnabled": {
          "description": "For use. If the value of this attribute is FALSE, then this means that this particular Service has NOT been enabled for use",
          "type": "boolean"
        },
        "hasStarted": {
          "description": "This is a Boolean attribute that, if TRUE, signifies that this Service has already been started. If the value of this attribute is FALSE, then this signifies that this Service has NOT been Started",
          "type": "boolean"
        },
        "startMode": {
          "description": "This attribute is an enumerated integer that indicates how the Service is started. Values include: \n0: Unknown \n1: Automatically by the managed environment \n2: Automatically by the owning device \n3: Manually by the Provider of the Service \n4: Manually by a Customer of the Provider \n5: Any of the above.",
          "type": "string"
        },
        "isStateful": {
          "description": "This is a Boolean attribute that, if TRUE, means that this Service can be changed without affecting any other services",
          "type": "boolean"
        },
        "serviceDate": {
          "description": "",
          "type": "string"
        },
        "startDate": {
          "description": "Date when the service starts",
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "description": "Date when the service ends",
          "type": "string",
          "format": "date-time"
        },
        "serviceSpecification": {
          "$ref": "#/definitions/TMF638ServiceSpecificationRef"
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF638ServiceCharacteristic"
          }
        },
        "serviceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF638ServiceRelationship"
          }
        },
        "supportingService": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF638SupportingService"
          }
        },
        "supportingResource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF638SupportingResource"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF638RelatedPartyRef"
          }
        },
        "serviceOrder": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF638ServiceOrderRef"
          }
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF638Place"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF638Note"
          }
        }
      }
    },
    "TMF638ServiceSpecificationRef": {
      "description": "Service specification reference: ServiceSpecification(s) required to realize a ProductSpecification",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the service specification",
          "type": "string"
        },
        "href": {
          "description": "Reference of the service specification",
          "type": "string"
        },
        "name": {
          "description": "Name of the required service specification",
          "type": "string"
        },
        "version": {
          "description": "Service specification version",
          "type": "string"
        },
        "@type": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        },
        "@baseType": {
          "description": "",
          "type": "string"
        },
        "targetServiceSchema": {
          "$ref": "#/definitions/TMF638TargetServiceSchema"
        }
      }
    },
    "TMF638ServiceCharacteristic": {
      "description": "A list of name value pairs that define the service characteristics",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the characteristic",
          "type": "string"
        },
        "valueType": {
          "description": "",
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/TMF638Value"
        }
      }
    },
    "TMF638ServiceRelationship": {
      "description": "Describes links with services of the same category (useful for bundled services)",
      "required": [
        "type",
        "service"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Describes links with services of the same category (useful for bundled services)",
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/TMF638ServiceRef"
        }
      }
    },
    "TMF638SupportingService": {
      "description": "A collection of services that support this service (links between CFS; RFS)",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the supporting service",
          "type": "string"
        },
        "href": {
          "description": "Reference of the supporting service",
          "type": "string"
        },
        "name": {
          "description": "Name of the supporting service",
          "type": "string"
        },
        "cateogry": {
          "description": "Category of the supporting service",
          "type": "string"
        },
        "@referredType": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF638SupportingResource": {
      "description": "Supporting resource",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the supporting resource",
          "type": "string"
        },
        "href": {
          "description": "Reference of the supporting resource",
          "type": "string"
        },
        "role": {
          "description": "",
          "type": "string"
        },
        "@referredType": {
          "description": "",
          "type": "string"
        },
        "name": {
          "description": "Name of the supporting resource",
          "type": "string"
        }
      }
    },
    "TMF638RelatedPartyRef": {
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of a related party",
          "type": "string"
        },
        "href": {
          "description": "Reference of a related party",
          "type": "string"
        },
        "role": {
          "description": "Role played by the related party",
          "type": "string"
        },
        "name": {
          "description": "Nmae of a related party",
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF638TimePeriod"
        },
        "@referredType": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF638ServiceOrderRef": {
      "description": "A Service Order is a request to perform an action on a specific Service and its contained services",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the related service order",
          "type": "string"
        },
        "href": {
          "description": "Reference of the related service order",
          "type": "string"
        },
        "serviceOrderItem": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF638Place": {
      "description": "Used to define a place useful for the service (for example a delivery geographical place)",
      "type": "object",
      "properties": {
        "id": {
          "description": "",
          "type": "string"
        },
        "href": {
          "description": "Reference of a place (for instance in google map)",
          "type": "string"
        },
        "name": {
          "description": "",
          "type": "string"
        },
        "role": {
          "description": "Role of the place (for instance delivery geographical place)",
          "type": "string"
        },
        "@referredType": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF638ServiceRef": {
      "description": "Service reference. Useful to link services of the same category",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the service",
          "type": "string"
        },
        "href": {
          "description": "Reference of the service",
          "type": "string"
        }
      }
    },
    "TMF638Note": {
      "description": "",
      "required": [
        "text"
      ],
      "type": "object",
      "properties": {
        "date": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "author": {
          "description": "",
          "type": "string"
        },
        "text": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF638TimePeriod": {
      "description": "",
      "type": "object",
      "properties": {
        "startDateTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "endDateTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TMF638TargetServiceSchema": {
      "description": "",
      "required": [
        "@type",
        "@schemaLocation"
      ],
      "type": "object",
      "properties": {
        "@type": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF638Value": {
      "description": "Structure used to describe characteristic value",
      "type": "object",
      "properties": {
        "@type": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF638Hub": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics",
      "discriminator": "id",
      "type": "object",
      "properties": {
        "id": {
          "description": "",
          "type": "string"
        },
        "callback": {
          "description": "",
          "type": "string"
        },
        "query": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF638HubInput": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics",
      "type": "object",
      "properties": {
        "callback": {
          "description": "",
          "type": "string"
        },
        "query": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF639Resource": {
      "type": "object",
      "description": "Resource is an abstract entity that describes the common set of attributes shared by all concrete resources (e.g. TPE, EQUIPMENT) in the inventory.",
      "required": [
        "name"
      ],
      "properties": {
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is effective"
        },
        "href": {
          "type": "string",
          "description": "The URI for the object itself."
        },
        "id": {
          "type": "string",
          "description": "Identifier of an instance of the resource. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type."
        },
        "lifecycleState": {
          "type": "string",
          "description": "The life cycle state of the resource."
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is effective"
        },
        "version": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639ResourceRelationship"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639ResourceCharacteristic"
          }
        },
        "place": {
          "$ref": "#/definitions/TMF639Place"
        },
        "partyRole": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639PartyRoleRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639RelatedPartyRef"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/TMF639ResourceSpecificationRef"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639Note"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF639Resource_Create": {
      "type": "object",
      "description": "Resource is an abstract entity that describes the common set of attributes shared by all concrete resources (e.g. TPE, EQUIPMENT) in the inventory.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is effective"
        },
        "lifecycleState": {
          "type": "string",
          "description": "The life cycle state of the resource."
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is effective"
        },
        "version": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639ResourceRelationship"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639ResourceCharacteristic"
          }
        },
        "place": {
          "$ref": "#/definitions/TMF639Place"
        },
        "partyRole": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639PartyRoleRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639RelatedPartyRef"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/TMF639ResourceSpecificationRef"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639Note"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF639Resource_Update": {
      "type": "object",
      "description": "Resource is an abstract entity that describes the common set of attributes shared by all concrete resources (e.g. TPE, EQUIPMENT) in the inventory.\nSkipped properties: id,href,id,href",
      "properties": {
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is effective"
        },
        "lifecycleState": {
          "type": "string",
          "description": "The life cycle state of the resource."
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is effective"
        },
        "version": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639ResourceRelationship"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639ResourceCharacteristic"
          }
        },
        "place": {
          "$ref": "#/definitions/TMF639Place"
        },
        "partyRole": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639PartyRoleRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639RelatedPartyRef"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/TMF639ResourceSpecificationRef"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639Note"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF639PhysicalResource": {
      "type": "object",
      "description": "Physical resource is a type of resource that describes the common set of attributes shared by all concrete physical resources (e.g. EQUIPMENT) in the inventory.",
      "required": [
        "name"
      ],
      "properties": {
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is effective"
        },
        "href": {
          "type": "string",
          "description": "The URI for the object itself."
        },
        "id": {
          "type": "string",
          "description": "Identifier of an instance of the resource. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type."
        },
        "lifecycleState": {
          "type": "string",
          "description": "The life cycle state of the resource."
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is effective"
        },
        "version": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "manufactureDate": {
          "type": "string",
          "format": "date-time",
          "description": "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute."
        },
        "powerState": {
          "type": "string",
          "description": "This defines the current power status of the hardware item. Values include:\n\n  0:  Unknown\n  1:  Not Applicable\n  2:  No Power Applied\n  3: Full Power Applied\n  4:  Power Save - Normal\n  5:  Power Save - Degraded\n  6:  Power Save - Standby\n  7:  Power Save - Critical\n  8:  Power Save - Low Power Mode\n  9:  Power Save - Unknown\n 10: Power Cycle\n 11: Power Warning\n 12: Power Off"
        },
        "serialNumber": {
          "type": "string",
          "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute."
        },
        "versionNumber": {
          "type": "string",
          "description": "This is a string that identifies the version of this object. This is an optional attribute."
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639ResourceRelationship"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639ResourceCharacteristic"
          }
        },
        "place": {
          "$ref": "#/definitions/TMF639Place"
        },
        "partyRole": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639PartyRoleRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639RelatedPartyRef"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/TMF639ResourceSpecificationRef"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639Note"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF639PhysicalResource_Create": {
      "type": "object",
      "description": "Physical resource is a type of resource that describes the common set of attributes shared by all concrete physical resources (e.g. EQUIPMENT) in the inventory.\nSkipped properties: id,href",
      "required": [
        "name",
        "serialNumber"
      ],
      "properties": {
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is effective"
        },
        "lifecycleState": {
          "type": "string",
          "description": "The life cycle state of the resource."
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is effective"
        },
        "version": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "manufactureDate": {
          "type": "string",
          "format": "date-time",
          "description": "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute."
        },
        "powerState": {
          "type": "string",
          "description": "This defines the current power status of the hardware item. Values include:\n\n  0:  Unknown\n  1:  Not Applicable\n  2:  No Power Applied\n  3: Full Power Applied\n  4:  Power Save - Normal\n  5:  Power Save - Degraded\n  6:  Power Save - Standby\n  7:  Power Save - Critical\n  8:  Power Save - Low Power Mode\n  9:  Power Save - Unknown\n 10: Power Cycle\n 11: Power Warning\n 12: Power Off"
        },
        "serialNumber": {
          "type": "string",
          "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute."
        },
        "versionNumber": {
          "type": "string",
          "description": "This is a string that identifies the version of this object. This is an optional attribute."
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639ResourceRelationship"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639ResourceCharacteristic"
          }
        },
        "place": {
          "$ref": "#/definitions/TMF639Place"
        },
        "partyRole": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639PartyRoleRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639RelatedPartyRef"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/TMF639ResourceSpecificationRef"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639Note"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF639PhysicalResource_Update": {
      "type": "object",
      "description": "Physical resource is a type of resource that describes the common set of attributes shared by all concrete physical resources (e.g. EQUIPMENT) in the inventory.\nSkipped properties: id,href,id,href",
      "properties": {
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is effective"
        },
        "lifecycleState": {
          "type": "string",
          "description": "The life cycle state of the resource."
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is effective"
        },
        "version": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "manufactureDate": {
          "type": "string",
          "format": "date-time",
          "description": "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute."
        },
        "powerState": {
          "type": "string",
          "description": "This defines the current power status of the hardware item. Values include:\n\n  0:  Unknown\n  1:  Not Applicable\n  2:  No Power Applied\n  3: Full Power Applied\n  4:  Power Save - Normal\n  5:  Power Save - Degraded\n  6:  Power Save - Standby\n  7:  Power Save - Critical\n  8:  Power Save - Low Power Mode\n  9:  Power Save - Unknown\n 10: Power Cycle\n 11: Power Warning\n 12: Power Off"
        },
        "serialNumber": {
          "type": "string",
          "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute."
        },
        "versionNumber": {
          "type": "string",
          "description": "This is a string that identifies the version of this object. This is an optional attribute."
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639ResourceRelationship"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639ResourceCharacteristic"
          }
        },
        "place": {
          "$ref": "#/definitions/TMF639Place"
        },
        "partyRole": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639PartyRoleRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639RelatedPartyRef"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/TMF639ResourceSpecificationRef"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639Note"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF639LogicalResource": {
      "type": "object",
      "description": "Logic resource is a type of resource that describes the common set of attributes shared by all concrete logical resources (e.g. TPE, MSISDN, IP Addresses) in the inventory.",
      "required": [
        "name"
      ],
      "properties": {
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is effective"
        },
        "href": {
          "type": "string",
          "description": "The URI for the object itself."
        },
        "id": {
          "type": "string",
          "description": "Identifier of an instance of the resource. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type."
        },
        "lifecycleState": {
          "type": "string",
          "description": "The life cycle state of the resource."
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is effective"
        },
        "version": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "value": {
          "type": "string",
          "description": "the value of the logical resource. E.g '0746712345' for  MSISDN's"
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639ResourceRelationship"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639ResourceCharacteristic"
          }
        },
        "place": {
          "$ref": "#/definitions/TMF639Place"
        },
        "partyRole": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639PartyRoleRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639RelatedPartyRef"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/TMF639ResourceSpecificationRef"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639Note"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF639LogicalResource_Create": {
      "type": "object",
      "description": "Logic resource is a type of resource that describes the common set of attributes shared by all concrete logical resources (e.g. TPE, MSISDN, IP Addresses) in the inventory.\nSkipped properties: id,href",
      "required": [
        "value"
      ],
      "properties": {
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is effective"
        },
        "lifecycleState": {
          "type": "string",
          "description": "The life cycle state of the resource."
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is effective"
        },
        "version": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "value": {
          "type": "string",
          "description": "the value of the logical resource. E.g '0746712345' for  MSISDN's"
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639ResourceRelationship"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639ResourceCharacteristic"
          }
        },
        "place": {
          "$ref": "#/definitions/TMF639Place"
        },
        "partyRole": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639PartyRoleRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639RelatedPartyRef"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/TMF639ResourceSpecificationRef"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639Note"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF639LogicalResource_Update": {
      "type": "object",
      "description": "Logic resource is a type of resource that describes the common set of attributes shared by all concrete logical resources (e.g. TPE, MSISDN, IP Addresses) in the inventory.\nSkipped properties: id,href,id,href",
      "properties": {
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is effective"
        },
        "lifecycleState": {
          "type": "string",
          "description": "The life cycle state of the resource."
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is effective"
        },
        "version": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "value": {
          "type": "string",
          "description": "the value of the logical resource. E.g '0746712345' for  MSISDN's"
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639ResourceRelationship"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639ResourceCharacteristic"
          }
        },
        "place": {
          "$ref": "#/definitions/TMF639Place"
        },
        "partyRole": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639PartyRoleRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639RelatedPartyRef"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/TMF639ResourceSpecificationRef"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF639Note"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF639ResourceRelationship": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "resourceRef": {
          "$ref": "#/definitions/TMF639ResourceRef"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF639ResourceCharacteristic": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name of the characteristic"
        },
        "value": {
          "type": "string",
          "description": "value of the characteristic"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        }
      }
    },
    "TMF639Place": {
      "type": "object",
      "description": "Place reference. Place defines the places where the products are sold or delivered.",
      "required": [
        "role",
        "id",
        "href"
      ],
      "properties": {
        "href": {
          "type": "string",
          "description": "Unique reference of the place"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the place"
        },
        "name": {
          "type": "string",
          "description": "A user-friendly name for the place, such as \"Paris Store\", \"London Store\", \"Main Home\""
        },
        "role": {
          "type": "string",
          "description": "Role of the place (for instance: 'home delivery', 'shop retrieval')"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        }
      }
    },
    "TMF639PartyRoleRef": {
      "type": "object",
      "description": "Party role reference. A party role represents the part played by a party in a given context.",
      "required": [
        "id",
        "href"
      ],
      "properties": {
        "href": {
          "type": "string",
          "description": "Reference of the product"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the product"
        },
        "name": {
          "type": "string",
          "description": "The name of the referred party role."
        },
        "partyId": {
          "type": "string",
          "description": "The identifier of the engaged party that is linked to the PartyRole object."
        },
        "partyName": {
          "type": "string",
          "description": "The name of the engaged party that is linked to the PartyRole object."
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF639RelatedPartyRef": {
      "type": "object",
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
      "properties": {
        "href": {
          "type": "string",
          "description": "Reference of the related party, could be a party reference or a party role reference"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related party"
        },
        "name": {
          "type": "string",
          "description": "Name of the related party"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party."
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF639ResourceSpecificationRef": {
      "type": "object",
      "description": "Resource Specification reference: The ResourceSpecification is required to realize a ProductSpecification.",
      "required": [
        "id",
        "href"
      ],
      "properties": {
        "href": {
          "type": "string",
          "description": "Reference of the resource specification"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the resource specification"
        },
        "name": {
          "type": "string",
          "description": "Name of the requiredResourceSpecification"
        },
        "version": {
          "type": "string",
          "description": "Resource specification version"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF639Note": {
      "type": "object",
      "description": "Extra information about a given entity",
      "required": [
        "text"
      ],
      "properties": {
        "author": {
          "type": "string",
          "description": "Author of the note"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "Date of the note"
        },
        "text": {
          "type": "string",
          "description": "Text of the note"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        }
      }
    },
    "TMF639ResourceRef": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF639EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF639EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF639Error": {
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "Application related code."
        },
        "reason": {
          "type": "integer",
          "description": "Text that explains the reason for error."
        },
        "message": {
          "type": "string",
          "description": "(optional) Text that provide more details and corrective actions related to the error."
        },
        "status": {
          "type": "integer",
          "description": "(optional) http error code extension like 400-2"
        },
        "referenceError": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        },
        "@type": {
          "type": "string",
          "description": "(optional) The class type of a REST resource."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "(optional) A link to the schema describing a REST resource."
        }
      }
    },
    "TMF641ActionType": {
      "description": "",
      "type": "string",
      "enum": [
        "add",
        "modify",
        "delete",
        "noChange"
      ]
    },
    "TMF641StateType": {
      "description": "",
      "type": "string",
      "enum": [
        "acknowledged",
        "rejected",
        "pending",
        "held",
        "inProgress",
        "cancelled",
        "completed",
        "failed",
        "partial"
      ]
    },
    "TMF641ErrorRepresentation": {
      "description": "",
      "required": [
        "code",
        "reason"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Application related code (as defined in the API or from a common list)",
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "description": "Text that explains the reason for error. This can be shown to a client user.",
          "type": "string"
        },
        "message": {
          "description": "Text that provide more details and corrective actions related to the error. This can be shown to a client user",
          "type": "string"
        },
        "status": {
          "description": "http error code extension like 400-2",
          "type": "string"
        },
        "referenceError": {
          "description": "url pointing to documentation describing the error",
          "type": "string"
        },
        "@type": {
          "description": "The class type of a REST resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "it provides a link to the schema describing a REST resource",
          "type": "string"
        }
      }
    },
    "TMF641ServiceRelationship": {
      "description": "Linked Services to the one instantiate",
      "required": [
        "type",
        "service"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Relationship type. It can be : “reliesOn” if the Service needs another already owned Service to rely on (e.g. an option on an already owned mobile access Service) or “targets” or “isTargeted” (depending on the way of expressing the link) for any other kind of links that may be useful",
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/TMF641Service"
        }
      }
    },
    "TMF641ServiceRef": {
      "description": "Service references",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the service",
          "type": "string"
        },
        "href": {
          "description": "Reference of the service",
          "type": "string"
        }
      }
    },
    "TMF641ServiceCharacteristic": {
      "description": "ServiceCharacteristic",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of characteristic",
          "type": "string"
        },
        "valueType": {
          "description": "",
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/TMF641Value"
        }
      }
    },
    "TMF641RelatedParty": {
      "description": "A related party defines party which are involved in this order and the role they are playing",
      "required": [
        "id",
        "role"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of a related party",
          "type": "string"
        },
        "href": {
          "description": "An hyperlink to the party",
          "type": "string"
        },
        "role": {
          "description": "The role of the related party (e.g. Owner, requester, fullfiller etc)",
          "type": "string"
        },
        "name": {
          "description": "Name of the related party",
          "type": "string"
        },
        "@referredType": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF641ServiceSpecificationRef": {
      "description": "The service specification (default values, etc. are fetched from the catalogue).",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the service specification",
          "type": "string"
        },
        "href": {
          "description": "Reference of the service specification",
          "type": "string"
        },
        "name": {
          "description": "",
          "type": "string"
        },
        "version": {
          "description": "",
          "type": "string"
        },
        "targetServiceSchema": {
          "$ref": "#/definitions/TMF641TargetServiceSchema"
        },
        "@type": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        },
        "@baseType": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF641Service": {
      "description": "Service attributes description (these are as per the Service ODE model as used in the Service Inventory specification)",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of a service instance",
          "type": "string"
        },
        "href": {
          "description": "Reference to the owned Service (useful for delete or modify command)",
          "type": "string"
        },
        "name": {
          "description": "Name of the service",
          "type": "string"
        },
        "serviceState": {
          "description": "The lifecycle state of the service",
          "type": "string"
        },
        "type": {
          "description": "",
          "type": "string"
        },
        "@type": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF641Place"
          }
        },
        "serviceCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF641ServiceCharacteristic"
          }
        },
        "serviceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF641ServiceRelationship"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF641RelatedParty"
          }
        },
        "serviceSpecification": {
          "$ref": "#/definitions/TMF641ServiceSpecificationRef"
        }
      }
    },
    "TMF641Place": {
      "description": "Used to defined a place useful for the service (for example a delivery geographical place)",
      "required": [
        "role"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "",
          "type": "string"
        },
        "href": {
          "description": "Reference of a place (for instance in google map)",
          "type": "string"
        },
        "name": {
          "description": "",
          "type": "string"
        },
        "role": {
          "description": "The role of the place (e.g. delivery address, install site etc)",
          "type": "string"
        },
        "@referredType": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF641OrderItemRelationship": {
      "description": "Linked order item to the one containing this attribute",
      "required": [
        "type",
        "id"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of related order item, can be : dependancy if the order item needs to be “not started” until another order item is complete",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of an order item",
          "type": "string"
        }
      }
    },
    "TMF641ServiceOrderItem": {
      "description": "An identified part of the order. A service order is decomposed into one or more order items.",
      "required": [
        "id",
        "service"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of the line item (generally it is a sequence number 01, 02, 03, …)",
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/TMF641ActionType"
        },
        "state": {
          "$ref": "#/definitions/TMF641StateType"
        },
        "@type": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        },
        "@baseType": {
          "description": "",
          "type": "string"
        },
        "appointment": {
          "$ref": "#/definitions/TMF641AppointmentRef"
        },
        "orderItemRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF641OrderItemRelationship"
          }
        },
        "service": {
          "$ref": "#/definitions/TMF641Service"
        }
      }
    },
    "TMF641AppointmentRef": {
      "description": "Used to precise that an appointment was set-up with a related party for this order item",
      "required": [
        "id",
        "href"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the appointment",
          "type": "string"
        },
        "href": {
          "description": "Reference of the appointmenrt",
          "type": "string"
        },
        "@referredType": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF641Note": {
      "description": "Extra-information about the order (e.g. useful to add extra delivery information that could be useful for a human process",
      "type": "object",
      "properties": {
        "date": {
          "description": "Date of the note",
          "type": "string",
          "format": "date"
        },
        "author": {
          "description": "Author of the note",
          "type": "string"
        },
        "text": {
          "description": "Text of the note",
          "type": "string"
        }
      }
    },
    "TMF641ServiceOrder": {
      "description": "A Service Order is a type of order which can be used to place an order between a customer and a service provider or between a service provider and a partner and vice versa",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "ID created on repository side",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink to access the order",
          "type": "string"
        },
        "externalId": {
          "description": "ID given by the consumer and only understandable by him (to facilitate his searches)",
          "type": "string"
        },
        "priority": {
          "description": "A way that can be used by consumers to prioritize orders in Service Order Management system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)",
          "type": "string"
        },
        "description": {
          "description": "A free-text description of the service order",
          "type": "string"
        },
        "category": {
          "description": "Used to categorize the order that can be useful for the OM system (e.g. “broadband”, “TVOption”, ...)",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/TMF641StateType"
        },
        "orderDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "completionDate": {
          "description": "",
          "type": "string"
        },
        "requestedStartDate": {
          "description": "Order start date wished by the requestor",
          "type": "string",
          "format": "date-time"
        },
        "requestedCompletionDate": {
          "description": "Requested delivery date from the requestor perspective",
          "type": "string",
          "format": "date-time"
        },
        "expectedCompletionDate": {
          "description": "Expected delivery date amended by the provider",
          "type": "string",
          "format": "date-time"
        },
        "startDate": {
          "description": "Date when the order was started for processing",
          "type": "string",
          "format": "date-time"
        },
        "notificationContact": {
          "description": "Contact attached to the order to send back information regarding this order",
          "type": "string"
        },
        "@baseType": {
          "description": "",
          "type": "string"
        },
        "@type": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        },
        "note": {
          "$ref": "#/definitions/TMF641Note"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF641RelatedParty"
          }
        },
        "orderRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF641OrderRelationship"
          }
        },
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF641ServiceOrderItem"
          }
        }
      }
    },
    "TMF641OrderRelationship": {
      "description": "Linked order to the one containing this attribute",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of related order, can be : “dependency” if the order needs to be “not started” until another order item is complete (a service order in this case) or “cross-ref” to keep track of the source order (a productOrder)",
          "type": "string"
        },
        "id": {
          "description": "The id of the related order",
          "type": "string"
        },
        "href": {
          "description": "A hyperlink to the related order",
          "type": "string"
        },
        "@referredType": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF641TargetServiceSchema": {
      "description": "",
      "required": [
        "@type",
        "@schemaLocation"
      ],
      "type": "object",
      "properties": {
        "@type": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF641Value": {
      "description": "Value is a descriptive structure for service characteristic",
      "type": "object",
      "properties": {
        "@type": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF641POSTReqServiceOrderItem": {
      "description": "specific structure for POST Request",
      "required": [
        "id",
        "service"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of the line item (generally it is a sequence number 01, 02, 03, …)",
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/TMF641ActionType"
        },
        "@type": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        },
        "@baseType": {
          "description": "",
          "type": "string"
        },
        "appointment": {
          "$ref": "#/definitions/TMF641AppointmentRef"
        },
        "orderItemRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF641OrderItemRelationship"
          }
        },
        "service": {
          "$ref": "#/definitions/TMF641Service"
        }
      }
    },
    "TMF641POSTReqServiceOrder": {
      "description": "This stucture is used in the request of a POST service Order.\nall attributes not expected to be in request have been removed.",
      "type": "object",
      "properties": {
        "externalId": {
          "description": "ID given by the consumer and only understandable by him (to facilitate his searches)",
          "type": "string"
        },
        "priority": {
          "description": "A way that can be used by consumers to prioritize orders in Service Order Management system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)",
          "type": "string"
        },
        "description": {
          "description": "A free-text description of the service order",
          "type": "string"
        },
        "category": {
          "description": "Used to categorize the order that can be useful for the OM system (e.g. “broadband”, “TVOption”, ...)",
          "type": "string"
        },
        "requestedStartDate": {
          "description": "Order start date wished by the requestor",
          "type": "string",
          "format": "date-time"
        },
        "requestedCompletionDate": {
          "description": "Requested delivery date from the requestor perspective",
          "type": "string",
          "format": "date-time"
        },
        "notificationContact": {
          "description": "Contact attached to the order to send back information regarding this order",
          "type": "string"
        },
        "@baseType": {
          "description": "",
          "type": "string"
        },
        "@type": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        },
        "note": {
          "$ref": "#/definitions/TMF641Note"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF641RelatedParty"
          }
        },
        "orderRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF641OrderRelationship"
          }
        },
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF641POSTReqServiceOrderItem"
          }
        }
      }
    },
    "TMF641Hub": {
      "description": "An Hub resource is uded by client side to subscribe to notification",
      "discriminator": "id",
      "type": "object",
      "properties": {
        "id": {
          "description": "",
          "type": "string"
        },
        "query": {
          "description": "",
          "type": "string"
        },
        "callback": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF641HubInput": {
      "description": "",
      "type": "object",
      "properties": {
        "query": {
          "description": "",
          "type": "string"
        },
        "callback": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF645ErrorRepresentation": {
      "description": "Tmforum standard error representation",
      "required": [
        "code",
        "reason"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Application related code (as defined in the API or from a common list)",
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "description": "Text that explains the reason for error. This can be shown to a client user.",
          "type": "string"
        },
        "message": {
          "description": "Text that provides more details and corrective action related  to the error. This can be shown to a client user.",
          "type": "string"
        },
        "status": {
          "description": "http error code extension like 400-2",
          "type": "string"
        },
        "referenceError": {
          "description": "url pointing to documentation describing the error",
          "type": "string"
        },
        "@type": {
          "description": "Type of the resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Linking to schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF645ServiceQualification": {
      "description": "ServiceQualification is used to perform a technical eligibility. It allows to retrieve a list of services that are technically available in the context of the interaction (place, party, service characteristics,…).",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the serviceQualification resource",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink to access the serviceQualification",
          "type": "string"
        },
        "serviceQualificationDate": {
          "description": "Date when the serviceQualification has been submitted",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "Description of the serviceQualification",
          "type": "string"
        },
        "state": {
          "description": "State of the serviceQualification (acknowledged, inProgress, terminatedWithError, done)",
          "type": "string"
        },
        "externalId": {
          "description": "Identifier provided by the requester",
          "type": "string"
        },
        "qualificationResult": {
          "description": "Qualification result for this serviceQualification. It could be:  qualified (all qualification item are qualified), alternate (At least one item alternate and no item with  unqualified), unqualified (At least one item unqualified)",
          "type": "string"
        },
        "expectedQualificationDate": {
          "description": "Deadline date when the requester expected a qualification answer",
          "type": "string",
          "format": "date-time"
        },
        "estimatedResponseDate": {
          "description": "Date when the requester expect to provide an answer for the qualification request",
          "type": "string",
          "format": "date-time"
        },
        "effectiveQualificationDate": {
          "description": "Effective date to serviceQualification completion",
          "type": "string",
          "format": "date-time"
        },
        "expirationDate": {
          "description": "Date when the qualification response expires",
          "type": "string",
          "format": "date-time"
        },
        "provideAlternative": {
          "description": "An indicator which when the value is \"true\" means that alternative solutions should be provided",
          "type": "boolean"
        },
        "provideUnavailabilityReason": {
          "description": "An indicator which when the value is \"true\" means that unavailability reason are expected for non available service",
          "type": "boolean"
        },
        "@baseType": {
          "description": "Indicates the base type of the resource. Here can be serviceQualification",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of resource. Here can be serviceQualification",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to schema describing this REST resource",
          "type": "string"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF645RelatedPartyRef"
          }
        },
        "serviceQualificationItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF645ServiceQualificationItem"
          }
        }
      }
    },
    "TMF645RelatedPartyRef": {
      "description": "A related party defines party or party role linked to a specific entity",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of a related party",
          "type": "string"
        },
        "href": {
          "description": "Reference of the related party, could be a party reference or a party role reference",
          "type": "string"
        },
        "role": {
          "description": "Role of the related party",
          "type": "string"
        },
        "name": {
          "description": "Name of the related party",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the base (class) type of the party",
          "type": "string"
        }
      }
    },
    "TMF645ServiceQualificationItem": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the serviceQualification item",
          "type": "string"
        },
        "state": {
          "description": "State of the serviceQualification item (acknowledged, inProgress, terminatedWithError, done)",
          "type": "string"
        },
        "expectedServiceAvailabilityDate": {
          "description": "Date when the requester looks for service availability",
          "type": "string",
          "format": "date-time"
        },
        "expirationDate": {
          "description": "Date when the qualification item response expires",
          "type": "string",
          "format": "date-time"
        },
        "qualificationResult": {
          "description": "Qualification result for serviceQualification item. It could be:  qualified (request service are available), unqualified (requested not available and not alternate available), alternate (requested not available but proposal available)",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the serviceQualificationItem",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to schema describing this REST resource",
          "type": "string"
        },
        "eligibilityUnavailabilityReason": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF645EligibilityUnavailabilityReason"
          }
        },
        "category": {
          "$ref": "#/definitions/TMF645CategoryRef"
        },
        "qualificationItemRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF645QualificationItemRelationship"
          }
        },
        "service": {
          "$ref": "#/definitions/TMF645Service"
        },
        "terminationError": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF645TerminationError"
          }
        },
        "alternateServiceProposal": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF645AlternateServiceProposal"
          }
        }
      }
    },
    "TMF645QualificationItemRelationship": {
      "description": "Stucture used to describe relationship between serviceQualifcation item from the same serviceQualifcation",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of relationship (ex: reliesOn, connectedTo, etc...)",
          "type": "string"
        },
        "id": {
          "description": "Id of the serviceQualificationItem (from the same serviceQualifcation)",
          "type": "string"
        }
      }
    },
    "TMF645Service": {
      "description": "Service reference. Configure the service characteristics & relationships (only configurable characteristics and necessary only if a non default value is selected) and/or identify the service that needs to be modified/deleted.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the service",
          "type": "string"
        },
        "href": {
          "description": "Reference of the service",
          "type": "string"
        },
        "name": {
          "description": "Name of the service",
          "type": "string"
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF645Place"
          }
        },
        "serviceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF645ServiceRelationship"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF645ServiceCharacteristic"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF645RelatedPartyRef"
          }
        },
        "serviceSpecification": {
          "$ref": "#/definitions/TMF645ServiceSpecificationRef"
        }
      }
    },
    "TMF645TerminationError": {
      "description": "If qualifcationItem has not been done properly we indicate there the termination error(s)",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the termination error",
          "type": "string"
        },
        "value": {
          "description": "Text to describe the termination error (Unable to proceed to qualification because incomplete information provided)",
          "type": "string"
        }
      }
    },
    "TMF645AlternateServiceProposal": {
      "description": "Alternate service proposal is used when the requested service is not available with characteristic and date asked for. An alternate proposal could be a distinct serviceSpecification close to requested one or same as requested but with a different activation date",
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of a alternate service proposal",
          "type": "string"
        },
        "alternateServiceAvailabilityDate": {
          "description": "Alternate availability date in case seller is not able to meet requested expected availability date for the service",
          "type": "string",
          "format": "date-time"
        },
        "@type": {
          "description": "Indicates the (class) type of alternate service proposal",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource",
          "type": "string"
        },
        "alternateService": {
          "$ref": "#/definitions/TMF645AlternateService"
        }
      }
    },
    "TMF645ServiceRelationship": {
      "description": "Linked services to the one instantiate, it can be :\t\"reliesOn\" if the service needs another already owned service to rely on (e.g. an option on an already owned access service) or \"targets\" or \"isTargeted\" (depending on the way of expressing the link) for any other kind of links that may be useful",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of the service relationship",
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/TMF645Service"
        }
      }
    },
    "TMF645ServiceCharacteristic": {
      "description": "Characteristics of the service to instantiate or to modify",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the characteristic",
          "type": "string"
        },
        "value": {
          "description": "Value of the characteristic",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "This field provided a link to the schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF645ServiceSpecificationRef": {
      "description": "Service specification reference",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the service specification",
          "type": "string"
        },
        "href": {
          "description": "Reference of the service specification",
          "type": "string"
        },
        "version": {
          "description": "Version of the service specification",
          "type": "string"
        },
        "name": {
          "description": "Name of the service specification",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of resource (here service specification)",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF645Place": {
      "description": "Describe a place (using either geographicAddress or GeographicLocation) and/or identify an existing place (either an existing geographicAddress or existing GeographicLocation or existing GeographicSite) through its id",
      "type": "object",
      "properties": {
        "id": {
          "description": ". Id of place - Must be a geographicAddress id or GeographicLocation id or GeographicSite id",
          "type": "string"
        },
        "href": {
          "description": "Reference of a place",
          "type": "string"
        },
        "name": {
          "description": "Name of a place",
          "type": "string"
        },
        "role": {
          "description": "Role of the place - could be' installation place' for example",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of place",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF645EligibilityUnavailabilityReason": {
      "description": "Reason for eligibility result if the serviceQualification result is no (meaning the service is not available)",
      "type": "object",
      "properties": {
        "code": {
          "description": "Unavailability reason code",
          "type": "string"
        },
        "label": {
          "description": "Unavailability reason label",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the unavailability reason",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF645CategoryRef": {
      "description": "Category reference. The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the category",
          "type": "string"
        },
        "href": {
          "description": "Reference of the category",
          "type": "string"
        },
        "version": {
          "description": "Category version",
          "type": "string"
        },
        "name": {
          "description": "Name of the category",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of category",
          "type": "string"
        }
      }
    },
    "TMF645AlternateService": {
      "description": "Alternate service close to requested one or same as requested but with a different activation date.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the service",
          "type": "string"
        },
        "href": {
          "description": "Reference of the service",
          "type": "string"
        },
        "name": {
          "description": "Name of the service",
          "type": "string"
        },
        "serviceSpecification": {
          "$ref": "#/definitions/TMF645ServiceSpecificationRef"
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF645ServiceCharacteristic"
          }
        },
        "serviceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF645ServiceRelationship"
          }
        }
      }
    },
    "TMF645Hub": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the hub",
          "type": "string"
        },
        "callback": {
          "description": "The callback being registered",
          "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
          "type": "string"
        }
      }
    },
    "TMF645HubInput": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics",
      "type": "object",
      "properties": {
        "callback": {
          "description": "The callback being registered",
          "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
          "type": "string"
        }
      }
    },
    "TMF646StateValues": {
      "description": "",
      "type": "string",
      "enum": [
        "initialized",
        "confirmed",
        "cancelled",
        "completed",
        "failed"
      ]
    },
    "TMF646ErrorRepresentation": {
      "description": "Representation of an error",
      "required": [
        "code",
        "reason"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Application related code",
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "description": "Text that explains the reason for error. This can be shown to a client user.",
          "type": "string"
        },
        "message": {
          "description": "Text that provides more details and corrective actions related to the error. This can be shown to a client user.",
          "type": "string"
        },
        "status": {
          "description": "",
          "type": "string"
        },
        "referenceError": {
          "description": "URL pointing to documentation describing the error",
          "type": "string"
        },
        "@type": {
          "description": "Type of the resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF646Appointment": {
      "description": "An Appointment is an arrangement to do something or meet someone at a particular time, at a place (for face to face appointment) or in a contact medium (for phone appointment).",
      "required": [
        "validFor"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the appointment",
          "type": "string"
        },
        "href": {
          "description": "Unique URI used to access to the appointment resource",
          "type": "string"
        },
        "externalId": {
          "description": "External reference known by the customer",
          "type": "string"
        },
        "description": {
          "description": "Short free text describing the appointment",
          "type": "string"
        },
        "category": {
          "description": "Business category : intervention for example or to be more precise after SalesIntervention, orderDeliveryIntervention,...",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/TMF646StateValues"
        },
        "creationDate": {
          "description": "Appointment creation date",
          "type": "string",
          "format": "date-time"
        },
        "lastUpdate": {
          "description": "Date of last appointment update",
          "type": "string",
          "format": "date-time"
        },
        "validFor": {
          "$ref": "#/definitions/TMF646TimePeriod"
        },
        "@baseType": {
          "description": "Indicates the base type of the resource. Here can be appointment",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of resource. Here can be appointment",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to schema describing this REST resource",
          "type": "string"
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF646Attachment"
          }
        },
        "calendarEvent": {
          "$ref": "#/definitions/TMF646CalendarEventRef"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF646RelatedPartyRef"
          }
        },
        "place": {
          "$ref": "#/definitions/TMF646Place"
        },
        "contactMedium": {
          "$ref": "#/definitions/TMF646ContactMedium"
        },
        "relatedEntity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF646RelatedEntityRef"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF646Note"
          }
        }
      }
    },
    "TMF646TimePeriod": {
      "description": "Time period between a start date time and end date time",
      "type": "object",
      "properties": {
        "startDateTime": {
          "description": "Start date time of the period",
          "type": "string",
          "format": "date-time"
        },
        "endDateTime": {
          "description": "End date time of the period",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TMF646Attachment": {
      "description": "Attachment documents to the appointment",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the attached document to the appointment",
          "type": "string"
        },
        "href": {
          "description": "Reference of the attached document to the appointment",
          "type": "string"
        },
        "name": {
          "description": "Name of the attached document",
          "type": "string"
        },
        "description": {
          "description": "A short description of the attached document",
          "type": "string"
        },
        "mimeType": {
          "description": "The mime type of the attached document",
          "type": "string"
        },
        "sizeUnit": {
          "description": "Unit of measure used for the size",
          "type": "string"
        },
        "size": {
          "description": "The size in Bytes of the document or attachment. If this component contains the embedded data then the size is the size of the embedded data; if it is a reference without the data then it is the size of the referenced document",
          "type": "number",
          "format": "double"
        },
        "url": {
          "description": "The URL of the attached document",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the attachment",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF646RelatedPartyRef": {
      "description": "Related party reference. A related party defines a party linked to the appointment.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of a related party",
          "type": "string"
        },
        "href": {
          "description": "Reference of the related party",
          "type": "string"
        },
        "name": {
          "description": "Name of the related party",
          "type": "string"
        },
        "role": {
          "description": "Role played by the related party (customer, technician,… for example)",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the entity",
          "type": "string"
        }
      }
    },
    "TMF646Place": {
      "description": "Describe a place for the appointment (using either geographicAddress or GeographicLocation) and/or identify an existing place (either an existing geographicAddress or existing GeographicLocation or existing GeographicSite) through its id",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of a place - Must be a geographicAddress id or GeographicLocation id or GeographicSite id",
          "type": "string"
        },
        "href": {
          "description": "Reference of a place",
          "type": "string"
        },
        "name": {
          "description": "Short text giving the complete place",
          "type": "string"
        },
        "role": {
          "description": "Role of the place - could be an installation place for example",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of place",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF646RelatedEntityRef": {
      "description": "Related entity reference. Related entity linked to the appointment",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the related entity",
          "type": "string"
        },
        "href": {
          "description": "Reference of the related entity",
          "type": "string"
        },
        "name": {
          "description": "Name of the related entity",
          "type": "string"
        },
        "role": {
          "description": "Role played by the related entity",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the entity",
          "type": "string"
        }
      }
    },
    "TMF646Note": {
      "description": "Extra information about the appointment",
      "type": "object",
      "properties": {
        "date": {
          "description": "Date of the note",
          "type": "string",
          "format": "date-time"
        },
        "author": {
          "description": "Author of the note",
          "type": "string"
        },
        "text": {
          "description": "Text of the note",
          "type": "string"
        }
      }
    },
    "TMF646Characteristic": {
      "description": "Characteristic of the appointment",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the characteristic",
          "type": "string"
        },
        "value": {
          "description": "Value of the characteristic",
          "type": "string"
        }
      }
    },
    "TMF646TimeSlot": {
      "description": "Time slots for booking an appointment with a party",
      "type": "object",
      "properties": {
        "validFor": {
          "$ref": "#/definitions/TMF646TimePeriod"
        },
        "relatedParty": {
          "$ref": "#/definitions/TMF646RelatedPartyRef"
        }
      }
    },
    "TMF646CalendarEventRef": {
      "description": "Event in a calendar associated to the appointment",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the calendar event",
          "type": "string"
        },
        "href": {
          "description": "Reference of the calendar event",
          "type": "string"
        },
        "description": {
          "description": "A short text describing the calendar event for this appointment",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the calendar event",
          "type": "string"
        }
      }
    },
    "TMF646ContactMedium": {
      "description": "Indicates the contact medium that could be used for the appointment",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of the contact medium : phone number or email address",
          "type": "string"
        },
        "characteristic": {
          "$ref": "#/definitions/TMF646MediumCharacteristic"
        }
      }
    },
    "TMF646MediumCharacteristic": {
      "description": "Describes the characteristics of the contact medium used for the appointment",
      "type": "object",
      "properties": {
        "phoneNumber": {
          "description": "The primary phone number of the contact",
          "type": "string"
        },
        "emailAddress": {
          "description": "Full email address in standard format",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the medium characteristic",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF646Hub": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the hub",
          "type": "string"
        },
        "callback": {
          "description": "The callback being registered",
          "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
          "type": "string"
        }
      }
    },
    "TMF646HubInput": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
      "type": "object",
      "properties": {
        "callback": {
          "description": "The callback being registered",
          "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
          "type": "string"
        }
      }
    },
    "TMF646SearchTimeSlotPostInput": {
      "description": "",
      "required": [
        "requestedTimeSlot"
      ],
      "type": "object",
      "properties": {
        "relatedParty": {
          "$ref": "#/definitions/TMF646RelatedPartyRef"
        },
        "relatedEntity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF646RelatedEntityRef"
          }
        },
        "place": {
          "$ref": "#/definitions/TMF646Place"
        },
        "requestedTimeSlot": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF646TimeSlot"
          }
        }
      }
    },
    "TMF646SearchTimeSlot": {
      "description": "This task resource is used to retrieve available time slots. One of this available time slot is after used to create or reschedule an appointment",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the search time slot request",
          "type": "string"
        },
        "href": {
          "description": "Reference to access the search time slot resource",
          "type": "string"
        },
        "status": {
          "description": "Status of the search time slot (rejected, inProgress, done or terminatedWithError)",
          "type": "string"
        },
        "searchDate": {
          "description": "Date when the search time slot is performed",
          "type": "string",
          "format": "date-time"
        },
        "searchResult": {
          "description": "Result of the search time slot (success or fail for example)",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to schema describing this REST resource",
          "type": "string"
        },
        "availableTimeSlot": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF646TimeSlot"
          }
        }
      }
    },
    "TMF648QuoteState": {
      "description": "",
      "type": "string",
      "enum": [
        "inProgress",
        "pending",
        "cancelled",
        "approved",
        "accepted",
        "rejected"
      ]
    },
    "TMF648QuoteItemState": {
      "description": "",
      "type": "string",
      "enum": [
        "inProgress",
        "pending",
        "approved",
        "rejected"
      ]
    },
    "TMF648ErrorRepresentation": {
      "description": "Standard TMF error representation",
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Application related code (as defined in the API or from a common list)",
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "description": "Text that explains the reason for error. This can be shown to a client user.",
          "type": "string"
        },
        "message": {
          "description": "Text that provide mode details and corrective actions related to the error.  This can be shown to a client user.",
          "type": "string"
        },
        "status": {
          "description": "Http error code extension like 400-2 for example",
          "type": "string"
        },
        "referenceError": {
          "description": "url pointing to documentation describing the error",
          "type": "string"
        },
        "@type": {
          "description": "Type of the REST resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource",
          "type": "string"
        }
      }
    },
    "TMF648TimePeriod": {
      "description": "",
      "required": [
        "startDate",
        "endDate"
      ],
      "type": "object",
      "properties": {
        "startDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TMF648Authorization": {
      "description": "If special discount or special product or service tariff need an approval for ISP Sales\nrepresentative n+1 or n+2 – these approvals are described there. This is approval at the whole quote\nlevel.",
      "type": "object",
      "properties": {
        "authorizationName": {
          "description": "Name of the required authorization",
          "type": "string"
        },
        "authorizationState": {
          "description": "authorization state (approved or declined)",
          "type": "string"
        },
        "authorizationRequestedDate": {
          "description": "Date when the authorization is requested for.",
          "type": "string",
          "format": "date"
        },
        "authorizationGivenDate": {
          "description": "Date when the authorization (approved or declined) has been done.",
          "type": "string",
          "format": "date"
        },
        "authorizationSignatureRepresentation": {
          "description": "to describe a digital or manual signature",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the authorization.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource",
          "type": "string"
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648AttachmentRef"
          }
        },
        "approver": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648RelatedPartyRef"
          }
        }
      }
    },
    "TMF648AttachmentRef": {
      "description": "Complements the description of an element (for instance a product) through video, pictures...",
      "type": "object",
      "properties": {
        "description": {
          "description": "Type of the attachment  (ex: pdf)",
          "type": "string"
        },
        "href": {
          "description": "Reference of the attachment",
          "type": "string"
        },
        "id": {
          "description": "Id of the attachment",
          "type": "string"
        },
        "url": {
          "description": "Uniform Resource Locator, is a web page address (a subset of URI).",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the attachment",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF648PriceAlteration": {
      "description": "Is an amount, usually of money, that modifies the price charged for an order item",
      "required": [
        "priceType"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "A short descriptive name such as \"Monthly discount\".",
          "type": "string"
        },
        "description": {
          "description": "A narrative that explains in detail the semantics of this order item price alteration.",
          "type": "string"
        },
        "priceType": {
          "description": "A category that describes the price such as recurring, one time and usage.",
          "type": "string"
        },
        "unitOfMeasure": {
          "description": "Could be minutes, GB...",
          "type": "string"
        },
        "recurringChargePeriod": {
          "description": "Could be month, week...",
          "type": "string"
        },
        "applicationDuration": {
          "description": "Duration during which the alteration applies on the order item price (for instance 2 months free of charge for the recurring charge).",
          "type": "integer",
          "format": "int32"
        },
        "priority": {
          "description": "Priority level for applying this alteration among all the defined alterations on the order item price",
          "type": "integer",
          "format": "int32"
        },
        "@type": {
          "description": "Indicates the (class) type of the price alteration",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource",
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/TMF648Price"
        }
      }
    },
    "TMF648Price": {
      "description": "Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price Alteration",
      "type": "object",
      "properties": {
        "taxIncludedAmount": {
          "$ref": "#/definitions/TMF648Money"
        },
        "dutyFreeAmount": {
          "$ref": "#/definitions/TMF648Money"
        },
        "taxRate": {
          "description": "Tax rate",
          "type": "number",
          "format": "float"
        },
        "percentage": {
          "description": "Percentage to apply only for ProdOfferPriceAlteration",
          "type": "number",
          "format": "float"
        },
        "@type": {
          "description": "Indicates the (class) type of the price",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF648QuoteItem": {
      "description": "A quote items describe an action to be performed on a productOffering or a product in order to get pricing elements and condition",
      "required": [
        "id",
        "state",
        "action"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of the quote item (generally it is a sequence number 01, 02, 03, ...).",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/TMF648QuoteItemState"
        },
        "action": {
          "description": "Action to be perfomed on this quote item (add, modify, remove, etc.).",
          "type": "string"
        },
        "quantity": {
          "description": "Indicates the quantity to be quoted",
          "type": "integer",
          "format": "int32"
        },
        "@type": {
          "description": "Indicates the base (class) type of the quote Item.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource",
          "type": "string"
        },
        "quoteItemRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648QuoteItemRelationship"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648AttachmentRef"
          }
        },
        "quoteItemAuthorization": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648Authorization"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648Note"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648RelatedPartyRef"
          }
        },
        "appointment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648AppointmentRef"
          }
        },
        "productOffering": {
          "$ref": "#/definitions/TMF648ProductOfferingRef"
        },
        "quoteItemPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648QuotePrice"
          }
        },
        "product": {
          "$ref": "#/definitions/TMF648Product"
        }
      }
    },
    "TMF648RelatedPartyRef": {
      "description": "A related party defines party or party role linked to a quote.",
      "required": [
        "role"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of a related party",
          "type": "string"
        },
        "href": {
          "description": "Reference of the related party, could be a party reference or a party role reference.",
          "type": "string"
        },
        "role": {
          "description": "Role of the related party",
          "type": "string"
        },
        "name": {
          "description": "Name of the related party",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the base (class) type of the party.",
          "type": "string"
        }
      }
    },
    "TMF648Note": {
      "description": "Extra information about the quote.",
      "required": [
        "text"
      ],
      "type": "object",
      "properties": {
        "date": {
          "description": "Date of the note",
          "type": "string",
          "format": "date-time"
        },
        "author": {
          "description": "Author of the note",
          "type": "string"
        },
        "text": {
          "description": "Text of the note",
          "type": "string"
        }
      }
    },
    "TMF648Product": {
      "description": "Configure the product characteristics (only configurable characteristics and necessary only if a non default value is selected) and/or identify the product that needs to be modified/deleted",
      "required": [
        "href",
        "id"
      ],
      "type": "object",
      "properties": {
        "href": {
          "description": "Reference of the product",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the product",
          "type": "string"
        },
        "name": {
          "description": "Name of the product",
          "type": "string"
        },
        "productRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648ProductRelationship"
          }
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648Place"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648ProductCharacteristic"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648RelatedPartyRef"
          }
        },
        "productSpecification": {
          "$ref": "#/definitions/TMF648ProductSpecificationRef"
        }
      }
    },
    "TMF648ProductCharacteristic": {
      "description": "Characteristics of the product to be quoted",
      "required": [
        "name",
        "value"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the characteristic",
          "type": "string"
        },
        "value": {
          "description": "Value of the characteristic",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "This field provided a link to the schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF648Quote": {
      "description": "A quote which can be used to negotiate service and product acquisition or modification between\na customer and a service provider",
      "discriminator": "id",
      "required": [
        "quoteItem"
      ],
      "type": "object",
      "properties": {
        "href": {
          "description": "Hyperlink to access the quote",
          "type": "string"
        },
        "id": {
          "description": "ID attributed by quoting system",
          "type": "string"
        },
        "externalId": {
          "description": "ID given by the consumer and only understandable by him (to facilitate his searches afterwards)",
          "type": "string"
        },
        "version": {
          "description": "Quote version because if the customer rejected the quote but negociations still open a new version of the quote is managed",
          "type": "string"
        },
        "description": {
          "description": "Description of the quote",
          "type": "string"
        },
        "category": {
          "description": "Used to categorize the quote from a business perspective that can be useful for the CRM system (e.g. “enterprise”, “residential”, ...)",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/TMF648QuoteState"
        },
        "quoteDate": {
          "description": "Date when the quote was created",
          "type": "string",
          "format": "date-time"
        },
        "expectedQuoteCompletionDate": {
          "description": "This is expected date - from quote requester - to have a response for this quote.",
          "type": "string",
          "format": "date"
        },
        "expectedFulfillmentStartDate": {
          "description": "This is the date wished by the requester to have the requested quote item delivered",
          "type": "string",
          "format": "date"
        },
        "effectiveQuoteCompletionDate": {
          "description": "Date when the quoted was Cancelled or Rejected or Accepted",
          "type": "string",
          "format": "date-time"
        },
        "validFor": {
          "$ref": "#/definitions/TMF648TimePeriod"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648Note"
          }
        },
        "billingAccount": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648BillingAccountRef"
          }
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648AgreementRef"
          }
        },
        "quoteAuthorization": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648Authorization"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648RelatedPartyRef"
          }
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648ContactMedium"
          }
        },
        "quoteItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648QuoteItem"
          }
        },
        "quoteTotalPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648QuotePrice"
          }
        },
        "@baseType": {
          "description": "Indicates the base (class) type of the quote.",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the quote.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource.",
          "type": "string"
        }
      }
    },
    "TMF648BillingAccountRef": {
      "description": "A BillingAccount is a detailed description of a bill structure.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the billing account",
          "type": "string"
        },
        "href": {
          "description": "Reference of the billing account",
          "type": "string"
        },
        "name": {
          "description": "Name of the billing account",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the billing account.",
          "type": "string"
        }
      }
    },
    "TMF648AgreementRef": {
      "description": "An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "href": {
          "description": "Reference of the agreement",
          "type": "string"
        },
        "id": {
          "description": "Id of the agreement",
          "type": "string"
        },
        "name": {
          "description": "Name of the agreement",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the agreement",
          "type": "string"
        }
      }
    },
    "TMF648ProductOfferingRef": {
      "description": "A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product offering",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product offering",
          "type": "string"
        },
        "name": {
          "description": "Name of the product offering.",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicate the class (type) of product offering.",
          "type": "string"
        }
      }
    },
    "TMF648ProductRelationship": {
      "description": "Represents a relationship between products - which potentially holds an entire product object or a product reference (with partial content).",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of the product relationship. It can be :\n     - \"bundled\" if the product is a bundle and you want to describe the \"bundled\" products inside this bundle\n     - \"reliesOn\" if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product)\n\"targets\" or \"isTargeted\" (depending on the way of expressing the link) for any other kind of links that may be useful.",
          "type": "string"
        },
        "product": {
          "$ref": "#/definitions/TMF648Product"
        }
      }
    },
    "TMF648ContactMedium": {
      "description": "Indicates the contact medium that could be used to contact the party",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "preferred": {
          "description": "If true, indicates that is the preferred contact medium.",
          "type": "boolean"
        },
        "type": {
          "description": "Type of the contact medium, such as: email address, telephone number, postal address.",
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF648TimePeriod"
        },
        "characteristic": {
          "$ref": "#/definitions/TMF648MediumCharacteristic"
        }
      }
    },
    "TMF648QuotePrice": {
      "description": "Description of price and discount awarded.",
      "required": [
        "priceType"
      ],
      "type": "object",
      "properties": {
        "priceType": {
          "description": "indicate if the price is for recurrent or no-recurrent charge",
          "type": "string"
        },
        "recurringChargePeriod": {
          "description": "Used for recurring charge to indicate period (month, week, etc..)",
          "type": "string"
        },
        "unitOfMeasure": {
          "description": "Unit of Measure if price depending on it (Gb, SMS volume, etc..).",
          "type": "string"
        },
        "name": {
          "description": "Name of the quote /quote item price",
          "type": "string"
        },
        "description": {
          "description": "Description of the quote/quote item price.",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the base (class) type of the quote price",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "link to the schema describing this REST resource",
          "type": "string"
        },
        "priceAlteration": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648PriceAlteration"
          }
        },
        "price": {
          "$ref": "#/definitions/TMF648Price"
        }
      }
    },
    "TMF648MediumCharacteristic": {
      "description": "Describes the contact medium characteristics that could be used to contact a party (an individual or an organization).",
      "type": "object",
      "properties": {
        "city": {
          "description": "The city",
          "type": "string"
        },
        "country": {
          "description": "The country",
          "type": "string"
        },
        "emailAddress": {
          "description": "Full email address in standard format",
          "type": "string"
        },
        "type": {
          "description": "Type of medium (fax, mobile phone...).",
          "type": "string"
        },
        "postCode": {
          "description": "Postcode",
          "type": "string"
        },
        "stateOrProvince": {
          "description": "State or Province",
          "type": "string"
        },
        "street1": {
          "description": "Describe the street - part 1",
          "type": "string"
        },
        "street2": {
          "description": "Describe the street - part 2 - . Complementary street description",
          "type": "string"
        },
        "faxNumber": {
          "description": "The fax number of the contact.",
          "type": "string"
        },
        "phoneNumber": {
          "description": "The primary phone number of the contact.",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the medium characteristic",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF648AppointmentRef": {
      "description": "Appointment description if any required for this quote.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "href": {
          "description": "Hyperlink to access the appointment",
          "type": "string"
        },
        "id": {
          "description": "Identifier of the appointment",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the appointment.",
          "type": "string"
        }
      }
    },
    "TMF648ProductSpecificationRef": {
      "description": "A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.",
      "discriminator": "id",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product specification",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product specification",
          "type": "string"
        },
        "version": {
          "description": "Version of the product specification",
          "type": "string"
        },
        "name": {
          "description": "Name of the product specification",
          "type": "string"
        },
        "targetResourceSchema": {
          "$ref": "#/definitions/TMF648TargetResourceSchema"
        }
      }
    },
    "TMF648Money": {
      "description": "A base / value business entity used to represent money",
      "required": [
        "value",
        "unit"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "A positive floating point number",
          "type": "number",
          "format": "float"
        },
        "unit": {
          "description": "Currency (ISO4217 norm uses 3 letters to define the currency",
          "type": "string"
        }
      }
    },
    "TMF648Place": {
      "description": "Place defines the places where the quoted products are sold or delivered",
      "discriminator": "id",
      "required": [
        "role"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the place",
          "type": "string"
        },
        "href": {
          "description": "Unique reference of the place",
          "type": "string"
        },
        "name": {
          "description": "A user-friendly name for the place, such as 'Paris Store', 'Main Home'",
          "type": "string"
        },
        "role": {
          "description": "Role of the place (for instance: 'home delivery', 'shop retrieval').",
          "type": "string"
        },
        "@referredType": {
          "description": "Type of Place",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF648TargetResourceSchema": {
      "description": "Target to the schema describing the product spec resource (and type)",
      "type": "object",
      "properties": {
        "@type": {
          "description": "Indicates the (class) type of resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "This field provided a link to the schema describing this REST resource.",
          "type": "string"
        }
      }
    },
    "TMF648QuoteItemRelationship": {
      "description": "Used to describe relationship between quote item. These relationships could have an impact on pricing and conditions.",
      "required": [
        "id",
        "type"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the related order item (must be in the same quote).",
          "type": "string"
        },
        "type": {
          "description": "Relationship type as relies on, bundles, etc...",
          "type": "string"
        }
      }
    },
    "TMF648QuoteItemPOSTRequest": {
      "description": "This structure is used to describe Quote item only in the POST operation for the request.",
      "required": [
        "id",
        "action"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of the quote item (generally it is a sequence number 01, 02, 03, ...).",
          "type": "string"
        },
        "action": {
          "description": "Action to be perfomed on this quote item (add, modify, remove, etc.).",
          "type": "string"
        },
        "quantity": {
          "description": "Indicates the quantity to be quoted",
          "type": "integer",
          "format": "int32",
          "default": 1
        },
        "@type": {
          "description": "Indicates the base (class) type of the quote Item.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource",
          "type": "string"
        },
        "quoteItemRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648QuoteItemRelationship"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648AttachmentRef"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648Note"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648RelatedPartyRef"
          }
        },
        "appointment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648AppointmentRef"
          }
        },
        "productOffering": {
          "$ref": "#/definitions/TMF648ProductOfferingRef"
        },
        "product": {
          "$ref": "#/definitions/TMF648Product"
        }
      }
    },
    "TMF648QuotePOSTRequest": {
      "description": "This structure is used only in the POST operation for the request.",
      "required": [
        "quoteItem"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the quote - Must be only used if version > 1\nFor a quote in V1.0 POST should be used without specifying the id, the quote system is in charge of generating the id. For a quote creation in other version than V1.0, the id should be specified",
          "type": "string"
        },
        "externalId": {
          "description": "ID given by the consumer and only understandable by him (to facilitate his searches afterwards)",
          "type": "string"
        },
        "version": {
          "description": "Quote version because if the customer rejected the quote but negociations still open a new version of the quote is managed",
          "type": "string"
        },
        "description": {
          "description": "Description of the quote",
          "type": "string"
        },
        "category": {
          "description": "Used to categorize the quote from a business perspective that can be useful for the CRM system (e.g. “enterprise”, “residential”, ...)",
          "type": "string"
        },
        "expectedQuoteCompletionDate": {
          "description": "This is expected date - from quote requester - to have a response for this quote.",
          "type": "string",
          "format": "date"
        },
        "expectedFulfillmentStartDate": {
          "description": "This is the date wished by the requester to have the requested quote item delivered",
          "type": "string",
          "format": "date"
        },
        "validFor": {
          "$ref": "#/definitions/TMF648TimePeriod"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648Note"
          }
        },
        "billingAccount": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648BillingAccountRef"
          }
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648AgreementRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648RelatedPartyRef"
          }
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648ContactMedium"
          }
        },
        "quoteItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF648QuoteItemPOSTRequest"
          }
        },
        "@baseType": {
          "description": "Indicates the base (class) type of the quote.",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the quote.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource.",
          "type": "string"
        }
      }
    },
    "TMF648Hub": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
      "discriminator": "id",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the hub",
          "type": "string"
        },
        "callback": {
          "description": "The callback being registered",
          "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
          "type": "string"
        }
      }
    },
    "TMF648HubInput": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
      "type": "object",
      "properties": {
        "callback": {
          "description": "The callback being registered",
          "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
          "type": "string"
        }
      }
    },
    "TMF651Agreement": {
      "type": "object",
      "description": "An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
      "required": [
        "name"
      ],
      "properties": {
        "agreementPeriod": {
          "$ref": "#/definitions/TMF651TimePeriod",
          "description": "The time period during which the Agreement is in effect."
        },
        "completionDate": {
          "$ref": "#/definitions/TMF651TimePeriod",
          "description": "Date at which the agreement is completed"
        },
        "description": {
          "type": "string",
          "description": "Narrative that explains the agreement and details about the it , such as why the agreement is taking place."
        },
        "documentNumber": {
          "type": "integer",
          "description": "A reference number assigned to an Agreement that follows a prescribed numbering system."
        },
        "href": {
          "type": "string",
          "description": "Unique url identifying the agreement as a resource"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for the agreement"
        },
        "initialDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the agreement was initialized"
        },
        "name": {
          "type": "string",
          "description": "A human-readable name for the agreement"
        },
        "statementOfIntent": {
          "type": "string",
          "description": "An overview and goals of the Agreement."
        },
        "status": {
          "type": "string",
          "description": "The current status of the agreement. Typical values are: in process, approved and rejected."
        },
        "type": {
          "type": "string",
          "description": "The type of the agreement. For example \"commercial\"."
        },
        "version": {
          "type": "string",
          "description": "A string identifying the version of the agreement."
        },
        "agreementSpecification": {
          "$ref": "#/definitions/TMF651AgreementSpecificationRef"
        },
        "agreementItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementItem"
          }
        },
        "engagedPartyRole": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651PartyRoleRef"
          }
        },
        "agreementAuthorization": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementAuthorization"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651Characteristic"
          }
        },
        "associatedAgreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementRef"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF651Agreement_Create": {
      "type": "object",
      "description": "An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.\nSkipped properties: id,href",
      "required": [
        "name",
        "type",
        "engagedPartyRole",
        "agreementItem"
      ],
      "properties": {
        "agreementPeriod": {
          "$ref": "#/definitions/TMF651TimePeriod",
          "description": "The time period during which the Agreement is in effect."
        },
        "completionDate": {
          "$ref": "#/definitions/TMF651TimePeriod",
          "description": "Date at which the agreement is completed"
        },
        "description": {
          "type": "string",
          "description": "Narrative that explains the agreement and details about the it , such as why the agreement is taking place."
        },
        "documentNumber": {
          "type": "integer",
          "description": "A reference number assigned to an Agreement that follows a prescribed numbering system."
        },
        "initialDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the agreement was initialized"
        },
        "name": {
          "type": "string",
          "description": "A human-readable name for the agreement"
        },
        "statementOfIntent": {
          "type": "string",
          "description": "An overview and goals of the Agreement."
        },
        "status": {
          "type": "string",
          "description": "The current status of the agreement. Typical values are: in process, approved and rejected."
        },
        "type": {
          "type": "string",
          "description": "The type of the agreement. For example \"commercial\"."
        },
        "version": {
          "type": "string",
          "description": "A string identifying the version of the agreement."
        },
        "agreementSpecification": {
          "$ref": "#/definitions/TMF651AgreementSpecificationRef"
        },
        "agreementItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementItem"
          }
        },
        "engagedPartyRole": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651PartyRoleRef"
          }
        },
        "agreementAuthorization": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementAuthorization"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651Characteristic"
          }
        },
        "associatedAgreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementRef"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF651Agreement_Update": {
      "type": "object",
      "description": "An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.\nSkipped properties: id,href,id,href,completionDate",
      "properties": {
        "agreementPeriod": {
          "$ref": "#/definitions/TMF651TimePeriod",
          "description": "The time period during which the Agreement is in effect."
        },
        "description": {
          "type": "string",
          "description": "Narrative that explains the agreement and details about the it , such as why the agreement is taking place."
        },
        "documentNumber": {
          "type": "integer",
          "description": "A reference number assigned to an Agreement that follows a prescribed numbering system."
        },
        "initialDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the agreement was initialized"
        },
        "name": {
          "type": "string",
          "description": "A human-readable name for the agreement"
        },
        "statementOfIntent": {
          "type": "string",
          "description": "An overview and goals of the Agreement."
        },
        "status": {
          "type": "string",
          "description": "The current status of the agreement. Typical values are: in process, approved and rejected."
        },
        "type": {
          "type": "string",
          "description": "The type of the agreement. For example \"commercial\"."
        },
        "version": {
          "type": "string",
          "description": "A string identifying the version of the agreement."
        },
        "agreementSpecification": {
          "$ref": "#/definitions/TMF651AgreementSpecificationRef"
        },
        "agreementItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementItem"
          }
        },
        "engagedPartyRole": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651PartyRoleRef"
          }
        },
        "agreementAuthorization": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementAuthorization"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651Characteristic"
          }
        },
        "associatedAgreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementRef"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF651AgreementSpecification": {
      "type": "object",
      "description": "A template of an agreement that can be used when establishing partnerships.",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the agreement specification is about."
        },
        "href": {
          "type": "string",
          "description": "Reference of the agreement specification"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the agreement specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "Indicates that this agreement specification is a grouping of other agreement specifications. The list of bundled agreement specifications is provided via the specificationRelationship property."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Indicates the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the agreement specification"
        },
        "validFor": {
          "$ref": "#/definitions/TMF651TimePeriod",
          "description": "The period for which the agreement specification is valid"
        },
        "version": {
          "type": "string",
          "description": "Agreement specification version"
        },
        "serviceCategory": {
          "$ref": "#/definitions/TMF651CategoryRef"
        },
        "specCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementSpecCharacteristic"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651RelatedPartyRef"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementAttachment"
          }
        },
        "specificationRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementSpecificationRelationship"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF651AgreementSpecification_Create": {
      "type": "object",
      "description": "A template of an agreement that can be used when establishing partnerships.\nSkipped properties: id,href",
      "required": [
        "name",
        "attachment"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the agreement specification is about."
        },
        "isBundle": {
          "type": "boolean",
          "description": "Indicates that this agreement specification is a grouping of other agreement specifications. The list of bundled agreement specifications is provided via the specificationRelationship property."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Indicates the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the agreement specification"
        },
        "validFor": {
          "$ref": "#/definitions/TMF651TimePeriod",
          "description": "The period for which the agreement specification is valid"
        },
        "version": {
          "type": "string",
          "description": "Agreement specification version"
        },
        "serviceCategory": {
          "$ref": "#/definitions/TMF651CategoryRef"
        },
        "specCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementSpecCharacteristic"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651RelatedPartyRef"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementAttachment"
          }
        },
        "specificationRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementSpecificationRelationship"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF651AgreementSpecification_Update": {
      "type": "object",
      "description": "A template of an agreement that can be used when establishing partnerships.\nSkipped properties: id,href,id,href",
      "properties": {
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the agreement specification is about."
        },
        "isBundle": {
          "type": "boolean",
          "description": "Indicates that this agreement specification is a grouping of other agreement specifications. The list of bundled agreement specifications is provided via the specificationRelationship property."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Indicates the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the agreement specification"
        },
        "validFor": {
          "$ref": "#/definitions/TMF651TimePeriod",
          "description": "The period for which the agreement specification is valid"
        },
        "version": {
          "type": "string",
          "description": "Agreement specification version"
        },
        "serviceCategory": {
          "$ref": "#/definitions/TMF651CategoryRef"
        },
        "specCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementSpecCharacteristic"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651RelatedPartyRef"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementAttachment"
          }
        },
        "specificationRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementSpecificationRelationship"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF651TimePeriod": {
      "type": "object",
      "description": "A base / value business entity used to represent a period of time between two timepoints.",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, ending at the TimePeriod."
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, starting at the TimePeriod"
        }
      }
    },
    "TMF651AgreementSpecificationRef": {
      "type": "object",
      "description": "AgreementSpecification reference. An AgreementSpecification represents a template of an agreement that can be used when establishing partnerships.",
      "properties": {
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the agreement specification is about."
        },
        "href": {
          "type": "string",
          "description": "Reference URL of the agreement specification"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the agreement specification"
        },
        "name": {
          "type": "string",
          "description": "Name of the agreement specification"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF651AgreementItem": {
      "type": "object",
      "description": "A part of the agreement expressed in terms of a product offering and possibly including specific terms and conditions.",
      "properties": {
        "productOffering": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651ProductOfferingRef"
          }
        },
        "termOrCondition": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementTermOrCondition"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        }
      }
    },
    "TMF651PartyRoleRef": {
      "type": "object",
      "description": "Party role reference. A party role represents the part played by a party in a given context.",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "href": {
          "type": "string",
          "description": "Reference of the product"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the product"
        },
        "name": {
          "type": "string",
          "description": "The name of the referred party role."
        },
        "partyId": {
          "type": "string",
          "description": "The identifier of the engaged party that is linked to the PartyRole object."
        },
        "partyName": {
          "type": "string",
          "description": "The name of the engaged party that is linked to the PartyRole object."
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF651AgreementAuthorization": {
      "type": "object",
      "description": "A business participant that is responsible for approving the agreement.",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date associated with the authorization state."
        },
        "signatureRepresentation": {
          "type": "string",
          "description": "Indication that represents whether the signature is a physical paper signature or a digital signature."
        },
        "state": {
          "type": "string",
          "description": "Current status of the authorization, for example in process, approved, rejected."
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        }
      }
    },
    "TMF651Characteristic": {
      "type": "object",
      "description": "Describes a given characteristic of an object or entity through a name/value pair.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the characteristic"
        },
        "value": {
          "type": "string",
          "description": "Value of the characteristic"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        }
      }
    },
    "TMF651AgreementRef": {
      "type": "object",
      "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
      "required": [
        "id",
        "href"
      ],
      "properties": {
        "href": {
          "type": "string",
          "description": "Reference of the agreement"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the agreement"
        },
        "name": {
          "type": "string",
          "description": "Name of the agreement"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF651ProductOfferingRef": {
      "type": "object",
      "description": "ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
      "properties": {
        "href": {
          "type": "string",
          "description": "Reference of the product offering"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the product offering"
        },
        "name": {
          "type": "string",
          "description": "Name of the product offering"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF651AgreementTermOrCondition": {
      "type": "object",
      "description": "Aspects of the agreement not formally specified elsewhere in the agreement and that cannot be captured elsewhere in a formal notation, or automatically monitored and require a more human level of management.",
      "properties": {
        "description": {
          "type": "string",
          "description": "Text that explains the term or condition of the agreement."
        },
        "id": {
          "type": "string",
          "description": "Unique number assigned for reference."
        },
        "validFor": {
          "$ref": "#/definitions/TMF651TimePeriod",
          "description": "The period of time during which the term or condition of the agreement applies."
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        }
      }
    },
    "TMF651CategoryRef": {
      "type": "object",
      "description": "The category for grouping recommendations",
      "properties": {
        "href": {
          "type": "string",
          "description": "Hypertext Reference of the category"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of category"
        },
        "name": {
          "type": "string",
          "description": "Name of the category."
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF651AgreementSpecCharacteristic": {
      "type": "object",
      "description": "A characteristic quality or distinctive feature of an agreement.",
      "properties": {
        "configurable": {
          "type": "boolean",
          "description": "If true, the Boolean indicates that the characteristic is configurable"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the characteristic is"
        },
        "name": {
          "type": "string",
          "description": "Name of the characteristic being specified."
        },
        "validFor": {
          "$ref": "#/definitions/TMF651TimePeriod",
          "description": "The period for which the specification characteristic is valid"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
        },
        "specCharacteristicValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF651AgreementSpecCharacteristicValue"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        }
      }
    },
    "TMF651RelatedPartyRef": {
      "type": "object",
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
      "properties": {
        "href": {
          "type": "string",
          "description": "Reference of the related party, could be a party reference or a party role reference"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related party"
        },
        "name": {
          "type": "string",
          "description": "Name of the related party"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party."
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF651AgreementAttachment": {
      "type": "object",
      "description": "Represents a complementary piece of information to describe the agreement. Could be a document, picture, a video or any kind of multimedia content.",
      "properties": {
        "href": {
          "type": "string",
          "description": "Reference of the attachment"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the attachment"
        },
        "type": {
          "type": "string",
          "description": "Attachment type such as video, picture"
        },
        "url": {
          "type": "string",
          "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        }
      }
    },
    "TMF651AgreementSpecificationRelationship": {
      "type": "object",
      "description": "A relationship between agreement specifications. Typical relationships are substitution and dependency.",
      "properties": {
        "href": {
          "type": "string",
          "description": "Reference of an agreement specification."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the related agreement specification."
        },
        "type": {
          "type": "string",
          "description": "Type of relationship such as, substitution or dependency."
        },
        "validFor": {
          "$ref": "#/definitions/TMF651TimePeriod",
          "description": "The period for which the relationship is valid"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        }
      }
    },
    "TMF651AgreementSpecCharacteristicValue": {
      "type": "object",
      "description": "A number or text that can be assigned to an agreement specification characteristic.",
      "properties": {
        "default": {
          "type": "boolean",
          "description": "Indicates if the value is the default value for a characteristic"
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "Unit of measure for the characteristic, such as minutes, gigabytes (GB) and so on."
        },
        "validFor": {
          "$ref": "#/definitions/TMF651TimePeriod",
          "description": "The period of time for which a value is applicable"
        },
        "value": {
          "type": "string",
          "description": "A discrete value that the characteristic can take on"
        },
        "valueFrom": {
          "type": "string",
          "description": "The low range value that a characteristic can take on"
        },
        "valueTo": {
          "type": "string",
          "description": "The upper range value that a characteristic can take on"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic can take on, such as numeric, text, and so forth"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        }
      }
    },
    "TMF651EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF651EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF651Error": {
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "Application related code."
        },
        "reason": {
          "type": "integer",
          "description": "Text that explains the reason for error."
        },
        "message": {
          "type": "string",
          "description": "(optional) Text that provide more details and corrective actions related to the error."
        },
        "status": {
          "type": "integer",
          "description": "(optional) http error code extension like 400-2"
        },
        "referenceError": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        },
        "@type": {
          "type": "string",
          "description": "(optional) The class type of a REST resource."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "(optional) A link to the schema describing a REST resource."
        }
      }
    },
    "TMF652ResourceOrder": {
      "type": "object",
      "description": "A Resource Order is a request to provision a set of Resources (logical and physical) triggered by the request to provision a Service through a Service Order",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "category": {
          "type": "string",
          "description": "Used to categorize the order from a business perspective that can be useful for the OM system."
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the order was completed"
        },
        "corelationId": {
          "type": "string",
          "description": "ID given by the consumer and only understandable by him (to facilitate his searches afterwards)"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the Resource Order"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to access the order"
        },
        "id": {
          "type": "string",
          "description": "Identifier of an instance of the Resource Order. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type."
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the Resource Order"
        },
        "orderDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the order was created"
        },
        "priority": {
          "type": "integer",
          "description": "A way that can be used by consumers to prioritize orders in OM system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)"
        },
        "requestedCompletionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Requested delivery date from the requestor perspective"
        },
        "requestedStartDate": {
          "type": "string",
          "format": "date-time",
          "description": "Order start date wished by the requestor"
        },
        "state": {
          "type": "string",
          "description": "The life cycle state of the resource."
        },
        "type": {
          "type": "string",
          "description": "Name of the Resource Order type"
        },
        "orderRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF652ResourceOrderRelationship"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF652RelatedPartyRef"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF652Note"
          }
        }
      }
    },
    "TMF652ResourceOrder_Create": {
      "type": "object",
      "description": "A Resource Order is a request to provision a set of Resources (logical and physical) triggered by the request to provision a Service through a Service Order\nSkipped properties: id,href",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "category": {
          "type": "string",
          "description": "Used to categorize the order from a business perspective that can be useful for the OM system."
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the order was completed"
        },
        "corelationId": {
          "type": "string",
          "description": "ID given by the consumer and only understandable by him (to facilitate his searches afterwards)"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the Resource Order"
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the Resource Order"
        },
        "orderDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the order was created"
        },
        "priority": {
          "type": "integer",
          "description": "A way that can be used by consumers to prioritize orders in OM system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)"
        },
        "requestedCompletionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Requested delivery date from the requestor perspective"
        },
        "requestedStartDate": {
          "type": "string",
          "format": "date-time",
          "description": "Order start date wished by the requestor"
        },
        "state": {
          "type": "string",
          "description": "The life cycle state of the resource."
        },
        "type": {
          "type": "string",
          "description": "Name of the Resource Order type"
        },
        "orderRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF652ResourceOrderRelationship"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF652RelatedPartyRef"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF652Note"
          }
        }
      }
    },
    "TMF652ResourceOrder_Update": {
      "type": "object",
      "description": "A Resource Order is a request to provision a set of Resources (logical and physical) triggered by the request to provision a Service through a Service Order\nSkipped properties: id,href,id,href,corelationId,orderDate,completionDate",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "category": {
          "type": "string",
          "description": "Used to categorize the order from a business perspective that can be useful for the OM system."
        },
        "description": {
          "type": "string",
          "description": "free-text description of the Resource Order"
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the Resource Order"
        },
        "priority": {
          "type": "integer",
          "description": "A way that can be used by consumers to prioritize orders in OM system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)"
        },
        "requestedCompletionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Requested delivery date from the requestor perspective"
        },
        "requestedStartDate": {
          "type": "string",
          "format": "date-time",
          "description": "Order start date wished by the requestor"
        },
        "state": {
          "type": "string",
          "description": "The life cycle state of the resource."
        },
        "type": {
          "type": "string",
          "description": "Name of the Resource Order type"
        },
        "orderRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF652ResourceOrderRelationship"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF652RelatedPartyRef"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF652Note"
          }
        }
      }
    },
    "TMF652ResourceOrderRelationship": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of related order item, can be:\n<ul>\n <li><ul>\n <li>\"dependency\" if the order item needs to be \"not started\" until another order item is complete </li>\n <li>\"cross-reference\" to keep track of the source order (service order)</li>\n</ul>\n</li>\n</ul>\n<ul>\n <li><ul>\n <li>\n</li>\n</ul>\n</li>\n</ul>"
        },
        "resourceOrder": {
          "$ref": "#/definitions/TMF652ResourceOrderRef"
        },
        "serviceOrder": {
          "$ref": "#/definitions/TMF652ServiceOrderRef"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF652RelatedPartyRef": {
      "type": "object",
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
      "required": [
        "id OR href OR name"
      ],
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the related party, could be a party reference or a party role reference"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related party"
        },
        "name": {
          "type": "string",
          "description": "Name of the related party"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party."
        }
      }
    },
    "TMF652Note": {
      "type": "object",
      "description": "Extra information about a given entity",
      "required": [
        "text"
      ],
      "properties": {
        "author": {
          "type": "string",
          "description": "Author of the note"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "Date of the note"
        },
        "text": {
          "type": "string",
          "description": "Text of the note"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        }
      }
    },
    "TMF652ResourceOrderRef": {
      "type": "object",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to access the related Resource Order"
        },
        "id": {
          "type": "string",
          "description": "The unique identifier of the related resource order"
        }
      }
    },
    "TMF652ServiceOrderRef": {
      "type": "object",
      "description": "Service Order reference. Useful to understand the which was the Service order trough which the service was instantiated in the service inventory",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the Service Order"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the Service Order"
        },
        "serviceOrderItemId": {
          "type": "string"
        }
      }
    },
    "TMF652EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF652EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF652Error": {
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "Application related code."
        },
        "reason": {
          "type": "integer",
          "description": "Text that explains the reason for error."
        },
        "message": {
          "type": "string",
          "description": "(optional) Text that provide more details and corrective actions related to the error."
        },
        "status": {
          "type": "integer",
          "description": "(optional) http error code extension like 400-2"
        },
        "referenceError": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        },
        "@type": {
          "type": "string",
          "description": "(optional) The class type of a REST resource."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "(optional) A link to the schema describing a REST resource."
        }
      }
    },
    "TMF653ServiceTest": {
      "type": "object",
      "description": "A service test is an entity that exists that exists for a controlled test invocation on a service. The service \ntest is executed according to a schedule and contains service test configuration parameters that are to be \napplied at execution time, and service test measures that result.",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the service test"
        },
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The end date and time of the service test"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to access the service  test"
        },
        "id": {
          "type": "string",
          "description": "The identifier of the service test"
        },
        "mode": {
          "type": "string",
          "description": "An indication of whether the service test is running in \n\"PROACTIVE\" or \"ONDEMAND\" mode"
        },
        "name": {
          "type": "string",
          "description": "The name of the service test"
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The start date and time of the service test."
        },
        "state": {
          "type": "string",
          "description": "The actual state the service test is in"
        },
        "relatedService": {
          "$ref": "#/definitions/TMF653ServiceRef"
        },
        "testSpecification": {
          "$ref": "#/definitions/TMF653ServiceTestSpecificationRef"
        },
        "testMeasure": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF653TestMeasure"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF653ServiceTestCharacteristic"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF653ServiceTest_Create": {
      "type": "object",
      "description": "A service test is an entity that exists that exists for a controlled test invocation on a service. The service \ntest is executed according to a schedule and contains service test configuration parameters that are to be \napplied at execution time, and service test measures that result.\nSkipped properties: id,href",
      "required": [
        "name",
        "relatedService",
        "testSpecification"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the service test"
        },
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The end date and time of the service test"
        },
        "mode": {
          "type": "string",
          "description": "An indication of whether the service test is running in \n\"PROACTIVE\" or \"ONDEMAND\" mode"
        },
        "name": {
          "type": "string",
          "description": "The name of the service test"
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The start date and time of the service test."
        },
        "state": {
          "type": "string",
          "description": "The actual state the service test is in"
        },
        "relatedService": {
          "$ref": "#/definitions/TMF653ServiceRef"
        },
        "testSpecification": {
          "$ref": "#/definitions/TMF653ServiceTestSpecificationRef"
        },
        "testMeasure": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF653TestMeasure"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF653ServiceTestCharacteristic"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF653ServiceTest_Update": {
      "type": "object",
      "description": "A service test is an entity that exists that exists for a controlled test invocation on a service. The service \ntest is executed according to a schedule and contains service test configuration parameters that are to be \napplied at execution time, and service test measures that result.\nSkipped properties: id,href,id,href",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the service test"
        },
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The end date and time of the service test"
        },
        "mode": {
          "type": "string",
          "description": "An indication of whether the service test is running in \n\"PROACTIVE\" or \"ONDEMAND\" mode"
        },
        "name": {
          "type": "string",
          "description": "The name of the service test"
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The start date and time of the service test."
        },
        "state": {
          "type": "string",
          "description": "The actual state the service test is in"
        },
        "relatedService": {
          "$ref": "#/definitions/TMF653ServiceRef"
        },
        "testSpecification": {
          "$ref": "#/definitions/TMF653ServiceTestSpecificationRef"
        },
        "testMeasure": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF653TestMeasure"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF653ServiceTestCharacteristic"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF653ServiceTestSpecification": {
      "type": "object",
      "description": "The service test specification describes the service test in terms of parameters to be configured and \nmeasures to be taken.",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of a service test specification."
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to access a service test specification."
        },
        "id": {
          "type": "string",
          "description": "Identifier of a service test specification."
        },
        "name": {
          "type": "string",
          "description": "Name of a service test specification."
        },
        "validFor": {
          "$ref": "#/definitions/TMF653TimePeriod",
          "description": "A valid duration of a thing."
        },
        "testMeasureDefinition": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF653TestMeasureDefinition"
          }
        },
        "relatedServiceSpecification": {
          "$ref": "#/definitions/TMF653ServiceSpecificationRef",
          "description": "The related service specification"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF653ServiceTestSpecification_Create": {
      "type": "object",
      "description": "The service test specification describes the service test in terms of parameters to be configured and \nmeasures to be taken.\nSkipped properties: id,href",
      "required": [
        "name",
        "relatedServiceSpecification"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of a service test specification."
        },
        "name": {
          "type": "string",
          "description": "Name of a service test specification."
        },
        "validFor": {
          "$ref": "#/definitions/TMF653TimePeriod",
          "description": "A valid duration of a thing."
        },
        "testMeasureDefinition": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF653TestMeasureDefinition"
          }
        },
        "relatedServiceSpecification": {
          "$ref": "#/definitions/TMF653ServiceSpecificationRef",
          "description": "The related service specification"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF653ServiceTestSpecification_Update": {
      "type": "object",
      "description": "The service test specification describes the service test in terms of parameters to be configured and \nmeasures to be taken.\nSkipped properties: id,href,id,href,validFor",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of a service test specification."
        },
        "name": {
          "type": "string",
          "description": "Name of a service test specification."
        },
        "testMeasureDefinition": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF653TestMeasureDefinition"
          }
        },
        "relatedServiceSpecification": {
          "$ref": "#/definitions/TMF653ServiceSpecificationRef",
          "description": "The related service specification"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF653ServiceRef": {
      "type": "object",
      "description": "The service related to the service test",
      "required": [
        "id",
        "href"
      ],
      "properties": {
        "href": {
          "type": "string",
          "description": "Hyperlink to access a service."
        },
        "id": {
          "type": "string",
          "description": "Identifier of a service."
        },
        "name": {
          "type": "string",
          "description": "A name to describe a service."
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF653ServiceTestSpecificationRef": {
      "type": "object",
      "description": "The service test specification used by the service test.",
      "required": [
        "href",
        "id"
      ],
      "properties": {
        "href": {
          "type": "string",
          "description": "Hyperlink to access a service test specification."
        },
        "id": {
          "type": "string",
          "description": "Identifier of a service test specification."
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF653TestMeasure": {
      "type": "object",
      "description": "A TestMeasureDefinition specifies a measure of a specific aspect of a product, service, or resource test, \nsuch as lost packets or connectivity status.",
      "required": [
        "metricHref",
        "metricName"
      ],
      "properties": {
        "accuracy": {
          "type": "number",
          "format": "float",
          "description": "The number of digits of accuracy captured for Metrics associated"
        },
        "captureDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time that capture the metric."
        },
        "captureMethod": {
          "type": "string",
          "description": "\"The method used to capture the Metrics. \nNote: This may be replaced by a set of entities similar to the \nPerformance Monitoring Ref."
        },
        "metricDescription": {
          "type": "string",
          "description": "Brief description of the metric"
        },
        "metricHref": {
          "type": "string",
          "description": "Hyperlink to access a metric for detail information."
        },
        "metricName": {
          "type": "string",
          "description": "The name of metric."
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "The unit of measure for the metric values, such as meters, \ncubic yards, kilograms [ISO 1000]."
        },
        "value": {
          "type": "string",
          "description": "The value of Metric in the test. This also could be a documents \nto record all values got during the service test."
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the Metric value associated with a \nmetricValue can take on, such as numeric, text, and so forth."
        },
        "ruleViolation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF653MeasureThresholdRuleViolation"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF653ServiceTestCharacteristic": {
      "type": "object",
      "description": "The configuration of the service test is set by the service test characteristic.",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the characteristic."
        },
        "value": {
          "type": "string",
          "description": "The value of characteristic."
        }
      }
    },
    "TMF653MeasureThresholdRuleViolation": {
      "type": "object",
      "description": "A measureThresholdRuleViolation is a violation of a rule that defines the in the \nMericDefMeasureThresholdRule.",
      "required": [
        "name",
        "conformanceComparatorLower",
        "conformanceComparatorUpper",
        "conformanceTargetLower",
        "conformanceTargetUpper"
      ],
      "properties": {
        "conformanceComparatorLower": {
          "type": "string",
          "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to compare with the conformanceTargetLower."
        },
        "conformanceComparatorUpper": {
          "type": "string",
          "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to compare with the conformanceTargetUpper."
        },
        "conformanceTargetLower": {
          "type": "string",
          "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the lower limit. The value should be less than the conformanceTargetUpper. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
        },
        "conformanceTargetUpper": {
          "type": "string",
          "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the Upper limit. The value should be greater than the conformanceTargetLower. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
        },
        "description": {
          "type": "string",
          "description": "Description for the MetricDefMeasureThresholdRule ."
        },
        "name": {
          "type": "string",
          "description": "Name for the MetricDefMeasureThresholdRule ."
        },
        "numberOfAllowedCrossing": {
          "type": "integer",
          "description": "The number of allowed crossing occurrences in reference to the \ntolerancePeriod without a consequence being initiated."
        },
        "thresholdRuleSeverity": {
          "type": "string",
          "description": "A threshold can be generated in different severity levels. A \ncrossing for each level may require a different condition and possibly trigger a different consequence."
        },
        "tolerancePeriod": {
          "type": "string",
          "description": "An interval of time of allowed crossing occurrences before a \nconsequence being initiated."
        },
        "appliedConsequence": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF653AppliedConsequence"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF653AppliedConsequence": {
      "type": "object",
      "description": "An Applied Consequence defines the action (prescribed action or notification) to take when a \nMeasureThresholdRuleViolation occurs.",
      "properties": {
        "appliedAction": {
          "type": "string",
          "description": "The action for a violated threshold. This could be a hyperlink to \nthe action."
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the consequence is."
        },
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which Consequence is known and \ndistinguished from other MetricDefMeasureConsequences."
        },
        "repeatAction": {
          "type": "string",
          "description": "An indicator use to specify that a consequence should cease \nbeing applied if a value is in the same range as the previous value or continue being applied if a value is in the same range as the previous value.  \nIf the repeatAcation is True, if the consequence is always applied as soon as the MetricMeasure value is in the range of values and if the repeatAcation is False, the consequence is applied only if the previous MetricMeasure value wasn¡¯t in the same range."
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF653TimePeriod": {
      "type": "object",
      "description": "A base / value business entity used to represent a period of time between two timepoints.",
      "required": [
        "endDateTime",
        "startDateTime"
      ],
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, ending at the TimePeriod."
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, starting at the TimePeriod"
        }
      }
    },
    "TMF653TestMeasureDefinition": {
      "type": "object",
      "description": "A TestMeasureDefinition specifies a measure of a specific aspect of a product, service, or resource test, \nsuch as lost packets or connectivity status.",
      "required": [
        "metricName",
        "metricHref",
        "name"
      ],
      "properties": {
        "captureFrequency": {
          "type": "string",
          "description": "The frequency of capture for the metric. Note: This may be \nreplaced by a set of entities similar to the Performance Monitoring."
        },
        "captureMethod": {
          "type": "string",
          "description": "The method used to capture the Metric. Note: This may be \nreplaced by a set of entities similar to the Performance Monitoring."
        },
        "capturePeriod": {
          "$ref": "#/definitions/TMF653TimePeriod",
          "description": "A period of the capture."
        },
        "metricDescription": {
          "type": "string",
          "description": "Brief description of the metric."
        },
        "metricHref": {
          "type": "string",
          "description": "Hyperlink to access a metric for detail information."
        },
        "metricName": {
          "type": "string",
          "description": "The name of a metric that in the test measure."
        },
        "name": {
          "type": "string",
          "description": "The name of the TestMeasureDefinition."
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "Name of a service test specification."
        },
        "validFor": {
          "$ref": "#/definitions/TMF653TimePeriod",
          "description": "A valid duration of a thing."
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the Metric value can take on, such as \nnumeric, text, and so forth."
        },
        "thresholdRule": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF653MetricDefMeasureThresholdRule"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF653ServiceSpecificationRef": {
      "type": "object",
      "description": "The related service specification.",
      "required": [
        "href",
        "id"
      ],
      "properties": {
        "href": {
          "type": "string",
          "description": "Hyperlink to access service specification."
        },
        "id": {
          "type": "string",
          "description": "The identifier of a service specification."
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF653MetricDefMeasureThresholdRule": {
      "type": "object",
      "description": "A MetricDefMeasureThresholdRule is a rule that defines the condition (raise or clear) to achieve to apply \nconsequences when a threshold is crossed or ceased to be crossed. It also defines the severity of the \nraise or clear of the threshold.",
      "required": [
        "name",
        "conformanceComparatorLower",
        "conformanceComparatorUpper",
        "conformanceTargetLower",
        "conformanceTargetUpper"
      ],
      "properties": {
        "conformanceComparatorLower": {
          "type": "string",
          "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to Service Test Management API REST Specification compare with the conformanceTargetLower."
        },
        "conformanceComparatorUpper": {
          "type": "string",
          "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to compare with the conformanceTargetUpper."
        },
        "conformanceTargetLower": {
          "type": "string",
          "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the lower limit. The value should be less than the conformanceTargetUpper. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
        },
        "conformanceTargetUpper": {
          "type": "string",
          "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the Upper limit. The value should be greater than the conformanceTargetLower. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
        },
        "description": {
          "type": "string",
          "description": "Description for the MetricDefMeasureThresholdRule ."
        },
        "name": {
          "type": "string",
          "description": "Name for the MetricDefMeasureThresholdRule ."
        },
        "numberOfAllowedCrossing": {
          "type": "string",
          "description": "The number of allowed crossing occurrences in reference to the \ntolerancePeriod without a consequence being initiated."
        },
        "thresholdRuleSeverity": {
          "type": "string",
          "description": "A threshold can be generated in different severity levels. A \ncrossing for each level may require a different condition and possibly trigger a different consequence."
        },
        "tolerancePeriod": {
          "type": "string",
          "description": "A String. An interval of time of allowed crossing occurrences before a consequence being initiated."
        },
        "consequence": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF653MetricDefMeasureConsequence"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF653MetricDefMeasureConsequence": {
      "type": "object",
      "description": "A MetricDefMeasureConsequence defines the action (prescribed action or notification) to take when a \nMetricDefMeasureThresholdRule is crossed.",
      "properties": {
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the consequence is."
        },
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which a \nMetricDefMeasureConsequence is known and distinguished from other MetricDefMeasureConsequences."
        },
        "prescribeAction": {
          "type": "string",
          "description": "Recommended remedy for a violated threshold. This could be \nthe hyperlink to the action."
        },
        "repeatAction": {
          "type": "string",
          "description": "An indicator use to specify that a consequence should cease \nbeing applied if a value is in the same range as the previous value  or continue being applied if a value is in the same range as the previous value.   \nIf the repeatAcation is True, if the consequence is always applied as soon as the MetricMeasure value is in the range of values and if the repeatAcation is False, the consequence is applied only if the previous MetricMeasure value wasn¡¯t in the same range."
        },
        "validFor": {
          "$ref": "#/definitions/TMF653TimePeriod",
          "description": "A valid duration of a thing."
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF653EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF653EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF653Error": {
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "Application related code."
        },
        "reason": {
          "type": "integer",
          "description": "Text that explains the reason for error."
        },
        "message": {
          "type": "string",
          "description": "(optional) Text that provide more details and corrective actions related to the error."
        },
        "status": {
          "type": "integer",
          "description": "(optional) http error code extension like 400-2"
        },
        "referenceError": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        },
        "@type": {
          "type": "string",
          "description": "(optional) The class type of a REST resource."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "(optional) A link to the schema describing a REST resource."
        }
      }
    },
    "TMF654BucketBalance": {
      "description": "Represents and tracks the amount remained or owed for a certain type of service by certain customer",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique Identifier within the server for the bucket"
        },
        "href": {
          "type": "string",
          "description": "A resource URI pointing to the resource in the OB that stores the detailed information for the bucket"
        },
        "name": {
          "type": "string",
          "description": "Friendly name to identify the bucket"
        },
        "description": {
          "type": "string",
          "description": "Text describing the contents of the balance managed by the bucket"
        },
        "bucketType": {
          "type": "string",
          "description": "Type of prepay balance bucket (e.g.: promotion, deposit, bonus, data, voice, or any other service type)"
        },
        "remainedAmount": {
          "$ref": "#/definitions/TMF654QuantityType",
          "description": "Amount remained in the bucket"
        },
        "reservedAmount": {
          "$ref": "#/definitions/TMF654QuantityType",
          "description": "Indicate the reserved amount on the bucket"
        },
        "validFor": {
          "$ref": "#/definitions/TMF654TimePeriodType",
          "description": "The period for which the balance in the bucket is valid"
        },
        "status": {
          "type": "string",
          "description": "Status for the balance (active, expired, suspended)"
        },
        "product": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF654ProductRefType"
          },
          "description": "A reference to the product whose consumption is managed by the bucket. This is an array to allow scenarios where a given bucket is shared between different products."
        },
        "partyAccount": {
          "$ref": "#/definitions/TMF654PartyAccountRefType",
          "description": "A reference to the account that owns the bucket"
        },
        "realizingResource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF654RealizingResourceRefType"
          },
          "description": "A reference to the resource that realizes a product. This is an array to allow scenarios where a given bucket is shared between different resources."
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF654RelatedPartyRefType"
          },
          "description": "Used to provide information about any other entity with relation to the balance, for instance to define customer hierarchy for the balance (e.g.: customerId, userId, )"
        }
      },
      "required": [
        "id",
        "href",
        "bucketType",
        "validFor",
        "status",
        "product"
      ]
    },
    "TMF654AccumulatedBalance": {
      "description": "Represents and tracks the aggregated amount remained or owed in certain account which is owned by certain customer for a set of buckets.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Friendly name to identify the aggregated balance"
        },
        "description": {
          "type": "string",
          "description": "Text describing the contents of the aggregated balance"
        },
        "totalBalance": {
          "$ref": "#/definitions/TMF654QuantityType",
          "description": "Aggregated for a set of prepay balance buckets associated to the product"
        },
        "bucket": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF654BucketBalanceRefType"
          },
          "description": "A reference to the buckets involved in the aggregation"
        },
        "product": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF654ProductRefType"
          },
          "description": "A reference to the product whose consumption is managed by the bucket . This is an array to allow scenarios where a buckets are shared between different products"
        },
        "partyAccount": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF654PartyAccountRefType"
          },
          "description": "A reference to the account that owns the buckets aggregated"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF654RelatedPartyRefType"
          },
          "description": "Used to provide information about any other entity with relation to the balance, for instance to define customer hierarchy for the balance (e.g.: customerId, userId, )"
        }
      },
      "required": [
        "name",
        "totalBalance",
        "bucket",
        "product"
      ]
    },
    "TMF654BalanceTopupBody": {
      "properties": {
        "type": {
          "type": "string",
          "description": "A preconfigured value that describes a TopUp type which determines the prepay balance bucket in which the top-up is done (national-voice, roaming-voice, promotional-voice, data, ....)"
        },
        "channel": {
          "$ref": "#/definitions/TMF654ChannelRefType",
          "description": "Indicator for the channel used to request the top-up operation. Structure including at least attribute �name�"
        },
        "amount": {
          "$ref": "#/definitions/TMF654QuantityType",
          "description": "Amount (can be monetary or non-monetary) to be recharged in the bucket"
        },
        "product": {
          "$ref": "#/definitions/TMF654ProductRefType",
          "description": "A reference to the product related to the bucket that is impacted by the balance related operation"
        }
      },
      "required": [
        "type",
        "channel",
        "amount"
      ]
    },
    "TMF654BalanceTopupRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/TMF654BalanceTopupBody"
        }
      ],
      "description": "Represents a detailed description of a recharge operation requested over a bucket (defined by a specific product or reference to a product (i.e.: a commercial id such as an msisidn) and a service type)",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique Identifier within the server for the recharge operation request"
        },
        "href": {
          "type": "string",
          "description": "A resource URI pointing to the resource in the OB that stores the detailed information. This is typically the resource url to retrieve individual top-up operation details"
        },
        "description": {
          "type": "string",
          "description": "Description of the recharge operation"
        },
        "requestor": {
          "$ref": "#/definitions/TMF654RelatedPartyRefType",
          "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes �role� and �name�."
        },
        "isAutoTopup": {
          "type": "boolean",
          "description": "Indicates if the topup requested is an autotopup (to be processed periodically)"
        },
        "recurringPeriod": {
          "type": "string",
          "description": "For autotopup indicates the periodicity for the recharge operation (monthly, weekly, )"
        },
        "nrOfPeriods": {
          "type": "integer",
          "description": "For autotopup indicates the number of occurrences of the period the recharge operation must be executed. If not included then no limit is set to stop the executionof the topup every period"
        },
        "paymentMethod": {
          "$ref": "#/definitions/TMF654PaymentMethodRefOrValueType",
          "description": "Payment method used for the recharge operation (e.g.: cash, credit card, �). Structure including at least attribute �name�. Notice that the use of a voucher can be managed as a specific methodtype, where he voucher code can be passed as value."
        },
        "voucher": {
          "type": "string",
          "description": "Identifier for the voucher when the topup can be perfomed by this means (referenced by a voucher based payment mean). This attribute is left in this release to keep compatibility with previous version and for implementations that do not relay on paymentMethods. A voucher can be managed as a specific methodtype, where he voucher code can be passed as value."
        },
        "validFor": {
          "$ref": "#/definitions/TMF654TimePeriodType",
          "description": "The period defined for the recharged amount to be part of the prepay balance. This could be used to define expiration times to remove balance not consumed."
        },
        "requestedDate": {
          "type": "string",
          "description": "Date when the top-up request was received in the server"
        },
        "confirmationDate": {
          "type": "string",
          "description": "Date when the top-up was confirmed in the server"
        },
        "status": {
          "type": "string",
          "enum": [
            "confirmed",
            "cancelled",
            "in progress"
          ],
          "description": "Status of the top-up operation Supported values are: - confirmed - cancelled - in progress"
        },
        "bucket": {
          "$ref": "#/definitions/TMF654BucketBalanceRefType",
          "description": "A reference to the bucket impacted by the request. This is used in scenarios where the requestor knows beforehand the bucket that is going to be impacted instead of just referring to the commercial identifier of the impacted product and the type of bucket created under that product"
        },
        "partyAccount": {
          "$ref": "#/definitions/TMF654PartyAccountRefType",
          "description": "A reference to the account that owns the bucket impacted by the balance related operation"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF654RelatedPartyRefType"
          },
          "description": "Used to provide information about any other entity with relation to the operation"
        }
      },
      "required": [
        "id",
        "href",
        "validFor",
        "requestedDate",
        "confirmationDate",
        "status"
      ]
    },
    "TMF654BalanceTransferBody": {
      "properties": {
        "type": {
          "type": "string",
          "description": "A preconfigured value that describes a TopUp type which determines the prepay balance bucket in which the top-up is done (national-voice, roaming-voice, promotional-voice, data, ....)"
        },
        "channel": {
          "$ref": "#/definitions/TMF654ChannelRefType",
          "description": "Indicator for the channel used to request the top-up operation. Structure including at least attribute �name�"
        },
        "targetId": {
          "type": "string",
          "description": "Identifier for the entity that receives the transfer (reference to a product via a commercial identifier such as an msisidn that relates to an internal product id)"
        },
        "amount": {
          "$ref": "#/definitions/TMF654QuantityType",
          "description": "Amount (can be monetary or non-monetary) to be transferred"
        },
        "product": {
          "$ref": "#/definitions/TMF654ProductRefType",
          "description": "A reference to the product related to the bucket that is impacted by the balance related operation"
        }
      },
      "required": [
        "type",
        "channel",
        "targetId",
        "amount"
      ]
    },
    "TMF654BalanceTransferRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/TMF654BalanceTransferBody"
        }
      ],
      "description": "The BalanceTransfer resource is a detailed description of credit transfer operation requested between two buckets (reference to products owned by customers and consuming credit when using a service).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique Identifier within the server for the balance transfer operation request."
        },
        "href": {
          "type": "string",
          "description": "A resource URI pointing to the resource in the OB that stores the detailed information. This is typically the resource url to retrieve individual transfer operation details"
        },
        "description": {
          "type": "string",
          "description": "Description of the transfer operation"
        },
        "reason": {
          "type": "string",
          "description": "Text describing the reason for the adjustment"
        },
        "requestor": {
          "$ref": "#/definitions/TMF654RelatedPartyRefType",
          "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes �role� and �name�."
        },
        "targetType": {
          "type": "string",
          "description": "Intended for scenarios where the transfer is done from one bucket type to another (from voice to data). A preconfigured value that describes a Transfer type which determines the prepay balance bucket in which the transfer is done"
        },
        "receiver": {
          "$ref": "#/definitions/TMF654RelatedPartyRefType",
          "description": "Identifier for the user/customer/entity that receives the transfer action when it is required to indicate additional customer hierarchy information regarding the entity receiving the balance transfer"
        },
        "transferCost": {
          "$ref": "#/definitions/TMF654QuantityType",
          "description": "Associated cost to be charged for the transfer operation (can be monetary or non-monetary)"
        },
        "costOwner": {
          "type": "string",
          "enum": [
            "originator",
            "receiver"
          ],
          "description": "Indicates the entity responsible to assume the cost of the transfer operation"
        },
        "requestedDate": {
          "type": "string",
          "description": "Date when the transfer request was received in the server"
        },
        "confirmationDate": {
          "type": "string",
          "description": "Date when the transfer was confirmed in the server"
        },
        "status": {
          "type": "string",
          "enum": [
            "confirmed",
            "cancelled",
            "in progress"
          ],
          "description": "Status of the top-up."
        },
        "bucket": {
          "$ref": "#/definitions/TMF654BucketBalanceRefType",
          "description": "A reference to the bucket impacted by the request. This is used in scenarios where the requestor knows beforehand the bucket that is going to be impacted instead of just referring to the commercial identifier of the impacted product and the type of bucket created under that product"
        },
        "partyAccount": {
          "$ref": "#/definitions/TMF654PartyAccountRefType",
          "description": "A reference to the account that owns the bucket impacted by the balance related operation"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF654RelatedPartyRefType"
          },
          "description": "Used to provide information about any other entity with relation to the operation"
        }
      },
      "required": [
        "id",
        "href",
        "reason",
        "requestedDate",
        "confirmationDate",
        "status",
        "product"
      ]
    },
    "TMF654BalanceAdjustmentBody": {
      "properties": {
        "type": {
          "type": "string",
          "description": "A preconfigured value that describes a TopUp type which determines the prepay balance bucket in which the top-up is done (national-voice, roaming-voice, promotional-voice, data, ....)"
        },
        "reason": {
          "type": "string",
          "description": "Text describing the reason for the adjustment"
        },
        "amount": {
          "$ref": "#/definitions/TMF654QuantityType",
          "description": "Amount (can be monetary or non-monetary) to be recharged in the bucket. It could refer to positive (increment) or negative (decrement) values"
        },
        "product": {
          "$ref": "#/definitions/TMF654ProductRefType",
          "description": "A reference to the product related to the bucket that is impacted by the balance related operation"
        }
      },
      "required": [
        "type",
        "reason",
        "amount"
      ]
    },
    "TMF654BalanceAdjustmentRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/TMF654BalanceAdjustmentBody"
        }
      ],
      "description": "the BalanceAdjustment resource is a detailed description of credit adjustment operation erformed on a given bucket (defined by a specific product or reference to a product (i.e.: a commercial id such as an msisidn) and a service type)",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique Identifier within the server for the balance adjustment operation request"
        },
        "href": {
          "type": "string",
          "description": "A resource URI pointing to the resource in the OB that stores the detailed information. This is typically the resource url to retrieve individual top-up operation details"
        },
        "description": {
          "type": "string",
          "description": "Description of the recharge operation"
        },
        "requestor": {
          "$ref": "#/definitions/TMF654RelatedPartyRefType",
          "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes �role� and �name�."
        },
        "validFor": {
          "$ref": "#/definitions/TMF654TimePeriodType",
          "description": "The period defined for the adjusted amount to be part of the prepay balance. This could be used to define expiration times to remove balance not consumed."
        },
        "requestedDate": {
          "type": "string",
          "description": "Date when the top-up request was received in the server"
        },
        "bucket": {
          "$ref": "#/definitions/TMF654BucketBalanceRefType",
          "description": "A reference to the bucket impacted by the request. This is used in scenarios where the requestor knows beforehand the bucket that is going to be impacted instead of just referring to the commercial identifier of the impacted product and the type of bucket created under that product"
        },
        "partyAccount": {
          "$ref": "#/definitions/TMF654PartyAccountRefType",
          "description": "A reference to the account that owns the bucket impacted by the balance related operation"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF654RelatedPartyRefType"
          },
          "description": "Used to provide information about any other entity with relation to the operation"
        }
      },
      "required": [
        "id",
        "href",
        "requestedDate",
        "product"
      ]
    },
    "TMF654BalanceActivity": {
      "description": "The BalanceActivity resource is a detailed description of a specific balance-related action that has happened over a given bucket balance. Typically a recharge/transfer/adjustment request creates one activity, but a request for an auto-topup operation actually triggers multiple periodic balance-related activities.",
      "properties": {
        "type": {
          "type": "string",
          "description": "A preconfigured value that describes a type of balance-related performed (topup, transfer, adjustment)"
        },
        "date": {
          "type": "string",
          "description": "Date when the balance related operation took place"
        },
        "action": {
          "$ref": "#/definitions/TMF654BalanceActionRequestRefType",
          "description": "A reference to the balance-related operation that triggered the action"
        },
        "amount": {
          "$ref": "#/definitions/TMF654QuantityType",
          "description": "Amount (can be monetary or non-monetary) that was involved in the balance operation"
        },
        "bucketBalance": {
          "$ref": "#/definitions/TMF654BucketBalanceRefType",
          "description": "A reference to the bucket involved in the balance-related operation"
        },
        "amountBefore": {
          "$ref": "#/definitions/TMF654QuantityType",
          "description": "Remained amount in the bucket involved in the operation before it took place"
        },
        "amountAfter": {
          "$ref": "#/definitions/TMF654QuantityType",
          "description": "Remained amount in the bucket involved in the operation after it took place"
        },
        "product": {
          "$ref": "#/definitions/TMF654ProductRefType",
          "description": "A reference to the product related to the bucket that is impacted by the balance activity"
        },
        "partyAccount": {
          "$ref": "#/definitions/TMF654PartyAccountRefType",
          "description": "A reference to the account that owns the bucket impacted by the balance activity"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF654RelatedPartyRefType"
          },
          "description": "Used to provide information about any other entity with relation to the balance activity"
        }
      },
      "required": [
        "type",
        "date",
        "action",
        "amount",
        "bucketBalance",
        "product"
      ]
    },
    "TMF654BalanceReserveBody": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique Identifier within the server for the reserve operation request"
        },
        "relatedParty": {
          "$ref": "#/definitions/TMF654RelatedPartyRefType",
          "description": "Used to provide information about any other entity with relation to the operation"
        },
        "reservedAmount": {
          "$ref": "#/definitions/TMF654QuantityType",
          "description": "Amount (can be monetary or non-monetary) to be reserved in the bucket"
        }
      },
      "required": [
        "id",
        "relatedParty",
        "reservedAmount"
      ]
    },
    "TMF654BalanceReserveRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/TMF654BalanceReserveBody"
        }
      ],
      "description": "The Balance Reserve Operation resource is a detailed description of a balance reserve operation requested over a bucket (defined by a specific product or reference to a product (i.e.: a commercial id such as an msisidn) and a service type)",
      "properties": {
        "href": {
          "type": "string",
          "description": "A resource URI pointing to the resource in the OB that stores the detailed information about a reserve"
        },
        "type": {
          "type": "string",
          "description": "A preconfigured value that describes a TopUp type which determines the prepay balance bucket in which the top-up is done (national-voice, roaming-voice, promotional-voice, data, ....)"
        },
        "description": {
          "type": "string",
          "description": "Description of the reserve operation"
        },
        "requestor": {
          "$ref": "#/definitions/TMF654RelatedPartyRefType",
          "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes �role� and �name�."
        },
        "remainedAmount": {
          "$ref": "#/definitions/TMF654QuantityType",
          "description": "Amount (can be monetary or non-monetary) to be remained in the bucket"
        },
        "isAutoDeduct": {
          "type": "boolean",
          "description": "Indicates if the reserved balance is auto deducted after a time period"
        },
        "validFor": {
          "$ref": "#/definitions/TMF654TimePeriodType",
          "description": "The period defined for the reserved amount. If reserve expires, the amount reserved will be deduct or unreserve by the value of isAutoDeduct parameter."
        },
        "requestedDate": {
          "type": "string",
          "description": "Date when the reserve request was received in the server"
        },
        "confirmationDate": {
          "type": "string",
          "description": "Date when the reserve was confirmed in the server"
        },
        "status": {
          "type": "string",
          "enum": [
            {
              "0": "Success"
            },
            {
              "1": "Message header checksum error, such as security check error, operator error, channel error, etc."
            },
            {
              "2": "parameter range check error, such as not enter the business logic, but the field type, length, range check, the relationship between the parameters of the business association checksum"
            },
            {
              "3": "user information check error, such as account, user, customer information related checksum error"
            },
            {
              "4": "system internal error, such as system data error, system exception, etc."
            },
            {
              "5": "service information check error, such as specific service information check error"
            },
            {
              "6": "user information check error, such as repeat operation"
            },
            {
              "7": "account information verification error, such as the balance is not enough"
            },
            {
              "9999": "system other errors, can not be classified into the above"
            }
          ],
          "description": "Status of the reserve operation"
        },
        "product": {
          "$ref": "#/definitions/TMF654ProductRefType",
          "description": "A reference to the product related to the bucket that is impacted by the balance related operation"
        },
        "bucket": {
          "$ref": "#/definitions/TMF654BucketBalanceRefType",
          "description": "A reference to the bucket impacted by the request. This is used in scenarios where the requestor knows beforehand the bucket that is going to be impacted instead of just referring to the commercial identifier of the impacted product and the type of bucket created under that product"
        },
        "partyAccount": {
          "$ref": "#/definitions/TMF654PartyAccountRefType",
          "description": "A reference to the account that owns the bucket impacted by the balance related operation"
        }
      },
      "required": [
        "href"
      ]
    },
    "TMF654BalanceUnreserveBody": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique Identifier within the server for the unreserve operation request"
        },
        "relatedParty": {
          "$ref": "#/definitions/TMF654RelatedPartyRefType",
          "description": "Used to provide information about any other entity with relation to the operation"
        },
        "balanceReserve": {
          "$ref": "#/definitions/TMF654BalanceReserveRefType",
          "description": "A reference to the balancereserve that identifies the balance reserve operation"
        }
      },
      "required": [
        "id",
        "relatedParty",
        "balanceReserve"
      ]
    },
    "TMF654BalanceUnreserveRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/TMF654BalanceUnreserveBody"
        }
      ],
      "description": "The Balance Unreserve Operation resource is a detailed description of a balance unreserve operation requested over a product",
      "properties": {
        "href": {
          "type": "string",
          "description": "A resource URI pointing to the resource in the OB that stores the detailed information about a unreserve"
        },
        "description": {
          "type": "string",
          "description": "Description of the unreserve operation"
        },
        "requestedDate": {
          "type": "string",
          "description": "Date when the unreserve request was received in the server"
        },
        "status": {
          "type": "string",
          "enum": [
            {
              "0": "Success"
            },
            {
              "1": "Message header checksum error, such as security check error, operator error, channel error, etc."
            },
            {
              "2": "parameter range check error, such as not enter the business logic, but the field type, length, range check, the relationship between the parameters of the business association checksum"
            },
            {
              "3": "user information check error, such as account, user, customer information related checksum error"
            },
            {
              "4": "system internal error, such as system data error, system exception, etc."
            },
            {
              "5": "service information check error, such as specific service information check error"
            },
            {
              "6": "user information check error, such as repeat operation"
            },
            {
              "7": "account information verification error, such as the balance is not enough"
            },
            {
              "9999": "system other errors, can not be classified into the above"
            }
          ],
          "description": "Status of the unreserve operation"
        },
        "product": {
          "$ref": "#/definitions/TMF654ProductRefType",
          "description": "A reference to the product related to the bucket that is impacted by the balance related operation"
        },
        "bucket": {
          "$ref": "#/definitions/TMF654BucketBalanceRefType",
          "description": "A reference to the bucket impacted by the request. This is used in scenarios where the requestor knows beforehand the bucket that is going to be impacted instead of just referring to the commercial identifier of the impacted product and the type of bucket created under that product"
        }
      },
      "required": [
        "href"
      ]
    },
    "TMF654BalanceDeductBody": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique Identifier within the server for the deduction operation request"
        },
        "reason": {
          "type": "string",
          "description": "Text describing the reason for the deduction"
        },
        "relatedParty": {
          "$ref": "#/definitions/TMF654RelatedPartyRefType",
          "description": "Used to provide information about any other entity with relation to the operation"
        },
        "balanceReserve": {
          "$ref": "#/definitions/TMF654BalanceReserveRefType",
          "description": "A reference to the balancereserve that identifies the balance reserve operation"
        }
      },
      "required": [
        "id",
        "reason",
        "relatedParty",
        "balanceReserve"
      ]
    },
    "TMF654BalanceDeductRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/TMF654BalanceDeductBody"
        }
      ],
      "description": "The Balance Deduct task resource is a detailed description of deduction operation. If balanceReserve Resource ID is contained in the deduct request message, the reserved balance will be performed deduct operation (if part of the reserved balance is deducted, the remaining amount will be released); if balanceReserve Resource ID is not contained in the deduct request message, the balance will be deducted directly.",
      "properties": {
        "href": {
          "type": "string",
          "description": "A resource URI pointing to the resource in the OB that stores the detailed information about a deduction"
        },
        "type": {
          "type": "string",
          "description": "A preconfigured value that describes a deduct type which determines the prepay balance bucket in which the deduct is done (national-voice, roaming-voice, promotional-voice, data, ....)"
        },
        "description": {
          "type": "string",
          "description": "Description of the deduct operation"
        },
        "deductAmount": {
          "$ref": "#/definitions/TMF654QuantityType",
          "description": "Amount (can be monetary or non-monetary) to be deducted, if balancereserve ID is not Null, the operation is based on balancereserve resource; otherwise, the operation deducts directly amount given."
        },
        "requestor": {
          "$ref": "#/definitions/TMF654RelatedPartyRefType",
          "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes �role� and �name�."
        },
        "requestedDate": {
          "type": "string",
          "description": "Date when the deduction request was received in the server"
        },
        "confirmationDate": {
          "type": "string",
          "description": "Date when the deduction was confirmed in the server"
        },
        "status": {
          "type": "string",
          "enum": [
            {
              "0": "Success"
            },
            {
              "1": "Message header checksum error, such as security check error, operator error, channel error, etc."
            },
            {
              "2": "parameter range check error, such as not enter the business logic, but the field type, length, range check, the relationship between the parameters of the business association checksum"
            },
            {
              "3": "user information check error, such as account, user, customer information related checksum error"
            },
            {
              "4": "system internal error, such as system data error, system exception, etc."
            },
            {
              "5": "service information check error, such as specific service information check error"
            },
            {
              "6": "user information check error, such as repeat operation"
            },
            {
              "7": "account information verification error, such as the balance is not enough"
            },
            {
              "9999": "system other errors, can not be classified into the above"
            }
          ],
          "description": "Status of the deduction operation"
        },
        "product": {
          "$ref": "#/definitions/TMF654ProductRefType",
          "description": "A reference to the product related to the bucket that is impacted by the balance related operation"
        },
        "bucket": {
          "$ref": "#/definitions/TMF654BucketBalanceRefType",
          "description": "A reference to the bucket impacted by the request. This is used in scenarios where the requestor knows beforehand the bucket that is going to be impacted instead of just referring to the commercial identifier of the impacted product and the type of bucket created under that product"
        },
        "partyAccount": {
          "$ref": "#/definitions/TMF654PartyAccountRefType",
          "description": "A reference to the account that owns the bucket impacted by the balance related operation"
        }
      },
      "required": [
        "href"
      ]
    },
    "TMF654BalanceReserveRefType": {
      "description": "link to the resource that holds reserved balance information",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the balance reserve entity"
        },
        "href": {
          "type": "string",
          "description": "A resource URI pointing to the resource in the OB that stores the reserve balance information for a bucket"
        }
      },
      "required": [
        "id",
        "href"
      ]
    },
    "TMF654BalanceActionRequestRefType": {
      "description": "link to the resource that holds balance-related request information",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the balance related action request"
        },
        "href": {
          "type": "string",
          "description": "A resource URI pointing to the resource in the OB that stores the request information for the balance-related action"
        }
      },
      "required": [
        "id",
        "href"
      ]
    },
    "TMF654ChannelRefType": {
      "description": "link to the resource that holds information about the channel used to initiate the topup operation request",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the channel entity"
        },
        "href": {
          "type": "string",
          "description": "A resource URI pointing to the resource in the OB that stores the channel information"
        },
        "name": {
          "type": "string",
          "description": "Name of the channel"
        }
      },
      "required": [
        "id",
        "href"
      ]
    },
    "TMF654PaymentMethodRefOrValueType": {
      "description": "link to the resource that holds information about the payment mean used to complete the operation",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the channel entity"
        },
        "href": {
          "type": "string",
          "description": "A resource URI pointing to the resource in the OB that stores the channel information"
        },
        "name": {
          "type": "string",
          "description": "Name of the channel"
        },
        "type": {
          "type": "string",
          "description": "Type of payment method (bankcard, voucher, �)"
        },
        "details": {
          "$ref": "#/definitions/TMF654RelatedPartyRefType",
          "description": "The list of parameters depends on the type of payment method"
        }
      },
      "required": [
        "id",
        "href"
      ]
    },
    "TMF654BalanceTransferStatusTypeModify": {
      "properties": {
        "status": {
          "type": "string"
        }
      },
      "required": [
        "status"
      ]
    },
    "TMF654BalanceTopupStatusTypeModify": {
      "properties": {
        "status": {
          "type": "string",
          "description": "Current status of the operation request"
        }
      },
      "required": [
        "status"
      ]
    },
    "TMF654BalanceTopupStatusType": {
      "allOf": [
        {
          "$ref": "#/definitions/TMF654BalanceTopupStatusTypeModify"
        }
      ],
      "description": "Structure including specific information about change of status for the topup operation",
      "properties": {
        "statusChangeDate": {
          "type": "string",
          "description": "Date in which the latest change of status was requested"
        }
      },
      "required": [
        "statusChangeDate"
      ]
    },
    "TMF654BucketBalanceRefType": {
      "description": "link to the resource that holds bucket balance information",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the bucket entity"
        },
        "href": {
          "type": "string",
          "description": "A resource URI pointing to the resource in the OB that stores the balance information for a bucket"
        }
      },
      "required": [
        "id",
        "href"
      ]
    },
    "TMF654ProductRefType": {
      "description": "Representation of a resource that holds information about the product that is linked to the bucket balance.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product entity"
        },
        "href": {
          "type": "string",
          "description": "A resource URI pointing to the resource in the OB that stores the product information"
        },
        "name": {
          "type": "string",
          "description": "Name of the product"
        }
      },
      "required": [
        "id",
        "href"
      ]
    },
    "TMF654QuantityType": {
      "description": "Representation of a quantity of something. I can also be used to represent a quantity range",
      "properties": {
        "amount": {
          "format": "decimal",
          "type": "number",
          "description": "Measured amount"
        },
        "units": {
          "type": "string",
          "description": "Units the quantity is measured in"
        }
      },
      "required": [
        "units",
        "amount"
      ]
    },
    "TMF654TimePeriodType": {
      "description": "Representation of a time period",
      "properties": {
        "startDateTime": {
          "format": "date-time",
          "type": "string",
          "description": "Start date of the period"
        },
        "endDateTime": {
          "format": "date-time",
          "type": "string",
          "description": "End date of the period"
        }
      },
      "required": [
        "startDateTime"
      ]
    },
    "TMF654PartyAccountRefType": {
      "description": "Information about a resource that holds information about the account that owns the bucket",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the account entity"
        },
        "href": {
          "type": "string",
          "description": "A resource URI pointing to the resource in the OB that stores the account information"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        }
      },
      "required": [
        "id",
        "href"
      ]
    },
    "TMF654RelatedPartyRefType": {
      "description": "Information about an associated entity and its role",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the account entity"
        },
        "href": {
          "type": "string",
          "description": "A resource URI pointing to the resource in the OB that stores the account information"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        },
        "role": {
          "type": "string",
          "description": "Role describing the relationship with the related element"
        }
      },
      "required": [
        "role",
        "name"
      ]
    },
    "TMF654RealizingResourceRefType": {
      "description": "Information about a resource that holds realizes the product that is linked to the bucket balance",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the related party"
        },
        "href": {
          "type": "string",
          "description": "Reference to the party"
        },
        "name": {
          "type": "string",
          "description": "Name of the resource"
        },
        "@Type": {
          "type": "string",
          "description": "Indicates the type of resource"
        },
        "value": {
          "type": "string",
          "description": "The resource value that can be used to identify a resource with a public key (e.g.: a tel nr, an msisdn)"
        }
      }
    },
    "TMF654NotificationRequest": {
      "properties": {
        "callback": {
          "type": "string"
        }
      },
      "required": [
        "callback"
      ]
    },
    "TMF654NotificationResponse": {
      "properties": {
        "id": {
          "type": "string"
        },
        "callback": {
          "type": "string"
        },
        "query": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "callback",
        "query"
      ]
    },
    "TMF654ListenerRequest": {
      "properties": {
        "eventId": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "event": {
          "$ref": "#/definitions/TMF654NotificationResponse"
        }
      },
      "required": [
        "eventId",
        "eventType",
        "event"
      ]
    },
    "TMF655ChangeRequest": {
      "type": "object",
      "description": "Change Request is a type of request which can be used for the management and control of Change Management \nprocess between a customer and a service provider or between a service provider and a partner and vice versa.",
      "required": [
        "status",
        "priority",
        "targetEntity",
        "specification"
      ],
      "properties": {
        "actualEndTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the change implementation is finished \nactually."
        },
        "actualStartTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the change implementation is started actually."
        },
        "budget": {
          "type": "string",
          "description": "The budget reserved for the change."
        },
        "channel": {
          "type": "string",
          "description": "A channel represents the way the Change Request was created"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the change request is confirmed to be \ncompleted"
        },
        "currency": {
          "type": "string",
          "description": "The used currency related with cost"
        },
        "description": {
          "type": "string",
          "description": "Description of the change request."
        },
        "externalId": {
          "type": "string",
          "description": "ID given by the requestor to facilitate the relationship set up and \nsearches afterwards)"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to access a change request"
        },
        "id": {
          "type": "string",
          "description": "Identifier of a Change Request, it is created on repository side \n(Change Management system)."
        },
        "impact": {
          "type": "string",
          "description": "Indicates how about the impact by this change"
        },
        "plannedEndTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the change implementation is planned to be \nfinished."
        },
        "plannedStartTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the change implementation is planned to be \nstarted."
        },
        "priority": {
          "type": "string",
          "description": "A way that can be used by consumers to prioritize change request in Change Management system"
        },
        "requestDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the change request is raised"
        },
        "requestType": {
          "type": "string",
          "description": "Indicates the type of the change request."
        },
        "risk": {
          "type": "string",
          "description": "The risk to implement this change request."
        },
        "riskMitigationPlan": {
          "type": "string",
          "description": "The risk mitigation plan."
        },
        "riskValue": {
          "type": "string",
          "description": "The additional cost if the risk will happen."
        },
        "scheduledDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time that the schedule is made."
        },
        "status": {
          "type": "string",
          "description": "Status of the change request and it¡¯s a sub-state."
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655Attachment"
          },
          "description": "The attachments of the communication message (when it is email type)."
        },
        "workLog": {
          "$ref": "#/definitions/TMF655WorkLog"
        },
        "incident": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655Incident"
          }
        },
        "specification": {
          "$ref": "#/definitions/TMF655ChangeRequestSpecification"
        },
        "impactEntity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655ImpactEntityRef"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655ChangeRequestCharacteristic"
          }
        },
        "targetEntity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655TargetEntityRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655RelatedPartyRef"
          },
          "description": "The parties involved by the change request"
        },
        "resolution": {
          "$ref": "#/definitions/TMF655Resolution"
        },
        "sla": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655SLARef"
          }
        },
        "relatedChangeRequest": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655ChangeRequestRef"
          },
          "description": "An existing Change Request that has some form of correlation with the given Change Request."
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655CategoryRef"
          },
          "description": "The category of change request"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655Note"
          }
        },
        "location": {
          "$ref": "#/definitions/TMF655Place",
          "description": "The place at which the change request occurred."
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF655ChangeRequest_Create": {
      "type": "object",
      "description": "Change Request is a type of request which can be used for the management and control of Change Management \nprocess between a customer and a service provider or between a service provider and a partner and vice versa.\nSkipped properties: id,href",
      "required": [
        "status",
        "priority",
        "targetEntity",
        "specification"
      ],
      "properties": {
        "actualEndTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the change implementation is finished \nactually."
        },
        "actualStartTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the change implementation is started actually."
        },
        "budget": {
          "type": "string",
          "description": "The budget reserved for the change."
        },
        "channel": {
          "type": "string",
          "description": "A channel represents the way the Change Request was created"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the change request is confirmed to be \ncompleted"
        },
        "currency": {
          "type": "string",
          "description": "The used currency related with cost"
        },
        "description": {
          "type": "string",
          "description": "Description of the change request."
        },
        "externalId": {
          "type": "string",
          "description": "ID given by the requestor to facilitate the relationship set up and \nsearches afterwards)"
        },
        "impact": {
          "type": "string",
          "description": "Indicates how about the impact by this change"
        },
        "plannedEndTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the change implementation is planned to be \nfinished."
        },
        "plannedStartTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the change implementation is planned to be \nstarted."
        },
        "priority": {
          "type": "string",
          "description": "A way that can be used by consumers to prioritize change request in Change Management system"
        },
        "requestDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the change request is raised"
        },
        "requestType": {
          "type": "string",
          "description": "Indicates the type of the change request."
        },
        "risk": {
          "type": "string",
          "description": "The risk to implement this change request."
        },
        "riskMitigationPlan": {
          "type": "string",
          "description": "The risk mitigation plan."
        },
        "riskValue": {
          "type": "string",
          "description": "The additional cost if the risk will happen."
        },
        "scheduledDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time that the schedule is made."
        },
        "status": {
          "type": "string",
          "description": "Status of the change request and it¡¯s a sub-state."
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655Attachment"
          },
          "description": "The attachments of the communication message (when it is email type)."
        },
        "workLog": {
          "$ref": "#/definitions/TMF655WorkLog"
        },
        "incident": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655Incident"
          }
        },
        "specification": {
          "$ref": "#/definitions/TMF655ChangeRequestSpecification"
        },
        "impactEntity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655ImpactEntityRef"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655ChangeRequestCharacteristic"
          }
        },
        "targetEntity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655TargetEntityRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655RelatedPartyRef"
          },
          "description": "The parties involved by the change request"
        },
        "resolution": {
          "$ref": "#/definitions/TMF655Resolution"
        },
        "sla": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655SLARef"
          }
        },
        "relatedChangeRequest": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655ChangeRequestRef"
          },
          "description": "An existing Change Request that has some form of correlation with the given Change Request."
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655CategoryRef"
          },
          "description": "The category of change request"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655Note"
          }
        },
        "location": {
          "$ref": "#/definitions/TMF655Place",
          "description": "The place at which the change request occurred."
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF655ChangeRequest_Update": {
      "type": "object",
      "description": "Change Request is a type of request which can be used for the management and control of Change Management \nprocess between a customer and a service provider or between a service provider and a partner and vice versa.\nSkipped properties: id,href,id,href",
      "properties": {
        "actualEndTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the change implementation is finished \nactually."
        },
        "actualStartTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the change implementation is started actually."
        },
        "budget": {
          "type": "string",
          "description": "The budget reserved for the change."
        },
        "channel": {
          "type": "string",
          "description": "A channel represents the way the Change Request was created"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the change request is confirmed to be \ncompleted"
        },
        "currency": {
          "type": "string",
          "description": "The used currency related with cost"
        },
        "description": {
          "type": "string",
          "description": "Description of the change request."
        },
        "externalId": {
          "type": "string",
          "description": "ID given by the requestor to facilitate the relationship set up and \nsearches afterwards)"
        },
        "impact": {
          "type": "string",
          "description": "Indicates how about the impact by this change"
        },
        "plannedEndTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the change implementation is planned to be \nfinished."
        },
        "plannedStartTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the change implementation is planned to be \nstarted."
        },
        "priority": {
          "type": "string",
          "description": "A way that can be used by consumers to prioritize change request in Change Management system"
        },
        "requestDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the change request is raised"
        },
        "requestType": {
          "type": "string",
          "description": "Indicates the type of the change request."
        },
        "risk": {
          "type": "string",
          "description": "The risk to implement this change request."
        },
        "riskMitigationPlan": {
          "type": "string",
          "description": "The risk mitigation plan."
        },
        "riskValue": {
          "type": "string",
          "description": "The additional cost if the risk will happen."
        },
        "scheduledDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time that the schedule is made."
        },
        "status": {
          "type": "string",
          "description": "Status of the change request and it¡¯s a sub-state."
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655Attachment"
          },
          "description": "The attachments of the communication message (when it is email type)."
        },
        "workLog": {
          "$ref": "#/definitions/TMF655WorkLog"
        },
        "incident": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655Incident"
          }
        },
        "specification": {
          "$ref": "#/definitions/TMF655ChangeRequestSpecification"
        },
        "impactEntity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655ImpactEntityRef"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655ChangeRequestCharacteristic"
          }
        },
        "targetEntity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655TargetEntityRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655RelatedPartyRef"
          },
          "description": "The parties involved by the change request"
        },
        "resolution": {
          "$ref": "#/definitions/TMF655Resolution"
        },
        "sla": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655SLARef"
          }
        },
        "relatedChangeRequest": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655ChangeRequestRef"
          },
          "description": "An existing Change Request that has some form of correlation with the given Change Request."
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655CategoryRef"
          },
          "description": "The category of change request"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655Note"
          }
        },
        "location": {
          "$ref": "#/definitions/TMF655Place",
          "description": "The place at which the change request occurred."
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF655Attachment": {
      "type": "object",
      "description": "Complements the description of an element (for instance a product) through video, pictures...",
      "properties": {
        "description": {
          "type": "string",
          "description": "A narrative text describing the content of the attachment"
        },
        "href": {
          "type": "string",
          "description": "Reference of the attachment"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the attachment"
        },
        "mimeType": {
          "type": "string",
          "description": "The mime type of the document as defined in RFC 2045 and RFC 2046 specifications."
        },
        "name": {
          "type": "string",
          "description": "The name of the file"
        },
        "path": {
          "type": "string",
          "description": "The path of the attached file"
        },
        "size": {
          "type": "integer",
          "description": "The size of the file (sizeUnit if present indicates the unit, otherwise kilobytes is the default)."
        },
        "sizeUnit": {
          "type": "integer",
          "description": "The unit size for expressing the size of the file (MB,kB...)"
        },
        "url": {
          "type": "string",
          "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
        },
        "validFor": {
          "$ref": "#/definitions/TMF655TimePeriod",
          "description": "Period of validity of the attachment"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF655WorkLog": {
      "type": "object",
      "description": "A record of the work performed on the change request during the investigation and resolution process.",
      "required": [
        "createDateTime",
        "record"
      ],
      "properties": {
        "createDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of worklog generated."
        },
        "description": {
          "type": "string",
          "description": "The description of the worklog."
        },
        "lastUpdateDateTime": {
          "type": "string",
          "description": "Date and time when the worklog updated."
        },
        "record": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655Record"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF655Incident": {
      "type": "object",
      "description": "An Incident is a record of an event that has altered the operational state of a entity (Resource, Service or Customer's \nProduct).",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the incident."
        },
        "name": {
          "type": "string",
          "description": "The name of the incident."
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF655ChangeRequestSpecification": {
      "type": "object",
      "description": "Defines a set of attributes related to Change Request.",
      "required": [
        "href",
        "id"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the specification"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to access the specification."
        },
        "id": {
          "type": "string",
          "description": "Identifier of the specification."
        },
        "name": {
          "type": "string",
          "description": "Name of the specification."
        },
        "validFor": {
          "$ref": "#/definitions/TMF655TimePeriod"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF655ImpactEntityRef": {
      "type": "object",
      "description": "Defines the entities (product, service, resource, and other related objects) which will be impacted while the change \nrequest is executed.",
      "required": [
        "href",
        "id"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description and analysis of the impact of the change request on the Product, Service or Resource."
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to access the impacted party, it could be a party reference or a party role reference."
        },
        "id": {
          "type": "string",
          "description": "Identifier of impacted entity."
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF655ChangeRequestCharacteristic": {
      "type": "object",
      "description": "Characteristics of the change request to instantiate or to modify",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the characteristic."
        },
        "value": {
          "type": "string",
          "description": "Value of the characteristic."
        }
      }
    },
    "TMF655TargetEntityRef": {
      "type": "object",
      "description": "The entity which will be changed or configured while the change request is executed.",
      "required": [
        "href",
        "id"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "The description to the related party."
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to access the target entity."
        },
        "id": {
          "type": "string",
          "description": "Identifier of target entity"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF655RelatedPartyRef": {
      "type": "object",
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
      "required": [
        "href",
        "id"
      ],
      "properties": {
        "href": {
          "type": "string",
          "description": "Reference of the related party, could be a party reference or a party role reference"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related party"
        },
        "name": {
          "type": "string",
          "description": "Name of the related party"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party."
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF655Resolution": {
      "type": "object",
      "description": "The way one or more change request has been implementation through a direct remedy or task.",
      "required": [
        "name",
        "description"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "The resolution's code, it can be configured as a multiple level \nhierarchy."
        },
        "description": {
          "type": "string",
          "description": "The description of the resolution."
        },
        "name": {
          "type": "string",
          "description": "The name of the resolution"
        },
        "task": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF655Task"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF655SLARef": {
      "type": "object",
      "description": "ServiceLevelAgreement reference: A service level agreement (SLA) is a type of agreement that represents a formal negotiated agreement between two parties designed to create a common understanding about products, services, priorities, responsibilities, and so forth. The SLA is a set of appropriate procedures and targets formally or informally agreed between parties in order to achieve and maintain specified Quality of Service.",
      "required": [
        "id",
        "href"
      ],
      "properties": {
        "href": {
          "type": "string",
          "description": "Reference of the service level agreement"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of service level agreement"
        },
        "name": {
          "type": "string",
          "description": "Name of the service level agreement"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF655ChangeRequestRef": {
      "type": "object",
      "description": "An existing Change Request that has some form of correlation with the given Change Request.",
      "required": [
        "id",
        "href"
      ],
      "properties": {
        "correlation": {
          "type": "string",
          "description": "The correlation between two change requests"
        },
        "description": {
          "type": "string",
          "description": "Description of a change request."
        },
        "href": {
          "type": "string",
          "description": "Hyper link to access a change request."
        },
        "id": {
          "type": "string",
          "description": "Identifier of an Change Reques"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF655CategoryRef": {
      "type": "object",
      "description": "The category for grouping recommendations",
      "properties": {
        "href": {
          "type": "string",
          "description": "Hypertext Reference of the category"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of category"
        },
        "name": {
          "type": "string",
          "description": "Name of the category."
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF655Note": {
      "type": "object",
      "description": "Extra information about a given entity",
      "properties": {
        "author": {
          "type": "string",
          "description": "Author of the note"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "Date of the note"
        },
        "text": {
          "type": "string",
          "description": "Text of the note"
        }
      }
    },
    "TMF655Place": {
      "type": "object",
      "description": "Place reference. Place defines the places where the products are sold or delivered.",
      "properties": {
        "href": {
          "type": "string",
          "description": "Unique reference of the place"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the place"
        },
        "name": {
          "type": "string",
          "description": "A user-friendly name for the place, such as \"Paris Store\", \"London Store\", \"Main Home\""
        },
        "role": {
          "type": "string",
          "description": "Role of the place (for instance: 'home delivery', 'shop retrieval')"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF655TimePeriod": {
      "type": "object",
      "description": "A base / value business entity used to represent a period of time between two timepoints.",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, ending at the TimePeriod."
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, starting at the TimePeriod"
        }
      }
    },
    "TMF655Record": {
      "type": "object",
      "description": "A record in a worklog.",
      "properties": {
        "dateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date time that a record is generated."
        },
        "description": {
          "type": "string",
          "description": "The detail description in a record."
        },
        "supportPerson": {
          "type": "string",
          "description": "The person who logged that record."
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF655Task": {
      "type": "object",
      "description": "A step or task along in the process of implementation a Change Request.",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the task."
        },
        "name": {
          "type": "string",
          "description": "The name of the task."
        },
        "state": {
          "type": "string",
          "description": "The state of the task."
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF655EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF655EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF655Error": {
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "Application related code."
        },
        "reason": {
          "type": "integer",
          "description": "Text that explains the reason for error."
        },
        "message": {
          "type": "string",
          "description": "(optional) Text that provide more details and corrective actions related to the error."
        },
        "status": {
          "type": "integer",
          "description": "(optional) http error code extension like 400-2"
        },
        "referenceError": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        },
        "@type": {
          "type": "string",
          "description": "(optional) The class type of a REST resource."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "(optional) A link to the schema describing a REST resource."
        }
      }
    },
    "TMF657ServiceLevelObjective": {
      "type": "object",
      "description": "Service level objectives are defined in terms of parameters and metrics, thresholds, and tolerances \nassociated with the parameters.",
      "required": [
        "name"
      ],
      "properties": {
        "conformanceComparator": {
          "type": "string",
          "description": "An operator that specifies whether a Service Level Objective is \nviolated above or below the conformanceTarget."
        },
        "conformancePeriod": {
          "$ref": "#/definitions/TMF657TimePeriod",
          "description": "An interval of time during which the Conformance Target must be measured."
        },
        "conformanceTarget": {
          "type": "string",
          "description": "A value used to determine if Service Level Objective is met. \nThe data type should be adjusted case by case."
        },
        "graceTimes": {
          "type": "string",
          "description": "The number of times an objective can remain un-updated without \na violation of a Service Level Agreement in reference to a measurement period and/or Service Level Agreement reporting period."
        },
        "href": {
          "type": "string",
          "description": "The hyperlink to access a service level objective."
        },
        "id": {
          "type": "string",
          "description": "The identifier of a service level objectives."
        },
        "name": {
          "type": "string",
          "description": "The name of the service level objectives."
        },
        "thresholdTarget": {
          "type": "string",
          "description": "A value that used to specify when a warning should be used \nthat indicates an objective is danger of not being met. Notice, the data type should be adjusted case by case."
        },
        "tolerancePeriod": {
          "$ref": "#/definitions/TMF657TimePeriod"
        },
        "toleranceTarget": {
          "type": "string",
          "description": "A value that specifies the allowable variation of a conformance \nTarget. The data type should be adjusted case by case."
        },
        "validFor": {
          "$ref": "#/definitions/TMF657TimePeriod",
          "description": "A valid duration of a thing."
        },
        "specParameter": {
          "$ref": "#/definitions/TMF657ServiceLevelSpecParameter"
        },
        "specConsequence": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF657ServiceLevelSpecConsequence"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF657ServiceLevelObjective_Create": {
      "type": "object",
      "description": "Service level objectives are defined in terms of parameters and metrics, thresholds, and tolerances \nassociated with the parameters.\nSkipped properties: id,href",
      "required": [
        "conformanceTarget",
        "conformanceComparator",
        "specParameter"
      ],
      "properties": {
        "conformanceComparator": {
          "type": "string",
          "description": "An operator that specifies whether a Service Level Objective is \nviolated above or below the conformanceTarget."
        },
        "conformancePeriod": {
          "$ref": "#/definitions/TMF657TimePeriod",
          "description": "An interval of time during which the Conformance Target must be measured."
        },
        "conformanceTarget": {
          "type": "string",
          "description": "A value used to determine if Service Level Objective is met. \nThe data type should be adjusted case by case."
        },
        "graceTimes": {
          "type": "string",
          "description": "The number of times an objective can remain un-updated without \na violation of a Service Level Agreement in reference to a measurement period and/or Service Level Agreement reporting period."
        },
        "name": {
          "type": "string",
          "description": "The name of the service level objectives."
        },
        "thresholdTarget": {
          "type": "string",
          "description": "A value that used to specify when a warning should be used \nthat indicates an objective is danger of not being met. Notice, the data type should be adjusted case by case."
        },
        "tolerancePeriod": {
          "$ref": "#/definitions/TMF657TimePeriod"
        },
        "toleranceTarget": {
          "type": "string",
          "description": "A value that specifies the allowable variation of a conformance \nTarget. The data type should be adjusted case by case."
        },
        "validFor": {
          "$ref": "#/definitions/TMF657TimePeriod",
          "description": "A valid duration of a thing."
        },
        "specParameter": {
          "$ref": "#/definitions/TMF657ServiceLevelSpecParameter"
        },
        "specConsequence": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF657ServiceLevelSpecConsequence"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF657ServiceLevelObjective_Update": {
      "type": "object",
      "description": "Service level objectives are defined in terms of parameters and metrics, thresholds, and tolerances \nassociated with the parameters.\nSkipped properties: id,href,id,href,validFor",
      "properties": {
        "conformanceComparator": {
          "type": "string",
          "description": "An operator that specifies whether a Service Level Objective is \nviolated above or below the conformanceTarget."
        },
        "conformancePeriod": {
          "$ref": "#/definitions/TMF657TimePeriod",
          "description": "An interval of time during which the Conformance Target must be measured."
        },
        "conformanceTarget": {
          "type": "string",
          "description": "A value used to determine if Service Level Objective is met. \nThe data type should be adjusted case by case."
        },
        "graceTimes": {
          "type": "string",
          "description": "The number of times an objective can remain un-updated without \na violation of a Service Level Agreement in reference to a measurement period and/or Service Level Agreement reporting period."
        },
        "name": {
          "type": "string",
          "description": "The name of the service level objectives."
        },
        "thresholdTarget": {
          "type": "string",
          "description": "A value that used to specify when a warning should be used \nthat indicates an objective is danger of not being met. Notice, the data type should be adjusted case by case."
        },
        "tolerancePeriod": {
          "$ref": "#/definitions/TMF657TimePeriod"
        },
        "toleranceTarget": {
          "type": "string",
          "description": "A value that specifies the allowable variation of a conformance \nTarget. The data type should be adjusted case by case."
        },
        "specParameter": {
          "$ref": "#/definitions/TMF657ServiceLevelSpecParameter"
        },
        "specConsequence": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF657ServiceLevelSpecConsequence"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF657ServiceLevelSpecification": {
      "type": "object",
      "description": "A Service Level Specification represents a pre-defined or negotiated set of Service Level \nObjectives. In addition, certain consequences are associated with not meeting the Service Level \nObjectives. Service Level Agreements are expressed in terms of Service Level Specifications.",
      "properties": {
        "description": {
          "type": "string",
          "description": "A brief introduction of a service level specification."
        },
        "href": {
          "type": "string",
          "description": "The hyperlink to access a service level specification."
        },
        "id": {
          "type": "string",
          "description": "The identifier to a service level specification."
        },
        "name": {
          "type": "string",
          "description": "The name of Service Level Specification"
        },
        "validFor": {
          "$ref": "#/definitions/TMF657TimePeriod",
          "description": "A valid duration of a thing."
        },
        "objective": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF657ServiceLevelObjectiveRef"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF657ServiceLevelSpecification_Create": {
      "type": "object",
      "description": "A Service Level Specification represents a pre-defined or negotiated set of Service Level \nObjectives. In addition, certain consequences are associated with not meeting the Service Level \nObjectives. Service Level Agreements are expressed in terms of Service Level Specifications.\nSkipped properties: id,href",
      "required": [
        "name",
        "objective"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "A brief introduction of a service level specification."
        },
        "name": {
          "type": "string",
          "description": "The name of Service Level Specification"
        },
        "validFor": {
          "$ref": "#/definitions/TMF657TimePeriod",
          "description": "A valid duration of a thing."
        },
        "objective": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF657ServiceLevelObjectiveRef"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF657ServiceLevelSpecification_Update": {
      "type": "object",
      "description": "A Service Level Specification represents a pre-defined or negotiated set of Service Level \nObjectives. In addition, certain consequences are associated with not meeting the Service Level \nObjectives. Service Level Agreements are expressed in terms of Service Level Specifications.\nSkipped properties: id,href,id,href,validFor",
      "properties": {
        "description": {
          "type": "string",
          "description": "A brief introduction of a service level specification."
        },
        "name": {
          "type": "string",
          "description": "The name of Service Level Specification"
        },
        "objective": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF657ServiceLevelObjectiveRef"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF657TimePeriod": {
      "type": "object",
      "description": "A base / value business entity used to represent a period of time between two timepoints.",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, ending at the TimePeriod."
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, starting at the TimePeriod"
        }
      }
    },
    "TMF657ServiceLevelSpecParameter": {
      "type": "object",
      "description": "Service Level Specification parameters can be one of two types. A Key Quality Indicator (KQI) \nprovides a measurement of a specific aspect of the performance of a Product (i.e., Product \nSpecification, Product Offering, or Product) or a Service (i.e., Service Specification or Service).",
      "required": [
        "name",
        "relatedEntity"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of parameter."
        },
        "serviceParmCategory": {
          "type": "string",
          "description": "A string that specifies whether the Service Level Specification Parameter is technology specific, service specific, or technology/service independent"
        },
        "serviceParmPerspective": {
          "type": "string",
          "description": "A string that specifies whether the Service Level Specification \nParameter represents a single user instance parameter or a parameter that represents an aggregation."
        },
        "transformationAlgorithmOfKQI": {
          "type": "string",
          "description": "The description of a logical step-by-step procedure used to \ncalculate the value of a KQI."
        },
        "type": {
          "type": "string",
          "description": "Types of Service Level Specification parameters are KQI or KPI."
        },
        "validFor": {
          "$ref": "#/definitions/TMF657TimePeriod",
          "description": "A valid duration of a thing."
        },
        "relatedEntity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF657EntityRef"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF657ServiceLevelSpecConsequence": {
      "type": "object",
      "description": "Some consequences for the provider of the Service are resulted when the service level objective\ndoes not meet.",
      "properties": {
        "prescribedAction": {
          "type": "string",
          "description": "Recommended remedy for a violated Service Level Objective. \nThis could be a hyperlink to the recommended action."
        },
        "validFor": {
          "$ref": "#/definitions/TMF657TimePeriod",
          "description": "A valid duration of a thing."
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF657EntityRef": {
      "type": "object",
      "description": "The related entity source of a KQI or KPI. A KQI draws its data from a number of sources, \nincluding Key Performance Indicators (KPIs).  A KPI provides a measurement of a specific aspect \nof the performance of a Service (whether it is a network- or a non-network-based Service) or a \ngroup of Services of the same type.",
      "required": [
        "id",
        "href"
      ],
      "properties": {
        "href": {
          "type": "string",
          "description": "The hyperlink to access an entity."
        },
        "id": {
          "type": "string",
          "description": "The identifier of an entity."
        },
        "name": {
          "type": "string",
          "description": "The name of an entity."
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF657ServiceLevelObjectiveRef": {
      "type": "object",
      "description": "A set of Service Level Objectives that are contained in the Service Level Specification.",
      "required": [
        "id",
        "href"
      ],
      "properties": {
        "href": {
          "type": "string",
          "description": "The hyperlink to access a service level object."
        },
        "id": {
          "type": "string",
          "description": "The identifier of a service level object."
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF657EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF657EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF657Error": {
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "Application related code."
        },
        "reason": {
          "type": "integer",
          "description": "Text that explains the reason for error."
        },
        "message": {
          "type": "string",
          "description": "(optional) Text that provide more details and corrective actions related to the error."
        },
        "status": {
          "type": "integer",
          "description": "(optional) http error code extension like 400-2"
        },
        "referenceError": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        },
        "@type": {
          "type": "string",
          "description": "(optional) The class type of a REST resource."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "(optional) A link to the schema describing a REST resource."
        }
      }
    },
    "TMF658ProgramProductSpec": {
      "title": "ProgramProductSpec",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "productNumber": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "needsLoyaltyAccount": {
          "type": "boolean"
        },
        "lifeCycleStatus": {
          "type": "string"
        },
        "brand": {
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF658ValidFor"
        }
      },
      "required": [
        "id",
        "name",
        "productNumber",
        "description",
        "needsLoyaltyAccount",
        "lifeCycleStatus",
        "brand",
        "validFor"
      ]
    },
    "TMF658UpdateProductSpec": {
      "title": "UpdateProductSpec",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "productNumber": {
          "type": "string"
        },
        "brand": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "description",
        "productNumber",
        "brand"
      ]
    },
    "TMF658LoyaltyAction": {
      "title": "LoyaltyAction",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "actionAttributes": {
          "type": "object"
        },
        "body": {
          "type": "object"
        },
        "headers": {
          "type": "object"
        },
        "commonName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "action": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "action",
        "endpoint"
      ]
    },
    "TMF658LoyaltyActionLinkRef": {
      "title": "LoyaltyActionLinkRef",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "TMF658LoyaltyCondition": {
      "title": "LoyaltyCondition",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "attribute": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "attribute",
        "operator",
        "value"
      ]
    },
    "TMF658LoyaltyConditionLinkRef": {
      "title": "LoyaltyConditionLinkRef",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "TMF658LoyaltyEventType": {
      "title": "LoyaltyEventType",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        }
      },
      "required": [
        "eventType"
      ]
    },
    "TMF658LoyaltyEventTypeLinkRef": {
      "title": "LoyaltyEventTypeLinkRef",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "TMF658LoyaltyRule": {
      "title": "LoyaltyRule",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "commonName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isCNF": {
          "type": "boolean"
        },
        "hasSubRules": {
          "type": "boolean"
        },
        "isMandatoryEvaluation": {
          "type": "boolean"
        },
        "usage": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        },
        "loyaltyEventType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF658LoyaltyEventTypeLinkRef"
          }
        },
        "loyaltyCondition": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF658LoyaltyConditionLinkRef"
          }
        },
        "loyaltyAction": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF658LoyaltyActionLinkRef"
          }
        }
      }
    },
    "TMF658CreateLoyaltyRule": {
      "title": "LoyaltyRule",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "commonName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isCNF": {
          "type": "boolean"
        },
        "hasSubRules": {
          "type": "boolean"
        },
        "isMandatoryEvaluation": {
          "type": "boolean"
        },
        "usage": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        }
      }
    },
    "TMF658AddRuleCondition": {
      "title": "RuleCondition",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "TMF658AddRuleAction": {
      "title": "RuleAction",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "TMF658AddRuleEventType": {
      "title": "RuleEventType",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "TMF658LoyaltyExecutionPoint": {
      "title": "LoyaltyExecutionPoint",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "actionAttributes": {
          "type": "object"
        },
        "body": {
          "type": "object"
        },
        "headers": {
          "type": "object"
        },
        "commonName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "action": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "dateTime": {
          "type": "string"
        }
      }
    },
    "TMF658ValidFor": {
      "title": "ValidFor",
      "type": "object",
      "properties": {
        "startDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        }
      },
      "required": [
        "startDateTime",
        "endDateTime"
      ]
    },
    "TMF658LoyaltyMember": {
      "title": "CreateLoyaltyMember",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF658ValidFor"
        }
      }
    },
    "TMF658UpdateEventTypesrequest": {
      "title": "Update Event TypesRequest",
      "type": "object",
      "properties": {
        "eventType": {
          "type": "string"
        }
      },
      "required": [
        "eventType"
      ]
    },
    "TMF658CreateLoyaltyBalance": {
      "title": "CreateLoyaltyBalance",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "quantity": {
          "$ref": "#/definitions/TMF658Quantity"
        },
        "validFor": {
          "$ref": "#/definitions/TMF658ValidFor"
        }
      },
      "required": [
        "quantity"
      ]
    },
    "TMF658LoyaltyBalance": {
      "title": "LoyaltyBalance",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "quantity": {
          "$ref": "#/definitions/TMF658Quantity"
        },
        "validFor": {
          "$ref": "#/definitions/TMF658ValidFor"
        },
        "loyaltyProgramMember": {
          "$ref": "#/definitions/TMF658LoyaltyMemberLinkRef"
        }
      }
    },
    "TMF658LoyaltyBalanceUpdate": {
      "title": "LoyaltyBalanceUpdate",
      "type": "object",
      "properties": {
        "validFor": {
          "$ref": "#/definitions/TMF658ValidFor"
        }
      }
    },
    "TMF658LoyaltyAccount": {
      "title": "LoyaltyAccount",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "loyaltyProgramProduct": {
          "$ref": "#/definitions/TMF658ProductLinkRef"
        }
      }
    },
    "TMF658LoyaltyAccountCreate": {
      "title": "LoyaltyAccountCreate",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "loyaltyBalance": {
          "$ref": "#/definitions/TMF658CreateLoyaltyBalance"
        }
      }
    },
    "TMF658UpdateLoyaltyMember": {
      "title": "UpdateLoyaltyMember",
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF658ValidFor"
        }
      }
    },
    "TMF658LoyaltyMemberLinkRef": {
      "title": "LoyaltyMemberLinkRef",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "TMF658ProductProgramUpdateRef": {
      "title": "ProductProgramUpdate",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "productStatus": {
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF658ValidFor"
        }
      }
    },
    "TMF658ProductProgramRef": {
      "title": "ProductProgram",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "productStatus": {
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF658ValidFor"
        },
        "productSpecId": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "loyaltyAccount": {
          "$ref": "#/definitions/TMF658LoyaltyAccountCreate"
        },
        "characteristics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF658ProductCharacteristics"
          }
        }
      },
      "required": [
        "name",
        "productSpecId"
      ]
    },
    "TMF658ProductCharacteristics": {
      "title": "ProductLinkRef",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "TMF658ProductLinkRef": {
      "title": "ProductLinkRef",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "TMF658LoyaltyTransactionRef": {
      "title": "LoyaltyTransaction",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "openingBalance": {
          "type": "number",
          "format": "double"
        },
        "closingBalance": {
          "type": "number",
          "format": "double"
        },
        "dateTime": {
          "type": "string",
          "format": "dateTime"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "href",
        "quantity",
        "description",
        "openingBalance",
        "closingBalance",
        "dateTime"
      ]
    },
    "TMF658LoyaltyEvent": {
      "title": "LoyaltyEvent",
      "type": "object",
      "properties": {
        "eventId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "event": {
          "$ref": "#/definitions/TMF658Event"
        }
      },
      "required": [
        "memberId",
        "eventType",
        "event"
      ]
    },
    "TMF658Quantity": {
      "title": "Quantity",
      "type": "object",
      "properties": {
        "unit": {
          "type": "string"
        },
        "balance": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "unit",
        "balance"
      ]
    },
    "TMF658Event": {
      "title": "Event",
      "type": "object"
    },
    "TMF658Error": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "An integer coding the error type. This is given to caller so he can translate them if required.",
          "type": "integer"
        },
        "message": {
          "description": "A short localized string that describes the error.",
          "type": "string"
        },
        "description": {
          "description": "(optional) A long localized error description if needed. It can contain precise information about which parameter is missing, or what are the identifier acceptable values.",
          "type": "string"
        },
        "infoURL": {
          "description": "(optional) A URL to online documentation that provides more information about the error.",
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF658ErrorDetail"
          }
        }
      }
    },
    "TMF658ErrorDetail": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "An integer coding the error type. This is given to caller so he can translate them if required.",
          "type": "integer"
        },
        "message": {
          "description": "A short localized string that describes the error.",
          "type": "string"
        },
        "description": {
          "description": "(optional) A long localized error description if needed. It can contain precise information about which parameter is missing, or what are the identifier acceptable values.",
          "type": "string"
        },
        "infoURL": {
          "description": "(optional) A URL to online documentation that provides more information about the error.",
          "type": "string"
        }
      }
    },
    "TMF662EntitySpecification": {
      "type": "object",
      "description": "EntitySpecification is a class that offers characteristics to describe a type of entity. Entities are generic constructs that may be used to describe bespoke business entities that are not effectively covered by the existing SID model.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of this REST resource"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to this REST resource"
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Entity specification version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of this catalog item"
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662Attachment"
          }
        },
        "entitySchema": {
          "$ref": "#/definitions/TMF662EntitySchemaRef"
        },
        "specCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662SpecCharacteristic"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662RelatedPartyRef"
          }
        }
      }
    },
    "TMF662EntitySpecification_Create": {
      "type": "object",
      "description": "EntitySpecification is a class that offers characteristics to describe a type of entity. Entities are generic constructs that may be used to describe bespoke business entities that are not effectively covered by the existing SID model.\nSkipped properties: id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Entity specification version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of this catalog item"
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662Attachment"
          }
        },
        "entitySchema": {
          "$ref": "#/definitions/TMF662EntitySchemaRef"
        },
        "specCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662SpecCharacteristic"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662RelatedPartyRef"
          }
        }
      }
    },
    "TMF662EntitySpecification_Update": {
      "type": "object",
      "description": "EntitySpecification is a class that offers characteristics to describe a type of entity. Entities are generic constructs that may be used to describe bespoke business entities that are not effectively covered by the existing SID model.\nSkipped properties: id,href,id,href,lastUpdate,@type",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Entity specification version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of this catalog item"
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662Attachment"
          }
        },
        "entitySchema": {
          "$ref": "#/definitions/TMF662EntitySchemaRef"
        },
        "specCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662SpecCharacteristic"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662RelatedPartyRef"
          }
        }
      }
    },
    "TMF662AssociationSpecification": {
      "type": "object",
      "description": "AssociationSpecification is an association class that describes a type of relationship between two entities. This is a generic construct that may be used to describe relationship types and roles. The role and type of each entity in the relationship is given by an association role specification. Two role specifications are embedded in the association specification.",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier of the association specification"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to this specification"
        },
        "name": {
          "type": "string",
          "description": "Name given to this association specification"
        },
        "description": {
          "type": "string",
          "description": "Description of the specification"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of this association specification"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base class type of this association specification"
        },
        "version": {
          "type": "string",
          "description": "Version of this association"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which this specification is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "The last modified date of this specification"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Indicates the current lifecycle status"
        },
        "constraint": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662ConstraintRef"
          }
        },
        "associationRoleSpec": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662AssociationRoleSpec"
          }
        }
      }
    },
    "TMF662AssociationSpecification_Create": {
      "type": "object",
      "description": "AssociationSpecification is an association class that describes a type of relationship between two entities. This is a generic construct that may be used to describe relationship types and roles. The role and type of each entity in the relationship is given by an association role specification. Two role specifications are embedded in the association specification.\nSkipped properties: id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this association specification"
        },
        "description": {
          "type": "string",
          "description": "Description of the specification"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of this association specification"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base class type of this association specification"
        },
        "version": {
          "type": "string",
          "description": "Version of this association"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which this specification is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "The last modified date of this specification"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Indicates the current lifecycle status"
        },
        "constraint": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662ConstraintRef"
          }
        },
        "associationRoleSpec": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662AssociationRoleSpec"
          }
        }
      }
    },
    "TMF662AssociationSpecification_Update": {
      "type": "object",
      "description": "AssociationSpecification is an association class that describes a type of relationship between two entities. This is a generic construct that may be used to describe relationship types and roles. The role and type of each entity in the relationship is given by an association role specification. Two role specifications are embedded in the association specification.\nSkipped properties: id,href,id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this association specification"
        },
        "description": {
          "type": "string",
          "description": "Description of the specification"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of this association specification"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base class type of this association specification"
        },
        "version": {
          "type": "string",
          "description": "Version of this association"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which this specification is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "The last modified date of this specification"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Indicates the current lifecycle status"
        },
        "constraint": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662ConstraintRef"
          }
        },
        "associationRoleSpec": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662AssociationRoleSpec"
          }
        }
      }
    },
    "TMF662Category": {
      "type": "object",
      "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the category"
        },
        "href": {
          "type": "string",
          "description": "Reference of the catalog"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which the category is valid"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        }
      }
    },
    "TMF662Category_Create": {
      "type": "object",
      "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.\nSkipped properties: id,href",
      "properties": {
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which the category is valid"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        }
      }
    },
    "TMF662Category_Update": {
      "type": "object",
      "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.\nSkipped properties: id,href,id,href",
      "properties": {
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which the category is valid"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        }
      }
    },
    "TMF662EntityCatalogItem": {
      "type": "object",
      "description": "An EntityCatalogItem is an entity that allows any ProductOffering, ServiceCandidate, ResourceCandidate, or even any object inheriting from RootEntity, to be available to a catalog. The CatalogSpecification and Policy of the catalog governs the content of the EntityCatalogItem. This API addresses only EntitySpecification items extended from RootEntity as EntityCatalogItem.\nThe EntityCatalogItem resource (JSON format) represents a set of characteristics that define the values given by the EntityCatalogItem.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of this REST resource"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to this REST resource"
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "EntityCatalogItem version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of this catalog item"
        }
      }
    },
    "TMF662EntityCatalogItem_Create": {
      "type": "object",
      "description": "An EntityCatalogItem is an entity that allows any ProductOffering, ServiceCandidate, ResourceCandidate, or even any object inheriting from RootEntity, to be available to a catalog. The CatalogSpecification and Policy of the catalog governs the content of the EntityCatalogItem. This API addresses only EntitySpecification items extended from RootEntity as EntityCatalogItem.\nThe EntityCatalogItem resource (JSON format) represents a set of characteristics that define the values given by the EntityCatalogItem.\nSkipped properties: id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "EntityCatalogItem version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of this catalog item"
        }
      }
    },
    "TMF662EntityCatalogItem_Update": {
      "type": "object",
      "description": "An EntityCatalogItem is an entity that allows any ProductOffering, ServiceCandidate, ResourceCandidate, or even any object inheriting from RootEntity, to be available to a catalog. The CatalogSpecification and Policy of the catalog governs the content of the EntityCatalogItem. This API addresses only EntitySpecification items extended from RootEntity as EntityCatalogItem.\nThe EntityCatalogItem resource (JSON format) represents a set of characteristics that define the values given by the EntityCatalogItem.\nSkipped properties: id,href,id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of this REST resource"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "The (immediate) base class type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "EntityCatalogItem version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which this REST resource is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of this catalog item"
        }
      }
    },
    "TMF662Association": {
      "type": "object",
      "description": "Association is the class that describe a relationship between two or more entity specifications based on a given association specification. The role and type of each endpoint in the relationship is given by an association role. The type of endpoints in the relationship should match the ones as defined in the corresponding association role specification. A relationship between entity specifications may be governed by conditions and rules which are addressed by constraint references in this resource. Constraints for a relationship may include new rules and conditions in addition to those defined for the corresponding association specification",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier of the association"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to this association"
        },
        "name": {
          "type": "string",
          "description": "Name given to this association"
        },
        "description": {
          "type": "string",
          "description": "Description of the association"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of this association"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base class type of this association"
        },
        "version": {
          "type": "string",
          "description": "Version of this REST resource"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which this association is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "The last modified date of this association object"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Indicates the current lifecycle status"
        },
        "associationSpec": {
          "$ref": "#/definitions/TMF662AssociationSpecRef"
        },
        "associationRole": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662AssociationRole"
          }
        },
        "constraint": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662ConstraintRef"
          }
        }
      }
    },
    "TMF662Association_Create": {
      "type": "object",
      "description": "Association is the class that describe a relationship between two or more entity specifications based on a given association specification. The role and type of each endpoint in the relationship is given by an association role. The type of endpoints in the relationship should match the ones as defined in the corresponding association role specification. A relationship between entity specifications may be governed by conditions and rules which are addressed by constraint references in this resource. Constraints for a relationship may include new rules and conditions in addition to those defined for the corresponding association specification\nSkipped properties: id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this association"
        },
        "description": {
          "type": "string",
          "description": "Description of the association"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of this association"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base class type of this association"
        },
        "version": {
          "type": "string",
          "description": "Version of this REST resource"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which this association is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "The last modified date of this association object"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Indicates the current lifecycle status"
        },
        "associationSpec": {
          "$ref": "#/definitions/TMF662AssociationSpecRef"
        },
        "associationRole": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662AssociationRole"
          }
        },
        "constraint": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662ConstraintRef"
          }
        }
      }
    },
    "TMF662Association_Update": {
      "type": "object",
      "description": "Association is the class that describe a relationship between two or more entity specifications based on a given association specification. The role and type of each endpoint in the relationship is given by an association role. The type of endpoints in the relationship should match the ones as defined in the corresponding association role specification. A relationship between entity specifications may be governed by conditions and rules which are addressed by constraint references in this resource. Constraints for a relationship may include new rules and conditions in addition to those defined for the corresponding association specification\nSkipped properties: id,href,id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name given to this association"
        },
        "description": {
          "type": "string",
          "description": "Description of the association"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of this association"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base class type of this association"
        },
        "version": {
          "type": "string",
          "description": "Version of this REST resource"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which this association is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "The last modified date of this association object"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Indicates the current lifecycle status"
        },
        "associationSpec": {
          "$ref": "#/definitions/TMF662AssociationSpecRef"
        },
        "associationRole": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662AssociationRole"
          }
        },
        "constraint": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662ConstraintRef"
          }
        }
      }
    },
    "TMF662Catalog": {
      "type": "object",
      "description": "The root entity for entity catalog management. An entity catalog can be defined as a collection of entity catalog items and arranging them in a particular manner based on the need.\nIn comparison to Product, Service and Resource catalogs, the entity catalog is intended for the purpose of providing any SID entity to consumers via a catalog, with its specification and policy providing governance over its content. Even Entity catalog may have an overlap with Product, Service or Resource catalog, it doesn't replace them. It is primarily intended to address those SID entities which may not be addressed by any of Product, Service or Resource catalog.\nAn entity catalog comprises of a list of RootEntities made available through EntityCatalogItems. This API addresses only RootEntity extended items as EntitySpecification. An entity catalog typically includes name, description and time period that it is valid for.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the Catalog"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the catalog"
        },
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of catalog. For entity catalogs, this will be 'EntityCatalog'."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Indicates<b> </b>the base (class) type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Catalog version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which the catalog is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        }
      }
    },
    "TMF662Catalog_Create": {
      "type": "object",
      "description": "The root entity for entity catalog management. An entity catalog can be defined as a collection of entity catalog items and arranging them in a particular manner based on the need.\nIn comparison to Product, Service and Resource catalogs, the entity catalog is intended for the purpose of providing any SID entity to consumers via a catalog, with its specification and policy providing governance over its content. Even Entity catalog may have an overlap with Product, Service or Resource catalog, it doesn't replace them. It is primarily intended to address those SID entities which may not be addressed by any of Product, Service or Resource catalog.\nAn entity catalog comprises of a list of RootEntities made available through EntityCatalogItems. This API addresses only RootEntity extended items as EntitySpecification. An entity catalog typically includes name, description and time period that it is valid for.\nSkipped properties: id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of catalog. For entity catalogs, this will be 'EntityCatalog'."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Indicates<b> </b>the base (class) type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Catalog version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which the catalog is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        }
      }
    },
    "TMF662Catalog_Update": {
      "type": "object",
      "description": "The root entity for entity catalog management. An entity catalog can be defined as a collection of entity catalog items and arranging them in a particular manner based on the need.\nIn comparison to Product, Service and Resource catalogs, the entity catalog is intended for the purpose of providing any SID entity to consumers via a catalog, with its specification and policy providing governance over its content. Even Entity catalog may have an overlap with Product, Service or Resource catalog, it doesn't replace them. It is primarily intended to address those SID entities which may not be addressed by any of Product, Service or Resource catalog.\nAn entity catalog comprises of a list of RootEntities made available through EntityCatalogItems. This API addresses only RootEntity extended items as EntitySpecification. An entity catalog typically includes name, description and time period that it is valid for.\nSkipped properties: id,href,id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of catalog. For entity catalogs, this will be 'EntityCatalog'."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Indicates<b> </b>the base (class) type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Catalog version"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which the catalog is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        }
      }
    },
    "TMF662TimePeriod": {
      "type": "object",
      "description": "A base / value business entity used to represent a period of time between two timepoints.",
      "properties": {
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, starting at the TimePeriod"
        },
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, ending at the TimePeriod."
        }
      }
    },
    "TMF662Attachment": {
      "type": "object",
      "description": "Complements the description of an element (for instance a product) through video, pictures...",
      "properties": {
        "description": {
          "type": "string",
          "description": "A narrative text describing the content of the attachment"
        },
        "href": {
          "type": "string",
          "description": "Reference of the attachment"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the attachment"
        },
        "type": {
          "type": "string",
          "description": "Attachment type such as video, picture"
        },
        "url": {
          "type": "string",
          "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
        }
      }
    },
    "TMF662EntitySchemaRef": {
      "type": "object",
      "description": "The reference object to the schema and type of target entity which is described by an entity specification",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Class type of the target entity"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing the target entity"
        }
      }
    },
    "TMF662SpecCharacteristic": {
      "type": "object",
      "description": "A characteristic quality or distinctive feature of a Specification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the SpecCharacteristic"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the SpecCharacteristic is"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
        },
        "configurable": {
          "type": "boolean",
          "description": "If true, the Boolean indicates that the SpecCharacteristic is configurable"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which the productSpecCharacteristic is valid"
        },
        "@type": {
          "type": "string",
          "description": "(Class) type of the characteristic"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this characteristic"
        },
        "specCharacteristicValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF662SpecCharacteristicValue"
          }
        }
      }
    },
    "TMF662RelatedPartyRef": {
      "type": "object",
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of a related party"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related party, could be a party reference or a party role reference"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party."
        },
        "name": {
          "type": "string",
          "description": "Name of the related party"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "Validity period of the related party"
        }
      }
    },
    "TMF662SpecCharacteristicValue": {
      "type": "object",
      "description": "A number or text that can be assigned to a SpecCharacteristic",
      "properties": {
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
        },
        "isDefault": {
          "type": "boolean",
          "description": "If true, the Boolean Indicates if the value is the default value for a characteristic"
        },
        "value": {
          "type": "object",
          "description": "the  value that the characteristic can take on."
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "unit of measure for the valueCould be minutes, GB, etc"
        },
        "validFor": {
          "$ref": "#/definitions/TMF662TimePeriod",
          "description": "The period for which this object is valid"
        },
        "valueFrom": {
          "type": "integer",
          "description": "The low range value that a characteristic can take on"
        },
        "valueTo": {
          "type": "integer",
          "description": "The upper range value that a characteristic can take on"
        },
        "rangeInterval": {
          "type": "string",
          "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
        },
        "regex": {
          "type": "string",
          "description": "A regular expression constraint for given value"
        }
      }
    },
    "TMF662ConstraintRef": {
      "type": "object",
      "description": "Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec.",
      "properties": {
        "id": {
          "type": "string",
          "description": "reference id to the target constraint"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the target constraint"
        },
        "version": {
          "type": "string",
          "description": "constraint version"
        },
        "name": {
          "type": "string",
          "description": "Name given to the constraint"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of the constraint"
        }
      }
    },
    "TMF662AssociationRoleSpec": {
      "type": "object",
      "description": "This embedded object represents the role and type of each entity involved in a relationship.",
      "properties": {
        "role": {
          "type": "string"
        },
        "isSource": {
          "type": "boolean"
        },
        "aggregation": {
          "type": "string"
        },
        "minQuantity": {
          "type": "integer"
        },
        "maxQuantity": {
          "type": "integer"
        },
        "defaulQuantity": {
          "type": "integer"
        },
        "isNavigable": {
          "type": "boolean"
        },
        "entityType": {
          "type": "string"
        }
      }
    },
    "TMF662AssociationSpecRef": {
      "type": "object",
      "description": "reference to an AssociationSpecification object",
      "properties": {
        "id": {
          "type": "string",
          "description": "reference id to the target AssociationSpecification"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the target AssociationSpecification"
        },
        "@type": {
          "type": "string",
          "description": "The (class) type of the AssociationSpecification"
        }
      }
    },
    "TMF662AssociationRole": {
      "type": "object",
      "description": "This embedded object represents the role and type of each entity involved in a relationship.",
      "properties": {
        "role": {
          "type": "string",
          "description": "The association role of this relationship participant as defined in the associationRoleSpec"
        },
        "isSource": {
          "type": "boolean",
          "description": "A flag indicating if the participant involved in a uni-directional relationship is the source or not. this flag is true If the association is bi-directional (both end points are navigable)"
        },
        "id": {
          "type": "string",
          "description": "The identifier of the endpoint plays this role"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the endpoint plays this association role"
        },
        "name": {
          "type": "string",
          "description": "Name of the endpoint which plays this association role"
        },
        "@type": {
          "type": "string",
          "description": "(class) type of the endpoint which plays this association role"
        }
      }
    },
    "TMF662EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF662EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF662Error": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "An integer coding the error type. This is given to caller so he can translate them if required."
        },
        "message": {
          "type": "string",
          "description": "A short localized string that describes the error."
        },
        "description": {
          "type": "string",
          "description": "(optional) A long localized error description if needed. It can contain precise information about which parameter is missing, or what are the identifier acceptable values."
        },
        "infoURL": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        }
      }
    },
    "TMF663ShoppingCart": {
      "type": "object",
      "description": "Shopping Cart resource is used for the temporarily selection and reservation of product offerings in e-commerce, call center and retail purchase. Shopping cart supports purchase of both physical and digital goods and service (e.g. handset, telecom network service). Shopping Cart contain list of cart items, a reference to customer (partyRole) or contact medium in case customer not exist, and the total items price including promotions",
      "required": [
        "cartItem"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to access the shopping cart"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier created on provider side (e.g. Order Capture system)"
        },
        "validFor": {
          "$ref": "#/definitions/TMF663TimePeriod",
          "description": "The period for which the shopping cart is valid (e.g. 90 if no activity or 7 days if cart is empty)"
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663ContactMedium"
          }
        },
        "cartTotalPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663CartPrice"
          },
          "description": "Total amount of the shopping cart, usually of money, that represents the actual price paid by the Customer for cart (considering only \"Active\" cart items)"
        },
        "cartItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663CartItem"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663RelatedPartyRef"
          }
        }
      }
    },
    "TMF663ShoppingCart_Create": {
      "type": "object",
      "description": "Shopping Cart resource is used for the temporarily selection and reservation of product offerings in e-commerce, call center and retail purchase. Shopping cart supports purchase of both physical and digital goods and service (e.g. handset, telecom network service). Shopping Cart contain list of cart items, a reference to customer (partyRole) or contact medium in case customer not exist, and the total items price including promotions\nSkipped properties: id,href",
      "required": [
        "cartItem"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "validFor": {
          "$ref": "#/definitions/TMF663TimePeriod",
          "description": "The period for which the shopping cart is valid (e.g. 90 if no activity or 7 days if cart is empty)"
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663ContactMedium"
          }
        },
        "cartTotalPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663CartPrice"
          },
          "description": "Total amount of the shopping cart, usually of money, that represents the actual price paid by the Customer for cart (considering only \"Active\" cart items)"
        },
        "cartItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663CartItem"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663RelatedPartyRef"
          }
        }
      }
    },
    "TMF663ShoppingCart_Update": {
      "type": "object",
      "description": "Shopping Cart resource is used for the temporarily selection and reservation of product offerings in e-commerce, call center and retail purchase. Shopping cart supports purchase of both physical and digital goods and service (e.g. handset, telecom network service). Shopping Cart contain list of cart items, a reference to customer (partyRole) or contact medium in case customer not exist, and the total items price including promotions\nSkipped properties: id,href,id,href,validFor,cartTotalPrice",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663ContactMedium"
          }
        },
        "cartItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663CartItem"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663RelatedPartyRef"
          }
        }
      }
    },
    "TMF663TimePeriod": {
      "type": "object",
      "description": "A base / value business entity used to represent a period of time between two timepoints.",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, ending at the TimePeriod."
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, starting at the TimePeriod"
        }
      }
    },
    "TMF663ContactMedium": {
      "type": "object",
      "description": "Indicates the contact medium that could be used to contact the party.",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "preferred": {
          "type": "boolean",
          "description": "If true, indicates that is the preferred contact medium"
        },
        "type": {
          "type": "string",
          "description": "Type of the contact medium, such as: email address, telephone number, postal address"
        },
        "validFor": {
          "$ref": "#/definitions/TMF663TimePeriod",
          "description": "The time period that the contact medium is valid for"
        },
        "characteristic": {
          "$ref": "#/definitions/TMF663MediumCharacteristic"
        }
      }
    },
    "TMF663CartPrice": {
      "type": "object",
      "description": "An amount, usually of money, that represents the actual price paid by the customer for this item. May represent the total price of the shopping cart or the total of the cart item depending on the relation",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail the semantics of this order item price."
        },
        "name": {
          "type": "string",
          "description": "A short descriptive name such as \"Subscription price\"."
        },
        "priceType": {
          "type": "string",
          "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth"
        },
        "recurringChargePeriod": {
          "type": "string",
          "description": "Could be month, week..."
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "Could be minutes, GB..."
        },
        "price": {
          "$ref": "#/definitions/TMF663Price"
        },
        "priceAlteration": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663PriceAlteration"
          }
        }
      }
    },
    "TMF663CartItem": {
      "type": "object",
      "description": "An identified part of the shopping cart. A shopping cart  is decomposed into one or more shopping cart item. Cart item represents a product offering or bundled product offering that user wish to purchase, as well as the pricing of the product offering, reference to product in case of configured characteristic or installation address. Cart items can be related to other cart item to related bundled offerings or reference cart Items to a shipping options",
      "required": [
        "id",
        "action"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "action": {
          "type": "string",
          "description": "Can be \"add\" / \"modify\" / \"no_change\"/ \"delete\""
        },
        "id": {
          "type": "string",
          "description": "Identifier of the cart item (generally it is a sequence number 01, 02, 03, ...) in the shopping cart"
        },
        "quantity": {
          "type": "integer",
          "description": "Quantity of cart items"
        },
        "status": {
          "type": "string",
          "description": "status of cart item. e.g \"Active\" , \"SavedForLater\"."
        },
        "cartTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663CartTerm"
          }
        },
        "cartItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663CartItem"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663Note"
          }
        },
        "itemTotalPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663CartPrice"
          }
        },
        "product": {
          "$ref": "#/definitions/TMF663Product"
        },
        "itemPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663CartPrice"
          }
        },
        "productOffering": {
          "$ref": "#/definitions/TMF663ProductOfferingRef"
        },
        "cartItemRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663CartItemRelationship"
          }
        }
      }
    },
    "TMF663RelatedPartyRef": {
      "type": "object",
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
      "required": [
        "id OR href OR name"
      ],
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the related party, could be a party reference or a party role reference"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related party"
        },
        "name": {
          "type": "string",
          "description": "Name of the related party"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party."
        }
      }
    },
    "TMF663MediumCharacteristic": {
      "type": "object",
      "description": "Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city"
        },
        "country": {
          "type": "string",
          "description": "The country"
        },
        "emailAddress": {
          "type": "string",
          "description": "Full email address in standard format"
        },
        "faxNumber": {
          "type": "string",
          "description": "The fax number of the contact"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The primary phone number of the contact"
        },
        "postCode": {
          "type": "string",
          "description": "Postcode"
        },
        "stateOrProvince": {
          "type": "string",
          "description": "State or province"
        },
        "street1": {
          "type": "string",
          "description": "Describes the street"
        },
        "street2": {
          "type": "string",
          "description": "Complementary street description"
        },
        "type": {
          "type": "string",
          "description": "Type of medium (fax, mobile phone...)"
        }
      }
    },
    "TMF663Price": {
      "type": "object",
      "description": "Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price Alteration.",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "dutyFreeAmount": {
          "$ref": "#/definitions/TMF663Money",
          "description": "All taxes excluded amount (expressed in the given currency)"
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "description": "Percentage to apply for ProdOfferPriceAlteration"
        },
        "taxIncludedAmount": {
          "$ref": "#/definitions/TMF663Money",
          "description": "All taxes included amount (expressed in the given currency)"
        },
        "taxRate": {
          "type": "number",
          "format": "float",
          "description": "Tax rate"
        }
      }
    },
    "TMF663PriceAlteration": {
      "type": "object",
      "description": "Is an amount, usually of money, that modifies the price charged for an order item.",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "applicationDuration": {
          "type": "integer",
          "description": "Duration during which the alteration applies on the order item price (for instance 2 months free of charge for the recurring charge)"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail the semantics of this order item price alteration"
        },
        "name": {
          "type": "string",
          "description": "A short descriptive name such as \"Monthly discount\""
        },
        "priceType": {
          "type": "string",
          "description": "A category that describes the price such as recurring, one time and usage."
        },
        "priority": {
          "type": "integer",
          "description": "Priority level for applying this alteration among all the defined alterations on the order item price"
        },
        "recurringChargePeriod": {
          "type": "string",
          "description": "Could be month, week..."
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "Could be minutes, GB..."
        },
        "price": {
          "$ref": "#/definitions/TMF663Price"
        }
      }
    },
    "TMF663Money": {
      "type": "object",
      "description": "A base / value business entity used to represent money",
      "properties": {
        "unit": {
          "type": "string",
          "description": "Currency (ISO4217 norm uses 3 letters to define the currency)"
        },
        "value": {
          "type": "number",
          "format": "float",
          "description": "A positive floating point number"
        }
      }
    },
    "TMF663CartTerm": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "description": {
          "type": "string"
        },
        "duration": {
          "$ref": "#/definitions/TMF663Quantity"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "TMF663Note": {
      "type": "object",
      "description": "Extra information about a given entity",
      "properties": {
        "author": {
          "type": "string",
          "description": "Author of the note"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "Date of the note"
        },
        "text": {
          "type": "string",
          "description": "Text of the note"
        }
      }
    },
    "TMF663Product": {
      "type": "object",
      "description": "Product reference. Configure the product characteristics (only configurable characteristics and necessary only if a non default value is selected) and/or identify the product that needs to be modified/deleted.",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@referredType": {
          "type": "string",
          "description": "Indicates the type of the referred object. This attribute is to be used when the object is representing a reference to an existing object instead of the of the object itself."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "href": {
          "type": "string",
          "description": "Reference of the product"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the product"
        },
        "name": {
          "type": "string",
          "description": "Name of the product"
        },
        "productRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663ProductRelationship"
          }
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663Place"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663ProductCharacteristic"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663RelatedPartyRef"
          }
        },
        "productSpecification": {
          "$ref": "#/definitions/TMF663ProductSpecificationRef"
        }
      }
    },
    "TMF663ProductOfferingRef": {
      "type": "object",
      "description": "ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the product offering"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the product offering"
        },
        "name": {
          "type": "string",
          "description": "Name of the product offering"
        }
      }
    },
    "TMF663CartItemRelationship": {
      "type": "object",
      "description": "Relationship among cart items mainly other than hierarchical relationships such as \"RelyOn\", \"DependentOn\", \"Shipping\" etc.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the referred cart item"
        },
        "type": {
          "type": "string",
          "description": "Type of the cart item relationship"
        },
        "cartItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF663CartItemRef"
          }
        }
      }
    },
    "TMF663Quantity": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "float"
        },
        "units": {
          "type": "string"
        }
      }
    },
    "TMF663ProductRelationship": {
      "type": "object",
      "description": "Linked products to the one instantiate, it can be :\n<ul>\n <li>\"bundled\" if the product is a bundle and you want to describe the \"bundled\" products inside this bundle</li>\n <li> \"reliesOn\" if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product)</li>\n</ul>\n\"targets\" or \"isTargeted\" (depending on the way of expressing the link) for any other kind of links that may be useful",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the product relationship. It can be :\n<ul>\n <li>\"bundled\" if the product is a bundle and you want to describe the \"bundled\" products inside this bundle</li>\n <li> \"reliesOn\" if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product)</li>\n</ul>\n\"targets\" or \"isTargeted\" (depending on the way of expressing the link) for any other kind of links that may be useful"
        },
        "product": {
          "$ref": "#/definitions/TMF663Product"
        }
      }
    },
    "TMF663Place": {
      "type": "object",
      "description": "Place defines a location generically. Could be a geographic address a geographic address, a geographic location.",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@referredType": {
          "type": "string",
          "description": "Indicates the type of the referred object. This attribute is to be used when the object is representing a reference to an existing object instead of the of the object itself."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the place"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the place"
        },
        "name": {
          "type": "string",
          "description": "A user-friendly name for the place, such as \"Paris Store\", \"London Store\", \"Main Home\""
        },
        "role": {
          "type": "string",
          "description": "Role of the place (for instance: 'home delivery', 'shop retrieval')"
        }
      }
    },
    "TMF663ProductCharacteristic": {
      "type": "object",
      "description": "Characteristics of the product to instantiate or to modify",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the characteristic"
        },
        "value": {
          "type": "string",
          "description": "Value of the characteristic"
        }
      }
    },
    "TMF663ProductSpecificationRef": {
      "type": "object",
      "description": "Product specification reference: A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the product specification"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the product specification"
        },
        "name": {
          "type": "string",
          "description": "Name of the product specification"
        },
        "version": {
          "type": "string",
          "description": "Version of the product specification"
        }
      }
    },
    "TMF663CartItemRef": {
      "type": "object",
      "description": "CartIIem reference. A CartItem is an identified part of the shopping cart.",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the cart item"
        }
      }
    },
    "TMF663EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF663EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF663Error": {
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "Application related code."
        },
        "reason": {
          "type": "integer",
          "description": "Text that explains the reason for error."
        },
        "message": {
          "type": "string",
          "description": "(optional) Text that provide more details and corrective actions related to the error."
        },
        "status": {
          "type": "integer",
          "description": "(optional) http error code extension like 400-2"
        },
        "referenceError": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        },
        "@type": {
          "type": "string",
          "description": "(optional) The class type of a REST resource."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "(optional) A link to the schema describing a REST resource."
        }
      }
    },
    "TMF666FinancialAccount": {
      "type": "object",
      "description": "An account of money owed by a party to another entity in exchange for goods or services that have been delivered or used. A financial (account receivable account/account payable) aggregates the amounts of one or more party accounts (billing or settlement) owned by a given party.",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "creditLimit": {
          "$ref": "#/definitions/TMF666Money",
          "description": "The maximum amount of money that may be charged on an account"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the party account"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the account"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the account"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "description": "Date of last modification of the account"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        },
        "state": {
          "type": "string",
          "description": "Contains the lifecycle state such as: Active, Closed, Suspended and so on."
        },
        "type": {
          "type": "string",
          "description": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values."
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666RelatedPartyRef"
          }
        },
        "taxExemption": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountTaxExemption"
          }
        },
        "contact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666Contact"
          }
        },
        "accountBalance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountBalance"
          }
        },
        "accountRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountRelationship"
          }
        }
      }
    },
    "TMF666FinancialAccount_Create": {
      "type": "object",
      "description": "An account of money owed by a party to another entity in exchange for goods or services that have been delivered or used. A financial (account receivable account/account payable) aggregates the amounts of one or more party accounts (billing or settlement) owned by a given party.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "creditLimit": {
          "$ref": "#/definitions/TMF666Money",
          "description": "The maximum amount of money that may be charged on an account"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the party account"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "description": "Date of last modification of the account"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        },
        "state": {
          "type": "string",
          "description": "Contains the lifecycle state such as: Active, Closed, Suspended and so on."
        },
        "type": {
          "type": "string",
          "description": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values."
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666RelatedPartyRef"
          }
        },
        "taxExemption": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountTaxExemption"
          }
        },
        "contact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666Contact"
          }
        },
        "accountBalance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountBalance"
          }
        },
        "accountRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountRelationship"
          }
        }
      }
    },
    "TMF666FinancialAccount_Update": {
      "type": "object",
      "description": "An account of money owed by a party to another entity in exchange for goods or services that have been delivered or used. A financial (account receivable account/account payable) aggregates the amounts of one or more party accounts (billing or settlement) owned by a given party.\nSkipped properties: id,href,id,href,lastModified",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "creditLimit": {
          "$ref": "#/definitions/TMF666Money",
          "description": "The maximum amount of money that may be charged on an account"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the party account"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        },
        "state": {
          "type": "string",
          "description": "Contains the lifecycle state such as: Active, Closed, Suspended and so on."
        },
        "type": {
          "type": "string",
          "description": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values."
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666RelatedPartyRef"
          }
        },
        "taxExemption": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountTaxExemption"
          }
        },
        "contact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666Contact"
          }
        },
        "accountBalance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountBalance"
          }
        },
        "accountRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountRelationship"
          }
        }
      }
    },
    "TMF666BillingCycleSpecification": {
      "type": "object",
      "description": "A detailed description of when to initiate a billing cycle and the various sub steps of a billing cycle.",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "billingDateShift": {
          "type": "integer",
          "description": "An offset of a billing/settlement date. The offset is expressed as number of days with regard to the start of the billing/settlement period."
        },
        "billingPeriod": {
          "type": "string",
          "description": "A billing time period. It can be recurring, for example: week, month, quarter of year, year ."
        },
        "chargeDateOffset": {
          "type": "integer",
          "description": "An offset of a date through which charges previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod."
        },
        "creditDateOffset": {
          "type": "integer",
          "description": "An offset of a date through which credits previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod."
        },
        "description": {
          "type": "string",
          "description": "An explanation regarding this billing cycle specification"
        },
        "frequency": {
          "type": "string",
          "description": "Frequency of the billing cycle (monthly for instance)"
        },
        "href": {
          "type": "string",
          "description": "Reference of the billing cycle specification"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the billing cycle specification"
        },
        "mailingDateOffset": {
          "type": "integer",
          "description": "An offset of a customer bill mailing date. The offset is expressed as number of days with regard to the start of the BillingPeriod."
        },
        "name": {
          "type": "string",
          "description": "A short descriptive name"
        },
        "paymentDueDateOffset": {
          "type": "integer",
          "description": "An offset of a payment due date. The offset is expressed as number of days with regard to the start of the BillingPeriod."
        },
        "validFor": {
          "$ref": "#/definitions/TMF666TimePeriod",
          "description": "The period for which the billing specification cycle is valid"
        }
      }
    },
    "TMF666BillingCycleSpecification_Create": {
      "type": "object",
      "description": "A detailed description of when to initiate a billing cycle and the various sub steps of a billing cycle.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "billingDateShift": {
          "type": "integer",
          "description": "An offset of a billing/settlement date. The offset is expressed as number of days with regard to the start of the billing/settlement period."
        },
        "billingPeriod": {
          "type": "string",
          "description": "A billing time period. It can be recurring, for example: week, month, quarter of year, year ."
        },
        "chargeDateOffset": {
          "type": "integer",
          "description": "An offset of a date through which charges previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod."
        },
        "creditDateOffset": {
          "type": "integer",
          "description": "An offset of a date through which credits previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod."
        },
        "description": {
          "type": "string",
          "description": "An explanation regarding this billing cycle specification"
        },
        "frequency": {
          "type": "string",
          "description": "Frequency of the billing cycle (monthly for instance)"
        },
        "mailingDateOffset": {
          "type": "integer",
          "description": "An offset of a customer bill mailing date. The offset is expressed as number of days with regard to the start of the BillingPeriod."
        },
        "name": {
          "type": "string",
          "description": "A short descriptive name"
        },
        "paymentDueDateOffset": {
          "type": "integer",
          "description": "An offset of a payment due date. The offset is expressed as number of days with regard to the start of the BillingPeriod."
        },
        "validFor": {
          "$ref": "#/definitions/TMF666TimePeriod",
          "description": "The period for which the billing specification cycle is valid"
        }
      }
    },
    "TMF666BillingCycleSpecification_Update": {
      "type": "object",
      "description": "A detailed description of when to initiate a billing cycle and the various sub steps of a billing cycle.\nSkipped properties: id,href,id,href",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "billingDateShift": {
          "type": "integer",
          "description": "An offset of a billing/settlement date. The offset is expressed as number of days with regard to the start of the billing/settlement period."
        },
        "billingPeriod": {
          "type": "string",
          "description": "A billing time period. It can be recurring, for example: week, month, quarter of year, year ."
        },
        "chargeDateOffset": {
          "type": "integer",
          "description": "An offset of a date through which charges previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod."
        },
        "creditDateOffset": {
          "type": "integer",
          "description": "An offset of a date through which credits previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod."
        },
        "description": {
          "type": "string",
          "description": "An explanation regarding this billing cycle specification"
        },
        "frequency": {
          "type": "string",
          "description": "Frequency of the billing cycle (monthly for instance)"
        },
        "mailingDateOffset": {
          "type": "integer",
          "description": "An offset of a customer bill mailing date. The offset is expressed as number of days with regard to the start of the BillingPeriod."
        },
        "name": {
          "type": "string",
          "description": "A short descriptive name"
        },
        "paymentDueDateOffset": {
          "type": "integer",
          "description": "An offset of a payment due date. The offset is expressed as number of days with regard to the start of the BillingPeriod."
        },
        "validFor": {
          "$ref": "#/definitions/TMF666TimePeriod",
          "description": "The period for which the billing specification cycle is valid"
        }
      }
    },
    "TMF666BillFormat": {
      "type": "object",
      "description": "A detailed description of the way in which a bill is presented.",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "description": {
          "type": "string",
          "description": "An explanatory text for this bill format"
        },
        "href": {
          "type": "string",
          "description": "Reference of the bill format"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the bill format"
        },
        "name": {
          "type": "string",
          "description": "A short descriptive name"
        }
      }
    },
    "TMF666BillFormat_Create": {
      "type": "object",
      "description": "A detailed description of the way in which a bill is presented.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "description": {
          "type": "string",
          "description": "An explanatory text for this bill format"
        },
        "name": {
          "type": "string",
          "description": "A short descriptive name"
        }
      }
    },
    "TMF666BillFormat_Update": {
      "type": "object",
      "description": "A detailed description of the way in which a bill is presented.\nSkipped properties: id,href,id,href",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "description": {
          "type": "string",
          "description": "An explanatory text for this bill format"
        },
        "name": {
          "type": "string",
          "description": "A short descriptive name"
        }
      }
    },
    "TMF666BillPresentationMedia": {
      "type": "object",
      "description": "A mean of communicating a bill, supported by the associated bill format. For example, post mail, email, web page.",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "description": {
          "type": "string",
          "description": "An explanatory text describing this bill presentation media"
        },
        "href": {
          "type": "string",
          "description": "Reference of the bill presentation media"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the bill presentation media"
        },
        "name": {
          "type": "string",
          "description": "A short descriptive name"
        }
      }
    },
    "TMF666BillPresentationMedia_Create": {
      "type": "object",
      "description": "A mean of communicating a bill, supported by the associated bill format. For example, post mail, email, web page.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "description": {
          "type": "string",
          "description": "An explanatory text describing this bill presentation media"
        },
        "name": {
          "type": "string",
          "description": "A short descriptive name"
        }
      }
    },
    "TMF666BillPresentationMedia_Update": {
      "type": "object",
      "description": "A mean of communicating a bill, supported by the associated bill format. For example, post mail, email, web page.\nSkipped properties: id,href,id,href",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "description": {
          "type": "string",
          "description": "An explanatory text describing this bill presentation media"
        },
        "name": {
          "type": "string",
          "description": "A short descriptive name"
        }
      }
    },
    "TMF666PartyAccount": {
      "type": "object",
      "description": "Account used for billing or for settlement purposes concerning a given party (an organization or an individual).",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "creditLimit": {
          "$ref": "#/definitions/TMF666Money",
          "description": "The maximum amount of money that may be charged on an account"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the party account"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the account"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the account"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "description": "Date of last modification of the account"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        },
        "state": {
          "type": "string",
          "description": "Contains the lifecycle state such as: Active, Closed, Suspended and so on."
        },
        "type": {
          "type": "string",
          "description": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values."
        },
        "paymentStatus": {
          "type": "string",
          "description": "The condition of the account, such as due, paid, in arrears."
        },
        "billStructure": {
          "$ref": "#/definitions/TMF666BillStructure"
        },
        "paymentPlan": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666PaymentPlan"
          }
        },
        "financialAccount": {
          "$ref": "#/definitions/TMF666FinancialAccountRef"
        },
        "defaultPaymentMethod": {
          "$ref": "#/definitions/TMF666PaymentMethodRef"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666RelatedPartyRef"
          }
        },
        "taxExemption": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountTaxExemption"
          }
        },
        "contact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666Contact"
          }
        },
        "accountBalance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountBalance"
          }
        },
        "accountRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountRelationship"
          }
        }
      }
    },
    "TMF666PartyAccount_Create": {
      "type": "object",
      "description": "Account used for billing or for settlement purposes concerning a given party (an organization or an individual).\nSkipped properties: id,href",
      "required": [
        "name",
        "relatedParty"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "creditLimit": {
          "$ref": "#/definitions/TMF666Money",
          "description": "The maximum amount of money that may be charged on an account"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the party account"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "description": "Date of last modification of the account"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        },
        "state": {
          "type": "string",
          "description": "Contains the lifecycle state such as: Active, Closed, Suspended and so on."
        },
        "type": {
          "type": "string",
          "description": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values."
        },
        "paymentStatus": {
          "type": "string",
          "description": "The condition of the account, such as due, paid, in arrears."
        },
        "billStructure": {
          "$ref": "#/definitions/TMF666BillStructure"
        },
        "paymentPlan": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666PaymentPlan"
          }
        },
        "financialAccount": {
          "$ref": "#/definitions/TMF666FinancialAccountRef"
        },
        "defaultPaymentMethod": {
          "$ref": "#/definitions/TMF666PaymentMethodRef"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666RelatedPartyRef"
          }
        },
        "taxExemption": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountTaxExemption"
          }
        },
        "contact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666Contact"
          }
        },
        "accountBalance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountBalance"
          }
        },
        "accountRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountRelationship"
          }
        }
      }
    },
    "TMF666PartyAccount_Update": {
      "type": "object",
      "description": "Account used for billing or for settlement purposes concerning a given party (an organization or an individual).\nSkipped properties: id,href,id,href,accountBalance",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "creditLimit": {
          "$ref": "#/definitions/TMF666Money",
          "description": "The maximum amount of money that may be charged on an account"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the party account"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "description": "Date of last modification of the account"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        },
        "state": {
          "type": "string",
          "description": "Contains the lifecycle state such as: Active, Closed, Suspended and so on."
        },
        "type": {
          "type": "string",
          "description": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values."
        },
        "paymentStatus": {
          "type": "string",
          "description": "The condition of the account, such as due, paid, in arrears."
        },
        "billStructure": {
          "$ref": "#/definitions/TMF666BillStructure"
        },
        "paymentPlan": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666PaymentPlan"
          }
        },
        "financialAccount": {
          "$ref": "#/definitions/TMF666FinancialAccountRef"
        },
        "defaultPaymentMethod": {
          "$ref": "#/definitions/TMF666PaymentMethodRef"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666RelatedPartyRef"
          }
        },
        "taxExemption": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountTaxExemption"
          }
        },
        "contact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666Contact"
          }
        },
        "accountRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountRelationship"
          }
        }
      }
    },
    "TMF666BillingAccount": {
      "type": "object",
      "description": "A party account used for billing purposes. It includes a description of the bill structure (frequency, presentation media, format and so on).",
      "required": [
        "name",
        "relatedParty"
      ],
      "properties": {
        "paymentStatus": {
          "type": "string",
          "description": "The condition of the account, such as due, paid, in arrears."
        },
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "creditLimit": {
          "$ref": "#/definitions/TMF666Money",
          "description": "The maximum amount of money that may be charged on an account"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the party account"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the account"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the account"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "description": "Date of last modification of the account"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        },
        "state": {
          "type": "string",
          "description": "Contains the lifecycle state such as: Active, Closed, Suspended and so on."
        },
        "type": {
          "type": "string",
          "description": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values."
        },
        "billStructure": {
          "$ref": "#/definitions/TMF666BillStructure"
        },
        "paymentPlan": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666PaymentPlan"
          }
        },
        "financialAccount": {
          "$ref": "#/definitions/TMF666FinancialAccountRef"
        },
        "defaultPaymentMethod": {
          "$ref": "#/definitions/TMF666PaymentMethodRef"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666RelatedPartyRef"
          }
        },
        "taxExemption": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountTaxExemption"
          }
        },
        "contact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666Contact"
          }
        },
        "accountBalance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountBalance"
          }
        },
        "accountRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountRelationship"
          }
        }
      }
    },
    "TMF666BillingAccount_Create": {
      "type": "object",
      "description": "A party account used for billing purposes. It includes a description of the bill structure (frequency, presentation media, format and so on).\nSkipped properties: id,href",
      "required": [
        "name",
        "relatedParty"
      ],
      "properties": {
        "paymentStatus": {
          "type": "string",
          "description": "The condition of the account, such as due, paid, in arrears."
        },
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "creditLimit": {
          "$ref": "#/definitions/TMF666Money",
          "description": "The maximum amount of money that may be charged on an account"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the party account"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "description": "Date of last modification of the account"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        },
        "state": {
          "type": "string",
          "description": "Contains the lifecycle state such as: Active, Closed, Suspended and so on."
        },
        "type": {
          "type": "string",
          "description": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values."
        },
        "billStructure": {
          "$ref": "#/definitions/TMF666BillStructure"
        },
        "paymentPlan": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666PaymentPlan"
          }
        },
        "financialAccount": {
          "$ref": "#/definitions/TMF666FinancialAccountRef"
        },
        "defaultPaymentMethod": {
          "$ref": "#/definitions/TMF666PaymentMethodRef"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666RelatedPartyRef"
          }
        },
        "taxExemption": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountTaxExemption"
          }
        },
        "contact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666Contact"
          }
        },
        "accountBalance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountBalance"
          }
        },
        "accountRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountRelationship"
          }
        }
      }
    },
    "TMF666BillingAccount_Update": {
      "type": "object",
      "description": "A party account used for billing purposes. It includes a description of the bill structure (frequency, presentation media, format and so on).\nSkipped properties: id,href,id,href,accountBalance",
      "properties": {
        "paymentStatus": {
          "type": "string",
          "description": "The condition of the account, such as due, paid, in arrears."
        },
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "creditLimit": {
          "$ref": "#/definitions/TMF666Money",
          "description": "The maximum amount of money that may be charged on an account"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the party account"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "description": "Date of last modification of the account"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        },
        "state": {
          "type": "string",
          "description": "Contains the lifecycle state such as: Active, Closed, Suspended and so on."
        },
        "type": {
          "type": "string",
          "description": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values."
        },
        "billStructure": {
          "$ref": "#/definitions/TMF666BillStructure"
        },
        "paymentPlan": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666PaymentPlan"
          }
        },
        "financialAccount": {
          "$ref": "#/definitions/TMF666FinancialAccountRef"
        },
        "defaultPaymentMethod": {
          "$ref": "#/definitions/TMF666PaymentMethodRef"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666RelatedPartyRef"
          }
        },
        "taxExemption": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountTaxExemption"
          }
        },
        "contact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666Contact"
          }
        },
        "accountRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountRelationship"
          }
        }
      }
    },
    "TMF666SettlementAccount": {
      "type": "object",
      "description": "A party account used for settlement purposes. It includes a description of the structure used for the settlement (frequency, presentation media, format and so on).",
      "required": [
        "name",
        "relatedParty"
      ],
      "properties": {
        "paymentStatus": {
          "type": "string",
          "description": "The condition of the account, such as due, paid, in arrears."
        },
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "creditLimit": {
          "$ref": "#/definitions/TMF666Money",
          "description": "The maximum amount of money that may be charged on an account"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the party account"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the account"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the account"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "description": "Date of last modification of the account"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        },
        "state": {
          "type": "string",
          "description": "Contains the lifecycle state such as: Active, Closed, Suspended and so on."
        },
        "type": {
          "type": "string",
          "description": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values."
        },
        "billStructure": {
          "$ref": "#/definitions/TMF666BillStructure"
        },
        "paymentPlan": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666PaymentPlan"
          }
        },
        "financialAccount": {
          "$ref": "#/definitions/TMF666FinancialAccountRef"
        },
        "defaultPaymentMethod": {
          "$ref": "#/definitions/TMF666PaymentMethodRef"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666RelatedPartyRef"
          }
        },
        "taxExemption": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountTaxExemption"
          }
        },
        "contact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666Contact"
          }
        },
        "accountBalance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountBalance"
          }
        },
        "accountRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountRelationship"
          }
        }
      }
    },
    "TMF666SettlementAccount_Create": {
      "type": "object",
      "description": "A party account used for settlement purposes. It includes a description of the structure used for the settlement (frequency, presentation media, format and so on).\nSkipped properties: id,href",
      "required": [
        "name",
        "relatedParty"
      ],
      "properties": {
        "paymentStatus": {
          "type": "string",
          "description": "The condition of the account, such as due, paid, in arrears."
        },
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "creditLimit": {
          "$ref": "#/definitions/TMF666Money",
          "description": "The maximum amount of money that may be charged on an account"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the party account"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "description": "Date of last modification of the account"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        },
        "state": {
          "type": "string",
          "description": "Contains the lifecycle state such as: Active, Closed, Suspended and so on."
        },
        "type": {
          "type": "string",
          "description": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values."
        },
        "billStructure": {
          "$ref": "#/definitions/TMF666BillStructure"
        },
        "paymentPlan": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666PaymentPlan"
          }
        },
        "financialAccount": {
          "$ref": "#/definitions/TMF666FinancialAccountRef"
        },
        "defaultPaymentMethod": {
          "$ref": "#/definitions/TMF666PaymentMethodRef"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666RelatedPartyRef"
          }
        },
        "taxExemption": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountTaxExemption"
          }
        },
        "contact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666Contact"
          }
        },
        "accountBalance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountBalance"
          }
        },
        "accountRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountRelationship"
          }
        }
      }
    },
    "TMF666SettlementAccount_Update": {
      "type": "object",
      "description": "A party account used for settlement purposes. It includes a description of the structure used for the settlement (frequency, presentation media, format and so on).\nSkipped properties: id,href,id,href,accountBalance",
      "properties": {
        "paymentStatus": {
          "type": "string",
          "description": "The condition of the account, such as due, paid, in arrears."
        },
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "creditLimit": {
          "$ref": "#/definitions/TMF666Money",
          "description": "The maximum amount of money that may be charged on an account"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the party account"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "description": "Date of last modification of the account"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        },
        "state": {
          "type": "string",
          "description": "Contains the lifecycle state such as: Active, Closed, Suspended and so on."
        },
        "type": {
          "type": "string",
          "description": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values."
        },
        "billStructure": {
          "$ref": "#/definitions/TMF666BillStructure"
        },
        "paymentPlan": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666PaymentPlan"
          }
        },
        "financialAccount": {
          "$ref": "#/definitions/TMF666FinancialAccountRef"
        },
        "defaultPaymentMethod": {
          "$ref": "#/definitions/TMF666PaymentMethodRef"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666RelatedPartyRef"
          }
        },
        "taxExemption": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountTaxExemption"
          }
        },
        "contact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666Contact"
          }
        },
        "accountRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666AccountRelationship"
          }
        }
      }
    },
    "TMF666Money": {
      "type": "object",
      "description": "A base / value business entity used to represent money",
      "properties": {
        "unit": {
          "type": "string",
          "description": "Currency (ISO4217 norm uses 3 letters to define the currency)"
        },
        "value": {
          "type": "number",
          "format": "float",
          "description": "A positive floating point number"
        }
      }
    },
    "TMF666RelatedPartyRef": {
      "type": "object",
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the related party, could be a party reference or a party role reference"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related party"
        },
        "name": {
          "type": "string",
          "description": "Name of the related party"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party."
        }
      }
    },
    "TMF666AccountTaxExemption": {
      "type": "object",
      "description": "Proof of freedom from taxes imposed by a taxing jurisdiction",
      "required": [
        "issuingJurisdiction",
        "validFor"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "certificateNumber": {
          "type": "string",
          "description": "Identifier of a document that shows proof of exemption from taxes for the taxing jurisdiction"
        },
        "issuingJurisdiction": {
          "type": "string",
          "description": "Name of the taxing jurisdiction for which taxes are exempt"
        },
        "reason": {
          "type": "string",
          "description": "Reason of the tax exemption"
        },
        "validFor": {
          "$ref": "#/definitions/TMF666TimePeriod",
          "description": "Period for which the exemption is valid"
        }
      }
    },
    "TMF666Contact": {
      "type": "object",
      "description": "An individual or an organization used as a contact point for a given account and accessed via some contact medium.",
      "required": [
        "contactType",
        "validFor"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "contactName": {
          "type": "string",
          "description": "A displayable name for that contact"
        },
        "contactType": {
          "type": "string",
          "description": "Type of contact (primary, secondary...)"
        },
        "partyRoleType": {
          "type": "string",
          "description": "Identifies what kind of party role type is linked to the contact (a account manager...)"
        },
        "validFor": {
          "$ref": "#/definitions/TMF666TimePeriod",
          "description": "Validity period of that contact"
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666ContactMedium"
          }
        },
        "relatedParty": {
          "$ref": "#/definitions/TMF666RelatedPartyRef"
        }
      }
    },
    "TMF666AccountBalance": {
      "type": "object",
      "description": "Balances linked to the account",
      "required": [
        "type",
        "amount",
        "validFor"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "amount": {
          "$ref": "#/definitions/TMF666Money",
          "description": "Balance amount"
        },
        "type": {
          "type": "string",
          "description": "Type of the balance : deposit balance, disputed balance, loyalty balance, receivable balance..."
        },
        "validFor": {
          "$ref": "#/definitions/TMF666TimePeriod",
          "description": "Balance validity period"
        }
      }
    },
    "TMF666AccountRelationship": {
      "type": "object",
      "description": "Significant connection between accounts. For instance an aggregating account for a list of shop branches each having its own billing account.",
      "required": [
        "relationshipType",
        "validFor"
      ],
      "properties": {
        "relationshipType": {
          "type": "string",
          "description": "Type of relationship"
        },
        "validFor": {
          "$ref": "#/definitions/TMF666TimePeriod",
          "description": "Validity period of that relationship"
        },
        "account": {
          "$ref": "#/definitions/TMF666AccountRef"
        }
      }
    },
    "TMF666TimePeriod": {
      "type": "object",
      "description": "A base / value business entity used to represent a period of time between two timepoints.",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, ending at the TimePeriod."
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, starting at the TimePeriod"
        }
      }
    },
    "TMF666ContactMedium": {
      "type": "object",
      "description": "Indicates the contact medium that could be used to contact the party.",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "preferred": {
          "type": "boolean",
          "description": "If true, indicates that is the preferred contact medium"
        },
        "type": {
          "type": "string",
          "description": "Type of the contact medium, such as: email address, telephone number, postal address"
        },
        "validFor": {
          "$ref": "#/definitions/TMF666TimePeriod",
          "description": "The time period that the contact medium is valid for"
        },
        "characteristic": {
          "$ref": "#/definitions/TMF666MediumCharacteristic"
        }
      }
    },
    "TMF666MediumCharacteristic": {
      "type": "object",
      "description": "Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city"
        },
        "country": {
          "type": "string",
          "description": "The country"
        },
        "emailAddress": {
          "type": "string",
          "description": "Full email address in standard format"
        },
        "faxNumber": {
          "type": "string",
          "description": "The fax number of the contact"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The primary phone number of the contact"
        },
        "postCode": {
          "type": "string",
          "description": "Postcode"
        },
        "stateOrProvince": {
          "type": "string",
          "description": "State or province"
        },
        "street1": {
          "type": "string",
          "description": "Describes the street"
        },
        "street2": {
          "type": "string",
          "description": "Complementary street description"
        },
        "type": {
          "type": "string",
          "description": "Type of medium (fax, mobile phone...)"
        }
      }
    },
    "TMF666AccountRef": {
      "type": "object",
      "description": "Account reference. A account may be a party account or a financial account.",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the account"
        },
        "href": {
          "type": "string",
          "description": "Reference of the account"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the account"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        }
      }
    },
    "TMF666BillStructure": {
      "type": "object",
      "description": "The structure of the bill for party accounts (billling or settlement).",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "presentationMedia": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF666BillPresentationMediaRef"
          }
        },
        "format": {
          "$ref": "#/definitions/TMF666BillFormatRef"
        },
        "cycleSpecification": {
          "$ref": "#/definitions/TMF666BillingCycleSpecificationRef"
        }
      }
    },
    "TMF666PaymentPlan": {
      "type": "object",
      "description": "Defines a plan for payment (when a party wants to spread his payments)",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "numberOfPayments": {
          "type": "integer",
          "description": "Number of payments used to spread the global payment"
        },
        "paymentFrequency": {
          "type": "string",
          "description": "Frequency of the payments, such as monthly and bimonthly"
        },
        "priority": {
          "type": "integer",
          "description": "Priority of the payment plan"
        },
        "status": {
          "type": "string",
          "description": "Status of the payment plan (effective, ineffective)"
        },
        "totalAmount": {
          "$ref": "#/definitions/TMF666Money",
          "description": "Amount paid"
        },
        "type": {
          "type": "string",
          "description": "Type of payment plan"
        },
        "validFor": {
          "$ref": "#/definitions/TMF666TimePeriod",
          "description": "Validity period of the payment plan"
        },
        "paymentMethod": {
          "$ref": "#/definitions/TMF666PaymentMethodRef"
        }
      }
    },
    "TMF666FinancialAccountRef": {
      "type": "object",
      "description": "AccountReceivable reference. An account of money owed by a party to another entity in exchange for goods or services that have been delivered or used. An account receivable aggregates the amounts of one or more party accounts (billing or settlement) owned by a given party.",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the account"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the account"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        },
        "accountBalance": {
          "$ref": "#/definitions/TMF666AccountBalance"
        }
      }
    },
    "TMF666PaymentMethodRef": {
      "type": "object",
      "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the payment mean"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the payment mean"
        },
        "name": {
          "type": "string",
          "description": "Name of the payment mean"
        }
      }
    },
    "TMF666BillPresentationMediaRef": {
      "type": "object",
      "description": "PresentationMedia reference. A mean of communicating a bill, supported by the associated bill format. For example, post mail, email, web page.",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the bill presentation media"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the bill presentation media"
        },
        "name": {
          "type": "string",
          "description": "A short descriptive name"
        }
      }
    },
    "TMF666BillFormatRef": {
      "type": "object",
      "description": "BillFormat reference. A bill format is a description of the way in which a bill is presented.",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the bill format"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the bill format"
        },
        "name": {
          "type": "string",
          "description": "A short descriptive name"
        }
      }
    },
    "TMF666BillingCycleSpecificationRef": {
      "type": "object",
      "description": "BillingCycleSpecification reference. A description of when to initiate a billing cycle and the various sub steps of a billing cycle.",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "dateShift": {
          "type": "integer",
          "description": "An offset of a billing/settlement date. The offset is expressed as number of days with regard to the start of the billing/settlement period."
        },
        "frequency": {
          "type": "string",
          "description": "Frequency of the billing cycle (monthly for instance)"
        },
        "href": {
          "type": "string",
          "description": "Reference of the billing cycle specification"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the billing cycle specification"
        },
        "name": {
          "type": "string",
          "description": "A short descriptive name"
        }
      }
    },
    "TMF666EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF666EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF666Error": {
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "Application related code."
        },
        "reason": {
          "type": "integer",
          "description": "Text that explains the reason for error."
        },
        "message": {
          "type": "string",
          "description": "(optional) Text that provide more details and corrective actions related to the error."
        },
        "status": {
          "type": "integer",
          "description": "(optional) http error code extension like 400-2"
        },
        "referenceError": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        },
        "@type": {
          "type": "string",
          "description": "(optional) The class type of a REST resource."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "(optional) A link to the schema describing a REST resource."
        }
      }
    },
    "TMF668PartnershipType": {
      "type": "object",
      "description": "A partnership type contains all the information for the setup of a partnership of a given kind. This includes the list of identified role types for the partnership with the corresponding agreement specifications.",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "description": {
          "type": "string",
          "description": "An explanatory text regarding this partnership type"
        },
        "href": {
          "type": "string",
          "description": "The reference url for this partnership type"
        },
        "id": {
          "type": "string",
          "description": "The identifier of the partnership type"
        },
        "name": {
          "type": "string",
          "description": "An identifying name for the partnership type."
        },
        "roleType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF668RoleType"
          }
        }
      }
    },
    "TMF668PartnershipType_Create": {
      "type": "object",
      "description": "A partnership type contains all the information for the setup of a partnership of a given kind. This includes the list of identified role types for the partnership with the corresponding agreement specifications.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "description": {
          "type": "string",
          "description": "An explanatory text regarding this partnership type"
        },
        "name": {
          "type": "string",
          "description": "An identifying name for the partnership type."
        },
        "roleType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF668RoleType"
          }
        }
      }
    },
    "TMF668PartnershipType_Update": {
      "type": "object",
      "description": "A partnership type contains all the information for the setup of a partnership of a given kind. This includes the list of identified role types for the partnership with the corresponding agreement specifications.\nSkipped properties: id,href",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "description": {
          "type": "string",
          "description": "An explanatory text regarding this partnership type"
        },
        "name": {
          "type": "string",
          "description": "An identifying name for the partnership type."
        },
        "roleType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF668RoleType"
          }
        }
      }
    },
    "TMF668RoleType": {
      "type": "object",
      "description": "A RoleType represents the type of a PartyRole, defined in the context of a given type of partnership, such as Buyer, Seller.",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "description": {
          "type": "string",
          "description": "An explanatory text documenting the role type"
        },
        "name": {
          "type": "string",
          "description": "The name of the role type."
        },
        "requiresBilling": {
          "type": "boolean",
          "description": "Indicates whether billing operations will be associated to parties playing the role"
        },
        "requiresSettlement": {
          "type": "boolean",
          "description": "Indicates whether settlement operations will be associated to parties playing the role"
        },
        "agreementSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF668AgreementSpecificationRef"
          }
        }
      }
    },
    "TMF668AgreementSpecificationRef": {
      "type": "object",
      "description": "AgreementSpecification reference. An AgreementSpecification represents a template of an agreement that can be used when establishing partnerships.",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the agreement specification is about."
        },
        "href": {
          "type": "string",
          "description": "Reference URL of the agreement specification"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the agreement specification"
        },
        "name": {
          "type": "string",
          "description": "Name of the agreement specification"
        }
      }
    },
    "TMF668EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF668EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF668Error": {
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "Application related code."
        },
        "reason": {
          "type": "integer",
          "description": "Text that explains the reason for error."
        },
        "message": {
          "type": "string",
          "description": "(optional) Text that provide more details and corrective actions related to the error."
        },
        "status": {
          "type": "integer",
          "description": "(optional) http error code extension like 400-2"
        },
        "referenceError": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        },
        "@type": {
          "type": "string",
          "description": "(optional) The class type of a REST resource."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "(optional) A link to the schema describing a REST resource."
        }
      }
    },
    "TMF669PartyRole": {
      "type": "object",
      "description": "The part played by a party in a given context.",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "href": {
          "type": "string",
          "description": "Url used to reference the party role."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for PartyRoles"
        },
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles."
        },
        "status": {
          "type": "string",
          "description": "Used to track the lifecycle status of the party role."
        },
        "statusReason": {
          "type": "string",
          "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
        },
        "validFor": {
          "$ref": "#/definitions/TMF669TimePeriod",
          "description": "The time period that the PartyRole is valid for."
        },
        "engagedParty": {
          "$ref": "#/definitions/TMF669PartyRef"
        },
        "type": {
          "$ref": "#/definitions/TMF669RoleTypeRef",
          "description": "The role type - useful only in the context of a partnership defining more than one role type."
        },
        "account": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669AccountRef"
          }
        },
        "paymentMethod": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669PaymentMethodRef"
          }
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669ContactMedium"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669Characteristic"
          },
          "description": "Describes the characteristic of a party role."
        },
        "creditProfile": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669CreditProfile"
          }
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669AgreementRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669RelatedPartyRef"
          }
        }
      }
    },
    "TMF669PartyRole_Create": {
      "type": "object",
      "description": "The part played by a party in a given context.\nSkipped properties: id,href",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles."
        },
        "status": {
          "type": "string",
          "description": "Used to track the lifecycle status of the party role."
        },
        "statusReason": {
          "type": "string",
          "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
        },
        "validFor": {
          "$ref": "#/definitions/TMF669TimePeriod",
          "description": "The time period that the PartyRole is valid for."
        },
        "engagedParty": {
          "$ref": "#/definitions/TMF669PartyRef"
        },
        "type": {
          "$ref": "#/definitions/TMF669RoleTypeRef",
          "description": "The role type - useful only in the context of a partnership defining more than one role type."
        },
        "account": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669AccountRef"
          }
        },
        "paymentMethod": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669PaymentMethodRef"
          }
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669ContactMedium"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669Characteristic"
          },
          "description": "Describes the characteristic of a party role."
        },
        "creditProfile": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669CreditProfile"
          }
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669AgreementRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669RelatedPartyRef"
          }
        }
      }
    },
    "TMF669PartyRole_Update": {
      "type": "object",
      "description": "The part played by a party in a given context.\nSkipped properties: id,href,id,href",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles."
        },
        "status": {
          "type": "string",
          "description": "Used to track the lifecycle status of the party role."
        },
        "statusReason": {
          "type": "string",
          "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
        },
        "validFor": {
          "$ref": "#/definitions/TMF669TimePeriod",
          "description": "The time period that the PartyRole is valid for."
        },
        "engagedParty": {
          "$ref": "#/definitions/TMF669PartyRef"
        },
        "type": {
          "$ref": "#/definitions/TMF669RoleTypeRef",
          "description": "The role type - useful only in the context of a partnership defining more than one role type."
        },
        "account": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669AccountRef"
          }
        },
        "paymentMethod": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669PaymentMethodRef"
          }
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669ContactMedium"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669Characteristic"
          },
          "description": "Describes the characteristic of a party role."
        },
        "creditProfile": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669CreditProfile"
          }
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669AgreementRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF669RelatedPartyRef"
          }
        }
      }
    },
    "TMF669TimePeriod": {
      "type": "object",
      "description": "A base / value business entity used to represent a period of time between two timepoints.",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, ending at the TimePeriod."
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, starting at the TimePeriod"
        }
      }
    },
    "TMF669PartyRef": {
      "type": "object",
      "description": "Party reference. A party represents an organization or an individual.",
      "required": [
        "id",
        "href"
      ],
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "description": {
          "type": "string",
          "description": "Text describing the referred party"
        },
        "href": {
          "type": "string",
          "description": "Reference of the referred party (such as a partner or any other party role)."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the referred party"
        },
        "name": {
          "type": "string",
          "description": "Name of the referred party (such as a partner or any other party role)"
        }
      }
    },
    "TMF669RoleTypeRef": {
      "type": "object",
      "description": "RoleType reference.",
      "required": [
        "name"
      ],
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the role type. It uniquely identifies the role type within the partnership type."
        },
        "partnershipHref": {
          "type": "string",
          "description": "Reference url of the partnership type containing the role type"
        },
        "partnershipId": {
          "type": "string",
          "description": "The identifier of the partnership type containing the role type"
        },
        "partnershipName": {
          "type": "string",
          "description": "The name of the partnership type defining this role type"
        }
      }
    },
    "TMF669AccountRef": {
      "type": "object",
      "description": "Account reference. A account may be a party account or a financial account.",
      "required": [
        "id",
        "href",
        "name"
      ],
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the account"
        },
        "href": {
          "type": "string",
          "description": "Reference of the account"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the account"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        }
      }
    },
    "TMF669PaymentMethodRef": {
      "type": "object",
      "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
      "required": [
        "id",
        "href"
      ],
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the payment mean"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the payment mean"
        },
        "name": {
          "type": "string",
          "description": "Name of the payment mean"
        }
      }
    },
    "TMF669ContactMedium": {
      "type": "object",
      "description": "Indicates the contact medium that could be used to contact the party.",
      "required": [
        "type",
        "characteristic"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "preferred": {
          "type": "boolean",
          "description": "If true, indicates that is the preferred contact medium"
        },
        "type": {
          "type": "string",
          "description": "Type of the contact medium, such as: email address, telephone number, postal address"
        },
        "validFor": {
          "$ref": "#/definitions/TMF669TimePeriod",
          "description": "The time period that the contact medium is valid for"
        },
        "characteristic": {
          "$ref": "#/definitions/TMF669MediumCharacteristic"
        }
      }
    },
    "TMF669Characteristic": {
      "type": "object",
      "description": "Describes a given characteristic of an object or entity through a name/value pair.",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the characteristic"
        },
        "value": {
          "type": "string",
          "description": "The value of the characteristic provided as a string."
        }
      }
    },
    "TMF669CreditProfile": {
      "type": "object",
      "description": "Credit profile for the party (containing credit scoring, ...). By default only the current credit profile  is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one.",
      "required": [
        "creditProfileDate",
        "validFor"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "creditProfileDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date the profile was established"
        },
        "creditRiskRating": {
          "type": "integer",
          "description": "This is an integer whose value is used to rate the risk"
        },
        "creditScore": {
          "type": "integer",
          "description": "A measure of a person's or an organization's creditworthiness calculated on the basis of a combination of factors such as their income and credit history."
        },
        "validFor": {
          "$ref": "#/definitions/TMF669TimePeriod",
          "description": "The period for which the profile is valid"
        }
      }
    },
    "TMF669AgreementRef": {
      "type": "object",
      "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the agreement"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the agreement"
        },
        "name": {
          "type": "string",
          "description": "Name of the agreement"
        }
      }
    },
    "TMF669RelatedPartyRef": {
      "type": "object",
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the related party, could be a party reference or a party role reference"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related party"
        },
        "name": {
          "type": "string",
          "description": "Name of the related party"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party."
        }
      }
    },
    "TMF669MediumCharacteristic": {
      "type": "object",
      "description": "Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city"
        },
        "country": {
          "type": "string",
          "description": "The country"
        },
        "emailAddress": {
          "type": "string",
          "description": "Full email address in standard format"
        },
        "faxNumber": {
          "type": "string",
          "description": "The fax number of the contact"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The primary phone number of the contact"
        },
        "postCode": {
          "type": "string",
          "description": "Postcode"
        },
        "stateOrProvince": {
          "type": "string",
          "description": "State or province"
        },
        "street1": {
          "type": "string",
          "description": "Describes the street"
        },
        "street2": {
          "type": "string",
          "description": "Complementary street description"
        },
        "type": {
          "type": "string",
          "description": "Type of medium (fax, mobile phone...)"
        }
      }
    },
    "TMF669EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF669EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF669Error": {
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "Application related code."
        },
        "reason": {
          "type": "integer",
          "description": "Text that explains the reason for error."
        },
        "message": {
          "type": "string",
          "description": "(optional) Text that provide more details and corrective actions related to the error."
        },
        "status": {
          "type": "integer",
          "description": "(optional) http error code extension like 400-2"
        },
        "referenceError": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        },
        "@type": {
          "type": "string",
          "description": "(optional) The class type of a REST resource."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "(optional) A link to the schema describing a REST resource."
        }
      }
    },
    "TMF670PaymentMethodType": {
      "description": "Representation of a payment method",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique id of the payment method in the server"
        },
        "href": {
          "type": "string",
          "description": "URI where to perform actions on the payment method"
        },
        "name": {
          "type": "string",
          "description": "Screen name of the payment method"
        },
        "description": {
          "type": "string",
          "description": "Description of the payment method"
        },
        "validFor": {
          "$ref": "#/definitions/TMF670TimePeriodType",
          "description": "Validity period of the payment method"
        },
        "account": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF670AccountRefType"
          },
          "description": "Account that owns or can use the payment method"
        },
        "preferred": {
          "type": "boolean",
          "description": "Defines whether this particular method is the preferred one"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF670RelatedPartyRefType"
          },
          "description": "Account that owns the payment method"
        },
        "@type": {
          "type": "string",
          "enum": [
            "cash",
            "digitalWallet",
            "tokenizedCard",
            "bankAccountTransfer",
            "bankAccountDebit",
            "bankCard",
            "account",
            "bucket",
            "voucher",
            "check",
            "loyaltyAccount"
          ],
          "description": "Payment method type. The content of the details field depends on the value of this one"
        },
        "authorizationCode": {
          "type": "string",
          "description": "Authorization code provided by a financial institution. Typically this would be populated for recurring payments using the method, as payments have an authorization code of their own."
        },
        "status": {
          "type": "string",
          "description": "Current status of the payment method"
        },
        "statusDate": {
          "format": "date-time",
          "type": "string",
          "description": "Last time the status changed"
        },
        "details": {
          "type": "object",
          "description": "Details of the payment method. This object's type depends on the value of the type field above"
        }
      },
      "required": [
        "id",
        "href",
        "@type",
        "details"
      ]
    },
    "TMF670QuantityType": {
      "description": "Representation of a quantity of something. I can also be used to represent a quantity range",
      "properties": {
        "amount": {
          "format": "decimal",
          "type": "number",
          "description": "Measured amount"
        },
        "units": {
          "type": "string",
          "description": "Units the quantity is measured in"
        }
      },
      "required": [
        "units",
        "amount"
      ]
    },
    "TMF670TimePeriodType": {
      "description": "Representation of a time period",
      "properties": {
        "startDateTime": {
          "format": "date-time",
          "type": "string",
          "description": "Start date of the period"
        },
        "endDateTime": {
          "format": "date-time",
          "type": "string",
          "description": "End date of the period"
        }
      },
      "required": [
        "startDateTime"
      ]
    },
    "TMF670RelatedPartyRefType": {
      "description": "Information about an associated entity and its role",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the related party"
        },
        "href": {
          "type": "string",
          "description": "Reference to the party"
        },
        "@referredType": {
          "type": "string",
          "description": "Type of party (e.g.: account, customer, user…)"
        },
        "name": {
          "type": "string",
          "description": "Name of the party"
        },
        "role": {
          "type": "string",
          "description": "Role of the related entity"
        }
      },
      "required": [
        "id",
        "href"
      ]
    },
    "TMF670PaymentMethodRequestType": {
      "description": "Request for the creation or modification of a payment method. It contains the same fields as paymentMethodType except the ones assigned by the server",
      "properties": {
        "name": {
          "type": "string",
          "description": "Screen name of the payment method"
        },
        "description": {
          "type": "string",
          "description": "Description of the payment method"
        },
        "validFor": {
          "$ref": "#/definitions/TMF670TimePeriodType",
          "description": "Validity period of the payment method"
        },
        "preferred": {
          "type": "boolean",
          "description": "Defines whether this particular method is the preferred one"
        },
        "account": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF670AccountRefType"
          },
          "description": "Account that owns or can use the payment method"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF670RelatedPartyRefType"
          },
          "description": "Account that owns the payment method"
        },
        "type": {
          "type": "string",
          "enum": [
            "cash",
            "digitalWallet",
            "tokenizedCard",
            "bankAccountTransfer",
            "bankAccountDebit",
            "bankCard",
            "account",
            "bucket",
            "voucher",
            "check",
            "loyaltyAccount"
          ],
          "description": "Payment method type. The content of the details field depends on the value of this one"
        },
        "authorizationCode": {
          "type": "string",
          "description": "Authorization code provided by a financial institution. Typically this would be populated for recurring payments using the method, as payments have an authorization code of their own."
        },
        "status": {
          "type": "string",
          "description": "Current status of the payment method"
        },
        "details": {
          "type": "object",
          "description": "Details of the payment method. This object's type depends on the value of the type field above"
        }
      },
      "required": [
        "type",
        "details"
      ]
    },
    "TMF670BankCardType": {
      "description": "Details of a bank card",
      "properties": {
        "brand": {
          "type": "string",
          "description": "Credit card brand. E.g.: Visa, MasterCard, AmericanExpress..."
        },
        "type": {
          "type": "string",
          "enum": [
            "Debit",
            "Credit"
          ],
          "description": "Debit or credit"
        },
        "cardNumber": {
          "type": "string",
          "description": "Credit card number"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "the card's expiration date"
        },
        "cvv": {
          "type": "string",
          "description": "the CVV or CVV2 code of the card"
        },
        "lastFourDigits": {
          "type": "string",
          "description": "Last four digits of the card"
        },
        "nameOnCard": {
          "type": "string",
          "description": "Name writen on the card"
        },
        "bank": {
          "type": "string",
          "description": "Bank that issued the card"
        }
      },
      "required": [
        "brand",
        "cardNumber",
        "expirationDate"
      ]
    },
    "TMF670TokenizedCardType": {
      "description": "Details of a tokenized bank card",
      "properties": {
        "brand": {
          "type": "string",
          "description": "Credit card brand. E.g.: Visa, MasterCard, AmericanExpress... Might be used for display purposes"
        },
        "type": {
          "type": "string",
          "enum": [
            "Debit",
            "Credit"
          ],
          "description": "Card type. Might be used for display purposes"
        },
        "lastFourDigits": {
          "type": "string",
          "description": "Last four digits of the credit card. Might be used for display purposes"
        },
        "tokenType": {
          "type": "string",
          "description": "Token type (e.g.: emv)"
        },
        "token": {
          "type": "string",
          "description": "The token itself"
        },
        "issuer": {
          "type": "string",
          "description": "Whoever issued the token"
        }
      },
      "required": [
        "tokenType",
        "token"
      ]
    },
    "TMF670BankAccountTransferType": {
      "description": "Details of a bank account",
      "properties": {
        "accountNumber": {
          "type": "string",
          "description": "Bank Account Number (this could refer to the IBAN or SWIFT number)"
        },
        "accountNumberType": {
          "type": "string",
          "description": "Type of account number (e.g.: IBAN, SWIFT, ...)"
        },
        "BIC": {
          "type": "string",
          "description": "Business Identifier Code/Swift code of the financial institution where the account is located"
        },
        "owner": {
          "type": "string",
          "description": "Owner of the bank account"
        },
        "bank": {
          "type": "string",
          "description": "Screen name of the bank"
        }
      },
      "required": [
        "accountNumber",
        "accountNumberType"
      ]
    },
    "TMF670BankAccountDebitType": {
      "description": "Details of a bank account",
      "properties": {
        "accountNumber": {
          "type": "string",
          "description": "Bank Account Number (this could refer to the IBAN or SWIFT number)"
        },
        "accountNumberType": {
          "type": "string",
          "description": "Type of account number (e.g.: IBAN, SWIFT, ...)"
        },
        "BIC": {
          "type": "string",
          "description": "Business Identifier Code/Swift code of the financial institution where the account is located"
        },
        "owner": {
          "type": "string",
          "description": "Owner of the bank account"
        },
        "bank": {
          "type": "string",
          "description": "Screen name of the bank"
        }
      },
      "required": [
        "accountNumber",
        "accountNumberType"
      ]
    },
    "TMF670CashType": {
      "description": "Details of cash payer"
    },
    "TMF670CheckType": {
      "description": "Details of a check",
      "properties": {
        "checkId": {
          "description": "Unique identifier of the check in the bank that issues them. Typically writen on them and comprises bank, account and serial number.",
          "type": "string"
        },
        "drawer": {
          "description": "Person or entity writing the check",
          "type": "string"
        },
        "payee": {
          "description": "Person or entity the check is addressed to",
          "type": "string"
        },
        "bank": {
          "description": "Entity, typically a bank, performing the payment of the check",
          "type": "string"
        },
        "date": {
          "description": "Date when the check was signed",
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "drawer",
        "payee",
        "bank"
      ]
    },
    "TMF670DigitalWalletType": {
      "description": "Details of a digital wallet",
      "properties": {
        "service": {
          "type": "string",
          "description": "Wallet service (e.g.: PayPal)"
        },
        "walletId": {
          "type": "string",
          "description": "Unique Id of the account in the service"
        },
        "walletUrl": {
          "type": "string",
          "description": "URI pointing at the digital wallet (e.g.: https://paypal.me/johndoe)"
        }
      },
      "required": [
        "service",
        "walletId"
      ]
    },
    "TMF670AccountRefType": {
      "description": "Reference to an external entity that can be tipically queried with another API such as a customer account, a ticket, etc.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the entity"
        },
        "href": {
          "type": "string",
          "description": "URI where to query or perform actions on the entity"
        },
        "name": {
          "type": "string",
          "description": "Screen name of the entity"
        },
        "description": {
          "type": "string",
          "description": "Description of the entity"
        },
        "@referredType": {
          "type": "string",
          "description": "Type of the referred account (s.g.: financialAccount)"
        }
      },
      "required": [
        "id",
        "href"
      ]
    },
    "TMF670VoucherType": {
      "description": "Details of a voucher",
      "properties": {
        "code": {
          "type": "string",
          "description": "Code that identifies the voucher or provides the discount"
        },
        "description": {
          "type": "string",
          "description": "Description of the voucher (e.g.: get one and receive one free)"
        },
        "value": {
          "description": "Discount that the voucher applies when it's a discount voucher",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF670QuantityType"
          }
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "the voucher's expiration date"
        },
        "campaign": {
          "type": "string",
          "description": "Campaign this voucher belongs to"
        }
      },
      "required": [
        "code"
      ]
    },
    "TMF671Promotion": {
      "type": "object",
      "description": "Promotion Resource is used to provide the additional discount, voucher, bonus or gift to the customer who meets the pre-defined criteria. Using promotion, the enterprise is able to attract the users and encourage more consumption, especially continuous purchases.   Normally Promotion is not regarded as one type of product or product offering. It is often applied when the customer buys the product offerings with the price or amount surpassing the certain limit.",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of Promotion"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to access the promotion."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of Promotion."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Latest update date of Promotion"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Status of Promotion, including draft/Test/WaitForApproval/Release/Suspend/Retirement."
        },
        "name": {
          "type": "string",
          "description": "Name of Promotion."
        },
        "type": {
          "type": "string",
          "description": "Type of promotion.The basic type is Award/Discount/Reduction. More types can be extended in future."
        },
        "validFor": {
          "$ref": "#/definitions/TMF671TimePeriod",
          "description": "The period for which the promotion is valid."
        },
        "pattern": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF671PromotionPattern"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF671Promotion_Create": {
      "type": "object",
      "description": "Promotion Resource is used to provide the additional discount, voucher, bonus or gift to the customer who meets the pre-defined criteria. Using promotion, the enterprise is able to attract the users and encourage more consumption, especially continuous purchases.   Normally Promotion is not regarded as one type of product or product offering. It is often applied when the customer buys the product offerings with the price or amount surpassing the certain limit.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of Promotion"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Latest update date of Promotion"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Status of Promotion, including draft/Test/WaitForApproval/Release/Suspend/Retirement."
        },
        "name": {
          "type": "string",
          "description": "Name of Promotion."
        },
        "type": {
          "type": "string",
          "description": "Type of promotion.The basic type is Award/Discount/Reduction. More types can be extended in future."
        },
        "validFor": {
          "$ref": "#/definitions/TMF671TimePeriod",
          "description": "The period for which the promotion is valid."
        },
        "pattern": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF671PromotionPattern"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF671Promotion_Update": {
      "type": "object",
      "description": "Promotion Resource is used to provide the additional discount, voucher, bonus or gift to the customer who meets the pre-defined criteria. Using promotion, the enterprise is able to attract the users and encourage more consumption, especially continuous purchases.   Normally Promotion is not regarded as one type of product or product offering. It is often applied when the customer buys the product offerings with the price or amount surpassing the certain limit.\nSkipped properties: id,href,id,href",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of Promotion"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Latest update date of Promotion"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Status of Promotion, including draft/Test/WaitForApproval/Release/Suspend/Retirement."
        },
        "name": {
          "type": "string",
          "description": "Name of Promotion."
        },
        "type": {
          "type": "string",
          "description": "Type of promotion.The basic type is Award/Discount/Reduction. More types can be extended in future."
        },
        "validFor": {
          "$ref": "#/definitions/TMF671TimePeriod",
          "description": "The period for which the promotion is valid."
        },
        "pattern": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF671PromotionPattern"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF671TimePeriod": {
      "type": "object",
      "description": "A base / value business entity used to represent a period of time between two timepoints.",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, ending at the TimePeriod."
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, starting at the TimePeriod"
        }
      }
    },
    "TMF671PromotionPattern": {
      "type": "object",
      "description": "Detailed pattern of the promotion.The pattern decides the conditions of promotion and the benefit of the promotion to be given to the eligible customer.",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier."
        },
        "name": {
          "type": "string",
          "description": "Name"
        },
        "priority": {
          "type": "integer",
          "description": "Priority. Smaller number means high."
        },
        "relationTypeAmongGroup": {
          "type": "string",
          "description": "AND/OR ,The logical relation type amongst the promotion criteria group."
        },
        "validFor": {
          "$ref": "#/definitions/TMF671TimePeriod",
          "description": "The period  for which the promotion pattern  is valid."
        },
        "action": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF671PromotionAction"
          }
        },
        "criteriaGroup": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF671PromotionCriteriaGroup"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF671PromotionAction": {
      "type": "object",
      "description": "Action of the promotion.When the customer meets the conditions in the promotion pattern, the customer can be given the benefits in the action.",
      "required": [
        "id",
        "actionType",
        "actionValue",
        "actionObjectId"
      ],
      "properties": {
        "actionObjectId": {
          "type": "string",
          "description": "It refers to the object (entity) ID which is impacted by the promotion action. When the Promotion -&gt; type is 1: Award, the actionObjectId is the sub-account ID; When the Promotion -&gt; type is 2: Discount, it is the offering ID; When the Promotion -&gt; type is 3: reduction, it is the offering ID."
        },
        "actionType": {
          "type": "string",
          "description": "When the Promotion -&gt; type is 1: Award, the action type can be one of the following:voice (minute),data (MB),data (GB),SMS,bonus point,physical gift,voucher,promotion code,an existing offering,currency. More types of action can be extended in future."
        },
        "actionValue": {
          "type": "number",
          "format": "float",
          "description": "When the Promotion -&gt; type is 1: Award, it means the amount or value of the awards decided by actionType, such as:Amount of gift,Amount of bonus,Value of discount; When the Promotion -&gt; type is 2: Discount, it means the value of the discount; When the Promotion -&gt; type is 3: reduction, it means the value of the reduced money ."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier."
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF671PromotionCriteriaGroup": {
      "type": "object",
      "description": "The group of the criteria of the promotion. The logical relationship between different groups is decided by the relationTypeInGroup.",
      "required": [
        "id",
        "relationTypeInGroup",
        "groupName"
      ],
      "properties": {
        "groupName": {
          "type": "string",
          "description": "Name of the group."
        },
        "id": {
          "type": "string",
          "description": "Unique Identifier"
        },
        "relationTypeInGroup": {
          "type": "string",
          "description": "AND/OR,The logical relation type amongst the various criteria inside a promotion criteria group."
        },
        "criteria": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF671PromotionCriteria"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF671PromotionCriteria": {
      "type": "object",
      "description": "Criteria of the promotion.",
      "required": [
        "id",
        "criteriaOperator",
        "criteriaPara",
        "criteriaValue"
      ],
      "properties": {
        "criteriaOperator": {
          "type": "string",
          "description": "The logic expression including parameter and operator. includeing:=,&gt;,&lt;,&gt;=,&lt;=,&lt;&gt;"
        },
        "criteriaPara": {
          "type": "string",
          "description": "The parameter (factor) of the criteria.The basic factors are abstracted from these data sources.There are several detail parameters ."
        },
        "criteriaValue": {
          "type": "string",
          "description": "The value is filled for the comparison of the criteria."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier."
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF671EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF671EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF671Error": {
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "Application related code."
        },
        "reason": {
          "type": "integer",
          "description": "Text that explains the reason for error."
        },
        "message": {
          "type": "string",
          "description": "(optional) Text that provide more details and corrective actions related to the error."
        },
        "status": {
          "type": "integer",
          "description": "(optional) http error code extension like 400-2"
        },
        "referenceError": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        },
        "@type": {
          "type": "string",
          "description": "(optional) The class type of a REST resource."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "(optional) A link to the schema describing a REST resource."
        }
      }
    },
    "TMF672TimePeriodType": {
      "properties": {
        "startDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "endDateTime": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "startDateTime"
      ]
    },
    "TMF672InvolvementIdentificationRefReqType": {
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "TMF672InvolvementIdentificationRefRspType": {
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "href"
      ]
    },
    "TMF672ManagedEntityRefType": {
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "entityType": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "entityType"
      ]
    },
    "TMF672PrivilegeType": {
      "properties": {
        "manageableAsset": {
          "$ref": "#/definitions/TMF672ManagedEntityRefType"
        },
        "function": {
          "type": "string"
        },
        "action": {
          "type": "string"
        }
      },
      "required": [
        "manageableAsset",
        "action"
      ]
    },
    "TMF672EntitlementType": {
      "properties": {
        "function": {
          "type": "string"
        },
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ]
    },
    "TMF672UserRoleRefReqType": {
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "TMF672UserRoleRefRspType": {
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "href"
      ]
    },
    "TMF672AssetInvolvementRoleReqType": {
      "properties": {
        "manageableAsset": {
          "$ref": "#/definitions/TMF672ManagedEntityRefType"
        },
        "userRole": {
          "$ref": "#/definitions/TMF672UserRoleRefReqType"
        }
      },
      "required": [
        "manageableAsset",
        "userRole"
      ]
    },
    "TMF672AssetInvolvementRoleRspType": {
      "properties": {
        "manageableAsset": {
          "$ref": "#/definitions/TMF672ManagedEntityRefType"
        },
        "userRole": {
          "$ref": "#/definitions/TMF672UserRoleRefRspType"
        }
      },
      "required": [
        "manageableAsset",
        "userRole"
      ]
    },
    "TMF672PermissionCreateType": {
      "properties": {
        "description": {
          "type": "string"
        },
        "period": {
          "$ref": "#/definitions/TMF672TimePeriodType"
        },
        "user": {
          "$ref": "#/definitions/TMF672InvolvementIdentificationRefReqType"
        },
        "granter": {
          "$ref": "#/definitions/TMF672InvolvementIdentificationRefReqType"
        },
        "privilege": {
          "items": {
            "$ref": "#/definitions/TMF672PrivilegeType"
          },
          "type": "array"
        },
        "assetUserRole": {
          "items": {
            "$ref": "#/definitions/TMF672AssetInvolvementRoleReqType"
          },
          "type": "array"
        }
      },
      "required": [
        "period",
        "user"
      ]
    },
    "TMF672PermissionType": {
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "date": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "period": {
          "$ref": "#/definitions/TMF672TimePeriodType"
        },
        "user": {
          "$ref": "#/definitions/TMF672InvolvementIdentificationRefRspType"
        },
        "granter": {
          "$ref": "#/definitions/TMF672InvolvementIdentificationRefRspType"
        },
        "privilege": {
          "items": {
            "$ref": "#/definitions/TMF672PrivilegeType"
          },
          "type": "array"
        },
        "assetUserRole": {
          "items": {
            "$ref": "#/definitions/TMF672AssetInvolvementRoleRspType"
          },
          "type": "array"
        }
      },
      "required": [
        "id",
        "href",
        "date",
        "period",
        "user"
      ]
    },
    "TMF672UserRoleCreateType": {
      "properties": {
        "involvementRole": {
          "type": "string"
        },
        "entitlement": {
          "items": {
            "$ref": "#/definitions/TMF672PrivilegeType"
          },
          "type": "array"
        }
      },
      "required": [
        "involvementRole",
        "entitlement"
      ]
    },
    "TMF672UserRoleType": {
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "involvementRole": {
          "type": "string"
        },
        "entitlement": {
          "items": {
            "$ref": "#/definitions/TMF672EntitlementType"
          },
          "type": "array"
        }
      },
      "required": [
        "id",
        "href",
        "involvementRole",
        "entitlement"
      ]
    },
    "TMF673ErrorRepresentation": {
      "description": "Standard tmf error representation",
      "required": [
        "code",
        "reason"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Application related code (as defined in the API or from a common list)",
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "description": "Text that explains the reason for error. This can be shown to a client server.",
          "type": "string"
        },
        "message": {
          "description": "Text that provides more details and corrective actions related to the error. This can be shown to a client server.",
          "type": "string"
        },
        "status": {
          "description": "http error code extension like 400-2",
          "type": "string"
        },
        "referenceError": {
          "description": "url pointing to documentation describing the error",
          "type": "string"
        },
        "@type": {
          "description": "Class type of the REST resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource",
          "type": "string"
        }
      }
    },
    "TMF673GeographicPoint": {
      "description": "A GeographicPoint defines a geographic point through coordinates.",
      "type": "object",
      "properties": {
        "x": {
          "description": "x coordinate (usually latitude)",
          "type": "string"
        },
        "y": {
          "description": "y coordinate (usually longitude)",
          "type": "string"
        },
        "z": {
          "description": "z coordinate (usually elevation)",
          "type": "string"
        }
      }
    },
    "TMF673GeographicLocation": {
      "description": "A GeographicLocation allows describing through coordinate(s) a point, a line or a space",
      "required": [
        "accuracy",
        "spatialRef"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique Identifier of a GeoLocation",
          "type": "string"
        },
        "href": {
          "description": "href of the GeoLocation",
          "type": "string"
        },
        "name": {
          "description": "Name of a GeoLocation",
          "type": "string"
        },
        "geometryType": {
          "description": "Type allows describing Geolocation form: it could be a point, a line, a polygon, a cylinder, etc....",
          "type": "string"
        },
        "accuracy": {
          "description": "",
          "type": "string"
        },
        "spatialRef": {
          "description": "",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST Resource",
          "type": "string"
        },
        "geometry": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF673GeographicPoint"
          }
        }
      }
    },
    "TMF673GeographicSubAddress": {
      "description": "It is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique Identifier of the subAddress",
          "type": "string"
        },
        "href": {
          "description": "Href of the subAddress",
          "type": "string"
        },
        "type": {
          "description": "Type of subAddress : it can be a subunit or a private street",
          "type": "string"
        },
        "name": {
          "description": "Name of the subAddress to identify it with a meaningful identification",
          "type": "string"
        },
        "subUnitType": {
          "description": "The type of subunit\ne.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
          "type": "string"
        },
        "subUnitNumber": {
          "description": "The discriminator used for the subunit\noften just a simple number e.g. FLAT 5, may also be a range",
          "type": "string"
        },
        "levelType": {
          "description": "Describes level types within a building",
          "type": "string"
        },
        "levelNumber": {
          "description": "Used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2",
          "type": "string"
        },
        "buildingName": {
          "description": "Allows for buildings that have well-known names",
          "type": "string"
        },
        "privateStreetNumber": {
          "description": "Private streets numbers internal to a private street",
          "type": "string"
        },
        "privateStreetName": {
          "description": "Private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office",
          "type": "string"
        },
        "@type": {
          "description": "Type of the resource for this subAdress",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST Resource",
          "type": "string"
        }
      }
    },
    "TMF673GeographicAddress": {
      "description": "A geographic address is a structured textual way of describing how to find a Property in an urban area (country properties are often defined differently)",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the address",
          "type": "string"
        },
        "href": {
          "description": "An URI used to access to the address resource",
          "type": "string"
        },
        "streetNr": {
          "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses",
          "type": "string"
        },
        "streetNrSuffix": {
          "description": "The first street number suffix",
          "type": "string"
        },
        "streetNrLast": {
          "description": "Last number in a range of street numbers allocated to a property",
          "type": "string"
        },
        "streetNrLastSuffix": {
          "description": "Last street number suffix for a ranged address",
          "type": "string"
        },
        "streetName": {
          "description": "Name of the street or other street type",
          "type": "string"
        },
        "streetType": {
          "description": "Alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf",
          "type": "string"
        },
        "streetSuffix": {
          "description": "A modifier denoting a relative direction",
          "type": "string"
        },
        "postcode": {
          "description": "Descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also known as zipcode)",
          "type": "string"
        },
        "locality": {
          "description": "\"An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi-rural in nature.\" [ANZLIC-STREET], or a suburb \"a bounded locality within a city, town or shire principally of urban character \" [ANZLICSTREET].",
          "type": "string"
        },
        "city": {
          "description": "City that the address is in",
          "type": "string"
        },
        "stateOrProvince": {
          "description": "The State or Province that the address is in",
          "type": "string"
        },
        "country": {
          "description": "Country that the address is in",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of the resource. Here can be 'UrbanPropertyAddress', ‘FormattedAddress’, ‘JapanesePropertyAddress’ , ‘AustralianPropertyAddress’, etc…",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A Link to the schema describing this REST Resource. The resource described 'UrbanPropertyAddress' but a schema could be used for other property address description.",
          "type": "string"
        },
        "geographicLocationRefOrValue": {
          "$ref": "#/definitions/TMF673GeographicLocation"
        },
        "geographicSubAddress": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF673GeographicSubAddress"
          }
        }
      }
    },
    "TMF673GeographicAddressValidation": {
      "description": "Resource used to support a request for a validation address : check if a geographic address described by values attributes exists)\nIf exist, id and href are provided\nif not, alternate address(es) could be provided",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the Address Validation",
          "type": "string"
        },
        "href": {
          "description": "An URI used to access to the address validation resource",
          "type": "string"
        },
        "status": {
          "description": "Status of the address validation (inProgress, terminatedWithErrror, done).",
          "type": "string"
        },
        "validationDate": {
          "description": "Date when the address validation is performed",
          "type": "string",
          "format": "date-time"
        },
        "validationResult": {
          "description": "Result of the address validation (success, partial, fail)",
          "type": "string"
        },
        "provideaAlternative": {
          "description": "Indicator provided by the requester to specify if alternate addresses must be provided in case of partial or fail result",
          "type": "boolean"
        },
        "@type": {
          "description": "Indicates the type of the resource.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to schema describing this REST resource.",
          "type": "string"
        },
        "validAddress": {
          "$ref": "#/definitions/TMF673GeographicAddressResponseValidation"
        },
        "alternateGeographicAddress": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF673GeographicAddressResponseValidation"
          }
        }
      }
    },
    "TMF673LocationCharacteristic": {
      "description": "Name/value pairs, used to extra characterized the Area",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the characteristic",
          "type": "string"
        },
        "value": {
          "description": "Value of the characteristic",
          "type": "string"
        }
      }
    },
    "TMF673Area": {
      "description": "Area corresponds to a geographic area as a city, a locality, a district, etc",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of an Area",
          "type": "string"
        },
        "name": {
          "description": "The defined name of the municipality",
          "type": "string"
        },
        "type": {
          "description": "SUBURB, LOCALITY, CITY, TOWN, BOROUGH, ....",
          "type": "string"
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF673LocationCharacteristic"
          }
        }
      }
    },
    "TMF673Street": {
      "description": "A street is a road in a city or locality that has buildings that are usually close together along one or both sides",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the Street",
          "type": "string"
        },
        "name": {
          "description": "The defined name of the street",
          "type": "string"
        },
        "type": {
          "description": "Alley, street, impasse, avenue, etc..",
          "type": "string"
        },
        "address": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF673GeographicAddressRef"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF673LocationCharacteristic"
          }
        }
      }
    },
    "TMF673GeographicAddressRef": {
      "description": "Reference to a geographic address with id & href",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "unique identifier of an address",
          "type": "string"
        },
        "href": {
          "description": "URI to point to the address",
          "type": "string"
        }
      }
    },
    "TMF673StreetSegment": {
      "description": "StreetSegment corresponds to a part of a given street referenced by a number (22) or a set of number (22-24). Sometimes a suffix is added",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the Street Segment",
          "type": "string"
        },
        "number": {
          "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses",
          "type": "string"
        },
        "numberSuffix": {
          "description": "The first street number suffix",
          "type": "string"
        },
        "numberLast": {
          "description": "The last number in a range of street numbers allocated to a property",
          "type": "string"
        },
        "numberLastSuffix": {
          "description": "The last street number suffix for a ranged address",
          "type": "string"
        },
        "geographicAddress": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF673GeographicAddressRef"
          }
        }
      }
    },
    "TMF673GeographicAddressValidationRequest": {
      "description": "Structure used to describe an address validation request",
      "type": "object",
      "properties": {
        "provideaAlternative": {
          "description": "Indicator provided by the requester to specify if alternate addresses must be provided in case of partial or fail result",
          "type": "boolean"
        },
        "validAddress": {
          "$ref": "#/definitions/TMF673GeographicAddressRequestValidation"
        }
      }
    },
    "TMF673GeographicAddressRequestValidation": {
      "description": "",
      "type": "object",
      "properties": {
        "streetNr": {
          "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses",
          "type": "string"
        },
        "streetNrSuffix": {
          "description": "The first street number suffix",
          "type": "string"
        },
        "streetNrLast": {
          "description": "Last number in a range of street numbers allocated to a property",
          "type": "string"
        },
        "streetNrLastSuffix": {
          "description": "Last street number suffix for a ranged address",
          "type": "string"
        },
        "streetName": {
          "description": "Name of the street or other street type",
          "type": "string"
        },
        "streetType": {
          "description": "Alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf",
          "type": "string"
        },
        "streetSuffix": {
          "description": "A modifier denoting a relative direction",
          "type": "string"
        },
        "postcode": {
          "description": "Descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also known as zipcode)",
          "type": "string"
        },
        "locality": {
          "description": "\"An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi-rural in nature.\" [ANZLIC-STREET], or a suburb \"a bounded locality within a city, town or shire principally of urban character \" [ANZLICSTREET].",
          "type": "string"
        },
        "city": {
          "description": "City that the address is in",
          "type": "string"
        },
        "stateOrProvince": {
          "description": "The State or Province that the address is in",
          "type": "string"
        },
        "country": {
          "description": "Country that the address is in",
          "type": "string"
        },
        "geoLocationRefOrValue": {
          "$ref": "#/definitions/TMF673GeographicLocation"
        }
      }
    },
    "TMF673GeographicAddressResponseValidation": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the address",
          "type": "string"
        },
        "href": {
          "description": "An URI used to access to the address resource",
          "type": "string"
        },
        "streetNr": {
          "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses",
          "type": "string"
        },
        "streetNrSuffix": {
          "description": "The first street number suffix",
          "type": "string"
        },
        "streetNrLast": {
          "description": "Last number in a range of street numbers allocated to a property",
          "type": "string"
        },
        "streetNrLastSuffix": {
          "description": "Last street number suffix for a ranged address",
          "type": "string"
        },
        "streetName": {
          "description": "Name of the street or other street type",
          "type": "string"
        },
        "streetType": {
          "description": "Alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf",
          "type": "string"
        },
        "streetSuffix": {
          "description": "A modifier denoting a relative direction",
          "type": "string"
        },
        "postcode": {
          "description": "Descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also known as zipcode)",
          "type": "string"
        },
        "locality": {
          "description": "\"An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi-rural in nature.\" [ANZLIC-STREET], or a suburb \"a bounded locality within a city, town or shire principally of urban character \" [ANZLICSTREET].",
          "type": "string"
        },
        "city": {
          "description": "City that the address is in",
          "type": "string"
        },
        "stateOrProvince": {
          "description": "The State or Province that the address is in",
          "type": "string"
        },
        "country": {
          "description": "Country that the address is in",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of the resource. Here can be 'UrbanPropertyAddress', ‘FormattedAddress’, ‘JapanesePropertyAddress’ , ‘AustralianPropertyAddress’, etc…",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A Link to the schema describing this REST Resource. The resource described 'UrbanPropertyAddress' but a schema could be used for other property address description.",
          "type": "string"
        },
        "geographicLocationRefOrValue": {
          "$ref": "#/definitions/TMF673GeographicLocation"
        }
      }
    },
    "TMF673Hub": {
      "description": "Communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the hub",
          "type": "string"
        },
        "callback": {
          "description": "The callback being registered",
          "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
          "type": "string"
        }
      }
    },
    "TMF673HubInput": {
      "description": "Communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics",
      "type": "object",
      "properties": {
        "callback": {
          "description": "The callback being registered",
          "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
          "type": "string"
        }
      }
    },
    "TMF674ErrorRepresentation": {
      "description": "Error representation",
      "required": [
        "code",
        "reason"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Application related code (as defined in the API or from a common list)",
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "description": "Text that explains the reason for error. This can be shown to a client user.",
          "type": "string"
        },
        "message": {
          "description": "Text that provides more details and corrective actions related to the error. This can be shown to a client user.",
          "type": "string"
        },
        "status": {
          "description": "Http error code extension like 400-2",
          "type": "string"
        },
        "referenceError": {
          "description": "URL pointing to documentation describing the error",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF674GeographicSite": {
      "description": "The GeographicSite resource represents a class that allows to easily refer to Places important to other entities (such as a customer, an account, a product,…)",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the site within the server",
          "type": "string"
        },
        "href": {
          "description": "An URI used to access to the site resource",
          "type": "string"
        },
        "name": {
          "description": "The name that the site is known by",
          "type": "string"
        },
        "description": {
          "description": "Text describing additional information regarding the site",
          "type": "string"
        },
        "code": {
          "description": "A code that may be used for some addressing schemes e.g. [ANSI T1.253-1999]",
          "type": "string"
        },
        "status": {
          "description": "The condition of the GeographicSite, such as active, inactive, planned",
          "type": "string"
        },
        "@baseType": {
          "description": "Indicates the base type of the resource for extensibility and polymorphism purposes to differentiate the definition of different type of sites (enterprise, residential, …)",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of the resource for extensibility purposes",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A Link to the schema describing this REST Resource",
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/TMF674GeographicAddress"
        },
        "geographicLocation": {
          "$ref": "#/definitions/TMF674GeographicLocation"
        },
        "calendar": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF674CalendarPeriod"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF674RelatedPartyRef"
          }
        },
        "siteRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF674SiteRelationship"
          }
        }
      }
    },
    "TMF674GeographicAddress": {
      "description": "Defines an address and/or identifies an existing address entity. An address allows textual description of an existing place over the surface of the Earth. This resource could be invoked as reference or value",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the entity within the server",
          "type": "string"
        },
        "href": {
          "description": "Reference of the entity",
          "type": "string"
        },
        "streetNr": {
          "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses",
          "type": "string"
        },
        "streetNrSuffix": {
          "description": "First street number suffix.",
          "type": "string"
        },
        "streetNrLast": {
          "description": "Last number in a range of street numbers allocated to a property",
          "type": "string"
        },
        "streetNrLastSuffix": {
          "description": ". Last street number suffix for a ranged address",
          "type": "string"
        },
        "streetName": {
          "description": "Name of the street or other street type",
          "type": "string"
        },
        "streetType": {
          "description": "Alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf",
          "type": "string"
        },
        "streetSuffix": {
          "description": "A modifier denoting a relative direction",
          "type": "string"
        },
        "postcode": {
          "description": "Descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also known as zipcode)",
          "type": "string"
        },
        "locality": {
          "description": "\"An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi-rural in nature.\" [ANZLIC-STREET], or a suburb \"a bounded locality within a city, town or shire principally of urban character \" [ANZLICSTREET].",
          "type": "string"
        },
        "city": {
          "description": "City that the address is in",
          "type": "string"
        },
        "stateOrProvince": {
          "description": "State or Province that the address is in",
          "type": "string"
        },
        "country": {
          "description": "Country that the address is in",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of the resource. Here can be UrbanPropertyAddress, FormattedAddress, JapanesePropertyAddress , AustralianPropertyAddress, etc…",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A Link to the schema describing this REST Resource. The resource described UrbanPropertyAddress but a schema could be used for other property address description",
          "type": "string"
        },
        "geographicLocation": {
          "$ref": "#/definitions/TMF674GeographicLocation"
        },
        "geographicSubAddress": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF674GeographicSubAddress"
          }
        }
      }
    },
    "TMF674GeographicLocation": {
      "description": "GeographicLocation reference. Defines a geo location and/or identifies an existing geo location entity\nA Geographic Location allows describing through coordinate(s) a point, a line or a space. This resource could be invoked as reference or value",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique Identifier of a GeoLocation",
          "type": "string"
        },
        "href": {
          "description": "Reference  of a GeoLocation",
          "type": "string"
        },
        "name": {
          "description": "Name of a GeoLocation",
          "type": "string"
        },
        "geometryType": {
          "description": "Type allows describing Geolocation form: it could be a point, a line, a polygon, a cylinder, etc....",
          "type": "string"
        },
        "accuracy": {
          "description": "Accuracy of the points in the geometry specified",
          "type": "string"
        },
        "spatialRef": {
          "description": "Geocoding referential",
          "type": "string"
        },
        "@type": {
          "description": ". Indicates the type of the resource for extensibility purposes",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A Link to the schema describing this REST Resource",
          "type": "string"
        },
        "geometry": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF674GeographicPoint"
          }
        }
      }
    },
    "TMF674CalendarPeriod": {
      "description": "Calendar period",
      "required": [
        "status",
        "day",
        "hourPeriod"
      ],
      "type": "object",
      "properties": {
        "status": {
          "description": "Indication of the availability of the site (e.g.: open)",
          "type": "string"
        },
        "day": {
          "description": "Day where the calendar status applies (e.g.: monday, mon-to-fri, weekdays, weekend, all week, …)",
          "type": "string"
        },
        "timeZone": {
          "description": "Indication of the timezone applicable to the calendar information (e.g.: Paris, GMT+1)",
          "type": "string"
        },
        "hourPeriod": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF674HourPeriod"
          }
        }
      }
    },
    "TMF674SiteRelationship": {
      "description": "Relationship between sites",
      "required": [
        "id",
        "type"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the related site entity within the server",
          "type": "string"
        },
        "href": {
          "description": "Reference of the related site entity",
          "type": "string"
        },
        "type": {
          "description": "Type of relationship",
          "type": "string"
        },
        "role": {
          "description": "Role of the related site in the relationship",
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF674TimePeriod"
        }
      }
    },
    "TMF674RelatedPartyRef": {
      "description": "Related Party reference",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the related party",
          "type": "string"
        },
        "href": {
          "description": "Reference of the related party",
          "type": "string"
        },
        "name": {
          "description": "Name of the related party",
          "type": "string"
        },
        "role": {
          "description": "Role played by the related party",
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF674TimePeriod"
        },
        "@referredType": {
          "description": "Indicates the type of the resource. Here can be Individual or Organization",
          "type": "string"
        }
      }
    },
    "TMF674GeographicSubAddress": {
      "description": "Representation of a SubAddress. It is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique Identifier of the subAddress",
          "type": "string"
        },
        "href": {
          "description": "Reference of the subAddress",
          "type": "string"
        },
        "type": {
          "description": "Type of subAddress: it can be a subunit or a private street",
          "type": "string"
        },
        "name": {
          "description": "Name of the subAddress to identify it with a meaningful identification",
          "type": "string"
        },
        "subUnitType": {
          "description": "Type of subunit e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF",
          "type": "string"
        },
        "subUnitNumber": {
          "description": "Discriminator used for the subunit often just a simple number e.g. FLAT 5, may also be a range",
          "type": "string"
        },
        "levelType": {
          "description": "Describes level types within a building",
          "type": "string"
        },
        "levelNumber": {
          "description": "Used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2",
          "type": "string"
        },
        "buildingName": {
          "description": "Allows for buildings that have well-known names",
          "type": "string"
        },
        "privateStreetName": {
          "description": "Private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office",
          "type": "string"
        },
        "privateStreetNumber": {
          "description": "Private streets numbers internal to a private street",
          "type": "string"
        },
        "@type": {
          "description": "Type of the resource for thus subResource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A Link to the schema describing the structure of this REST Resource to allow for extensions",
          "type": "string"
        }
      }
    },
    "TMF674GeographicPoint": {
      "description": "A GeoPoint defines a geographic point through coordinates",
      "required": [
        "x",
        "y"
      ],
      "type": "object",
      "properties": {
        "x": {
          "description": "x coordinate (usually latitude)",
          "type": "string"
        },
        "y": {
          "description": "y coordinate (usually longitude)",
          "type": "string"
        },
        "z": {
          "description": "z coordinate (usually elevation)",
          "type": "string"
        }
      }
    },
    "TMF674TimePeriod": {
      "description": "A date time period",
      "type": "object",
      "properties": {
        "startDateTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "endDateTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TMF674HourPeriod": {
      "description": "A time period",
      "required": [
        "startHour",
        "endHour"
      ],
      "type": "object",
      "properties": {
        "startHour": {
          "description": "The time when the status starts applying",
          "type": "string"
        },
        "endHour": {
          "description": "The time when the status ends applying",
          "type": "string"
        }
      }
    },
    "TMF674Hub": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the hub",
          "type": "string"
        },
        "callback": {
          "description": "The callback being registered",
          "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
          "type": "string"
        }
      }
    },
    "TMF674HubInput": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics",
      "type": "object",
      "properties": {
        "callback": {
          "description": "The callback being registered",
          "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
          "type": "string"
        }
      }
    },
    "TMF675ErrorRepresentation": {
      "description": "Standard tmf error representation",
      "required": [
        "code",
        "reason"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Application related code (as defined in the API or from a common list)",
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "description": "Text that explains the reason for error. This can be shown to a client user.",
          "type": "string"
        },
        "message": {
          "description": "Text that provides more details and corrective actions related to the error. This can be shown to a client user.",
          "type": "string"
        },
        "status": {
          "description": "http error code extension like 400-2",
          "type": "string"
        },
        "referenceError": {
          "description": "url ponting to documentation describing the error",
          "type": "string"
        },
        "@type": {
          "description": "Type of the REST resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource",
          "type": "string"
        }
      }
    },
    "TMF675GeographicPoint": {
      "description": "A GeoPoint defines a geographic point through coordinates",
      "required": [
        "x",
        "y"
      ],
      "type": "object",
      "properties": {
        "x": {
          "description": "x coordinate (usually latitude)",
          "type": "string"
        },
        "y": {
          "description": "y coordinate (usually longitude)",
          "type": "string"
        },
        "z": {
          "description": "z coordinate (usually elevation)",
          "type": "string"
        }
      }
    },
    "TMF675GeographicLocation": {
      "description": "Structured textual way of describing a geographic location. A geographic location allows describing through coordinate(s), a point, a line or a space.",
      "required": [
        "name",
        "geometryType",
        "spatialRef",
        "accuracy",
        "geometry"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the geographic location",
          "type": "string"
        },
        "href": {
          "description": "An URI used to access to the geographic location resource",
          "type": "string"
        },
        "name": {
          "description": "Name of the geo location",
          "type": "string"
        },
        "geometryType": {
          "description": "Type of the geographic location - one of: point, line, graph, ring polygon",
          "type": "string"
        },
        "spatialRef": {
          "description": "Geocoding referential",
          "type": "string"
        },
        "accuracy": {
          "description": "Accuracy of the coordinate specified",
          "type": "string"
        },
        "geometry": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF675GeographicPoint"
          }
        },
        "@baseType": {
          "description": "Indicates the base type of the resource. Here can be 'geographicLocation'.",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of the resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST Resource",
          "type": "string"
        }
      }
    },
    "TMF675POST_REQ_GeographicLocation": {
      "description": "",
      "required": [
        "name",
        "geometryType",
        "spatialRef",
        "accuracy",
        "geometry"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the geo location",
          "type": "string"
        },
        "geometryType": {
          "description": "Type of the geographic location - one of: point, line, graph, ring polygon",
          "type": "string"
        },
        "spatialRef": {
          "description": "",
          "type": "string"
        },
        "accuracy": {
          "description": "",
          "type": "string"
        },
        "@baseType": {
          "description": "Indicates the base type of the resource. Here can be 'geographicLocation'.",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of the resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST Resource",
          "type": "string"
        },
        "geometry": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF675GeographicPoint"
          }
        }
      }
    },
    "TMF675PATCH_REQ_GeographicLocation": {
      "description": "",
      "required": [
        "name",
        "geometryType",
        "geometry"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the geographic location",
          "type": "string"
        },
        "name": {
          "description": "Name of the geo location",
          "type": "string"
        },
        "geometryType": {
          "description": "Type of the geographic location - one of: point, line, graph, ring polygon",
          "type": "string"
        },
        "@baseType": {
          "description": "Indicates the base type of the resource. Here can be 'geographicLocation'.",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of the resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST Resource",
          "type": "string"
        },
        "geometry": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF675GeographicPoint"
          }
        }
      }
    },
    "TMF675RetrieveGeographicLocation": {
      "description": "This resource is used to manage the request and response to retrieve a thing (any object)",
      "required": [
        "thing"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the retrieve task",
          "type": "string"
        },
        "href": {
          "description": "An URI used to access to the task resource",
          "type": "string"
        },
        "status": {
          "description": "Status of the task (inProgress, terminatedWithErrror, done)",
          "type": "string"
        },
        "requestedAccuracy": {
          "description": "Requested accuracy of the retrieval",
          "type": "number",
          "format": "float"
        },
        "time": {
          "description": "Timestamp of end of task execution",
          "type": "string",
          "format": "date-time"
        },
        "thing": {
          "$ref": "#/definitions/TMF675Object"
        },
        "geographicLocation": {
          "$ref": "#/definitions/TMF675GeographicLocationReferred"
        }
      }
    },
    "TMF675Object": {
      "description": "",
      "required": [
        "type",
        "uri"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "",
          "type": "string"
        },
        "uri": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF675GeographicLocationReferred": {
      "description": "",
      "required": [
        "name",
        "geometryType",
        "spatialRef",
        "accuracy",
        "geometry"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the geographic location",
          "type": "string"
        },
        "href": {
          "description": "An URI used to access to the geographic location resource",
          "type": "string"
        },
        "name": {
          "description": "Name of the geo location",
          "type": "string"
        },
        "geometryType": {
          "description": "Type of the geographic location - one of: point, line, graph, ring polygon",
          "type": "string"
        },
        "spatialRef": {
          "description": "Geocoding referential",
          "type": "string"
        },
        "accuracy": {
          "description": "Accuracy of the coordinate specified",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of the resource",
          "type": "string"
        },
        "geometry": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF675GeographicPointReferred"
          }
        }
      }
    },
    "TMF675POST_REQ_RetrieveGeographicLocation": {
      "description": "",
      "required": [
        "thing"
      ],
      "type": "object",
      "properties": {
        "requestedAccuracy": {
          "description": "",
          "type": "number",
          "format": "float"
        },
        "thing": {
          "$ref": "#/definitions/TMF675Object"
        }
      }
    },
    "TMF675GeographicLocationRef": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the geographic location",
          "type": "string"
        },
        "href": {
          "description": "An URI used to access to the geographic location resource",
          "type": "string"
        }
      }
    },
    "TMF675RetrieveLocationRelation": {
      "description": "This resource is used to manage the request and response to retrieve the relation between two geographic locations",
      "required": [
        "distance",
        "time",
        "geographicLocation",
        "intersection"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the retrieve task",
          "type": "string"
        },
        "href": {
          "description": "An URI used to access to the task resource",
          "type": "string"
        },
        "status": {
          "description": "Status of the task (inProgress, terminatedWithErrror, done)",
          "type": "string"
        },
        "distance": {
          "description": "Calculated distance between location A and location B",
          "type": "string"
        },
        "time": {
          "description": "Timestamp of end of task execution",
          "type": "string",
          "format": "date-time"
        },
        "geographicLocation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF675GeographicLocationRef"
          },
          "minItems": 2,
          "maxItems": 2
        },
        "intersection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF675GeographicLocationReferred"
          }
        }
      }
    },
    "TMF675POST_REQ_RetrieveLocationRelation": {
      "description": "",
      "required": [
        "geographicLocation"
      ],
      "type": "object",
      "properties": {
        "geographicLocation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF675GeographicLocationRef"
          },
          "minItems": 2,
          "maxItems": 2
        }
      }
    },
    "TMF675GeographicPointReferred": {
      "description": "",
      "required": [
        "x",
        "y"
      ],
      "type": "object",
      "properties": {
        "x": {
          "description": "x coordinate (usually latitude)",
          "type": "string"
        },
        "y": {
          "description": "y coordinate (usually longitude)",
          "type": "string"
        },
        "z": {
          "description": "z coordinate (usually elevation)",
          "type": "string"
        }
      }
    },
    "TMF675Hub": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the Hub",
          "type": "string"
        },
        "callback": {
          "description": "The calback being registered",
          "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
          "type": "string"
        }
      }
    },
    "TMF675HubInput": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the Hub",
          "type": "string"
        },
        "callback": {
          "description": "The calback being registered",
          "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
          "type": "string"
        }
      }
    },
    "TMF677ErrorRepresentation": {
      "description": "Standard TMF error representation",
      "required": [
        "code"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Application related code (as defined in the API or from a common list)",
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "description": "Text that explains the reason for error. This can be shown to a client user.",
          "type": "string"
        },
        "message": {
          "description": "Text that provides more details and corrective actions related to the error. This can be shown to a client user.",
          "type": "string"
        },
        "status": {
          "description": "http error code extension like 400-2",
          "type": "string"
        },
        "referenceError": {
          "description": "URL pointing to documentation describing the error",
          "type": "string"
        }
      }
    },
    "TMF677UsageConsumptionReport": {
      "description": "An usage consumption report enables to know at a given point the balances and the consumption counters related to various buckets (SMS, Voice, Data for example). It could be calculated for a device identified by a public key (msisdn number for a mobile device for example or PSTN or VOIP number for a fix device), for a subscribed offer or option or for an user.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the usage consumption report given by the server",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink to access the usage consumption report",
          "type": "string"
        },
        "name": {
          "description": "Usage consumption report name",
          "type": "string"
        },
        "description": {
          "description": "Free short text describing the usage consumption report content",
          "type": "string"
        },
        "effectiveDate": {
          "description": "Date and time when the usage consumption report was calculated and generated",
          "type": "string",
          "format": "date-time"
        },
        "@baseType": {
          "description": "Indicates the base (class) type of the usage consumption report",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the usage consumption report",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource",
          "type": "string"
        },
        "relatedParty": {
          "$ref": "#/definitions/TMF677RelatedPartyRef"
        },
        "bucket": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF677Bucket"
          }
        }
      }
    },
    "TMF677Bucket": {
      "description": "A bucket represents a quantity of usage, as 2 hours national calls or 50 sms for example. It could be either a quantity or an amount in a currency (i.e. It could represent a fixed number of SMS, MMS, minutes of calls, quantity of data, number of events as well as a specific amount in a given currency). It requires one or more network products from which usages will debit the bucket.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the bucket",
          "type": "string"
        },
        "name": {
          "description": "Bucket name",
          "type": "string"
        },
        "usageType": {
          "description": "Type of usage concerned by the bucket (voice, sms, data,…)",
          "type": "string"
        },
        "isShared": {
          "description": "True if the bucket is shared between several devices or users",
          "type": "boolean"
        },
        "@type": {
          "description": "Indicates the (class) type of bucket",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource",
          "type": "string"
        },
        "product": {
          "$ref": "#/definitions/TMF677Product"
        },
        "bucketBalance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF677Balance"
          }
        },
        "bucketCounter": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF677ConsumptionCounter"
          }
        }
      }
    },
    "TMF677RelatedPartyRef": {
      "description": "Related party reference",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the related party",
          "type": "string"
        },
        "href": {
          "description": "Reference of the related party, could be a party reference or a party role reference",
          "type": "string"
        },
        "name": {
          "description": "Name of the related party",
          "type": "string"
        },
        "role": {
          "description": "Role played by the related party",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the type of related party",
          "type": "string"
        }
      }
    },
    "TMF677TimePeriod": {
      "description": "A date time period between a start date and an end date",
      "type": "object",
      "properties": {
        "startDateTime": {
          "description": "Start date time of the period",
          "type": "string",
          "format": "date-time"
        },
        "endDateTime": {
          "description": "End date time of the period",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TMF677Product": {
      "description": "An instantiated product corresponding to a simple product offering subscribed by a customer",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product",
          "type": "string"
        },
        "name": {
          "description": "Product Name",
          "type": "string"
        },
        "publicIdentifier": {
          "description": "Public number associated to the product (msisdn number for mobile line for example)",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/TMF677RelatedPartyRef"
        }
      }
    },
    "TMF677Balance": {
      "description": "The balance defines the remaining allowed product usage quantity in terms of volume, time, currency or events. It corresponds to the initial allowed usage quantity minus the usage consumed on the bucket.",
      "type": "object",
      "properties": {
        "unit": {
          "description": "Code of the unit used to specify the given value of the balance. It could be different from the bucket unit",
          "type": "string"
        },
        "remainingValue": {
          "description": "Numeric remaining value for the bucket given in the balance unit (for example 1.9). This numeric value could be used for calculation for example",
          "type": "integer",
          "format": "int64"
        },
        "remainingValueLabel": {
          "description": "Remaining value in a formatted string for the bucket given in the balance unit (for example 1.9 Gb). This formatted string could be used for display needs for example",
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF677TimePeriod"
        },
        "@type": {
          "description": "Indicates the (class) type of the bucket balance",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource",
          "type": "string"
        }
      }
    },
    "TMF677ConsumptionCounter": {
      "description": "The consumption counters detail for example the different kind of consumption done on the bucket",
      "type": "object",
      "properties": {
        "counterType": {
          "description": "Type of the consumption counter. We can give for example a counter of the used value",
          "type": "string"
        },
        "level": {
          "description": "Counter level. The given counter can be given globally for the bucket or detailed by user or by product for example in case of shared bucket",
          "type": "string"
        },
        "unit": {
          "description": "Unit of the counter",
          "type": "string"
        },
        "value": {
          "description": "Numeric value of the bucket counter in the given unit",
          "type": "integer",
          "format": "int64"
        },
        "valueLabel": {
          "description": "Value of the counter in a formatted string used for display needs for example",
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF677TimePeriod"
        },
        "@type": {
          "description": "Indicates the (class) type of consumption counter",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource",
          "type": "string"
        },
        "product": {
          "$ref": "#/definitions/TMF677ProductRef"
        },
        "user": {
          "$ref": "#/definitions/TMF677RelatedPartyRef"
        }
      }
    },
    "TMF677UsageConsumptionReportRequest": {
      "description": "This resource is used to manage the calculation request of an usage consumption report.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the usage consumption report request given by the server",
          "type": "string"
        },
        "href": {
          "description": "Reference of the usage consumption report request",
          "type": "string"
        },
        "creationDate": {
          "description": "Date and time of the request creation",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "Status of the usage consumption report request (InProgress or done)",
          "type": "string"
        },
        "lastUpdate": {
          "description": "Date when the status was last changed",
          "type": "string",
          "format": "date-time"
        },
        "callbackUrl": {
          "description": "An url where the result could be notified",
          "type": "string"
        },
        "validPeriod": {
          "$ref": "#/definitions/TMF677TimePeriod"
        },
        "product": {
          "$ref": "#/definitions/TMF677ProductRef"
        },
        "bucket": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF677BucketRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF677RelatedPartyRef"
          }
        },
        "usageConsumptionReport": {
          "$ref": "#/definitions/TMF677UsageConsumptionReportRef"
        },
        "@type": {
          "description": "Indicates the (class) type of the usage consumption report request",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource",
          "type": "string"
        }
      }
    },
    "TMF677UsageConsumptionReportRequestIn": {
      "description": "",
      "type": "object",
      "properties": {
        "product": {
          "$ref": "#/definitions/TMF677ProductRef"
        },
        "bucket": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF677BucketRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF677RelatedPartyRef"
          }
        },
        "validPeriod": {
          "$ref": "#/definitions/TMF677TimePeriod"
        },
        "callbackUrl": {
          "description": "An url where the result could be notified",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the usage consumption report request",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource",
          "type": "string"
        }
      }
    },
    "TMF677BucketRef": {
      "description": "Reference of a bucket",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the bucket",
          "type": "string"
        }
      }
    },
    "TMF677ProductRef": {
      "description": "Reference of a product",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product",
          "type": "string"
        },
        "publicIdentifier": {
          "description": "Public number associated to the product (msisdn number for mobile line for example)",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/TMF677RelatedPartyRef"
        }
      }
    },
    "TMF677UsageConsumptionReportRef": {
      "description": "Reference of an usage consumption report",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the usage consumption report given by the server",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink to access the usage consumption report",
          "type": "string"
        },
        "name": {
          "description": "Usage consumption report name",
          "type": "string"
        },
        "description": {
          "description": "Free short text describing the usage consumption report content",
          "type": "string"
        },
        "effectiveDate": {
          "description": "Date and time when the usage consumption report was calculated and generated",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TMF677Hub": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the hub",
          "type": "string"
        },
        "callback": {
          "description": "The callback being registered",
          "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
          "type": "string"
        }
      }
    },
    "TMF677HubInput": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics",
      "type": "object",
      "properties": {
        "callback": {
          "description": "The callback being registered",
          "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
          "type": "string"
        }
      }
    },
    "TMF678stateValue": {
      "description": "",
      "type": "string",
      "enum": [
        "new",
        "onHold",
        "validated",
        "sent",
        "partiallyPaid",
        "settled"
      ]
    },
    "TMF678StateValues": {
      "description": "",
      "type": "string",
      "enum": [
        "inProgress",
        "rejected",
        "done",
        "terminatedWithError"
      ]
    },
    "TMF678ErrorRepresentation": {
      "description": "Standard tmf error representation",
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Application related code (as defined in the API or from a common list)",
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "description": "Text that explains the reason for error. This can be shown to a client user.",
          "type": "string"
        },
        "message": {
          "description": "Text that provides more details and corrective actions related to the error. This can be shown to a client user.",
          "type": "string"
        },
        "status": {
          "description": "http error code extension like 400-2",
          "type": "string"
        },
        "referenceError": {
          "description": "url pointing to documentation describing the error",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF678CustomerBill": {
      "description": "The billing account receives all charges (recurring, one time and usage) of the offers and products assigned to it during order process. Periodically according to billing cycle specifications attached to the billing account or as a result of an event, a customer bill (aka invoice) is produced. This customer bill concerns different related parties which play a role on it : for example, a customer bill is produced by an operator, is sent to a bill receiver and has to be paid by a payer.\nA payment method could be assigned to the customer bill to build the call of payment. Lettering process enables to assign automatically or manually incoming amount from payments to customer bills (payment items).\nA tax item is created for each tax rate used in the customer bill.\nThe financial account represents a financial entity which records all customer’s accounting events : payment amount are recorded as credit and invoices amount are recorded as debit. It gives the customer overall balance (account balance).\nThe customer bill is linked to one or more documents that can be downloaded via a provided url.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of he bill",
          "type": "string"
        },
        "href": {
          "description": "Bill unique reference",
          "type": "string"
        },
        "billNo": {
          "description": "Bill reference known by the customer or the party and displayed on the bill. Could be different from the id",
          "type": "string"
        },
        "runType": {
          "description": "onCycle (a bill can be created as a result of a cycle run) or offCycle (a bill can be created as a result of other events such as customer request or account close)",
          "type": "string"
        },
        "category": {
          "description": "Category of the bill produced : normal, duplicate, interim, last, trial customer or credit note for example",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/TMF678stateValue"
        },
        "lastUpdate": {
          "description": "Date of bill last update",
          "type": "string",
          "format": "date-time"
        },
        "billDate": {
          "description": "Bill date",
          "type": "string",
          "format": "date-time"
        },
        "nextBillDate": {
          "description": "). Approximate date of  the next bill production given for information (only used for onCycle bill)",
          "type": "string",
          "format": "date-time"
        },
        "billingPeriod": {
          "$ref": "#/definitions/TMF678TimePeriod"
        },
        "amountDue": {
          "$ref": "#/definitions/TMF678Money"
        },
        "paymentDueDate": {
          "description": "Date at which the amount due should have been paid",
          "type": "string",
          "format": "date-time"
        },
        "remainingAmount": {
          "$ref": "#/definitions/TMF678Money"
        },
        "taxExcludedAmount": {
          "$ref": "#/definitions/TMF678Money"
        },
        "taxIncludedAmount": {
          "$ref": "#/definitions/TMF678Money"
        },
        "@baseType": {
          "description": "Indicates the base (class) type of the customer bill",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the customer bill",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource",
          "type": "string"
        },
        "billDocument": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF678Attachment"
          }
        },
        "appliedPayment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF678AppliedPayment"
          }
        },
        "billingAccount": {
          "$ref": "#/definitions/TMF678BillingAccountRef"
        },
        "taxItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF678TaxItem"
          }
        },
        "paymentMethod": {
          "$ref": "#/definitions/TMF678PaymentMethodRef"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF678RelatedPartyRef"
          }
        },
        "financialAccount": {
          "$ref": "#/definitions/TMF678FinancialAccountRef"
        }
      }
    },
    "TMF678TimePeriod": {
      "description": "A business entity used to represent a period between a start and an end date and time",
      "type": "object",
      "properties": {
        "startDateTime": {
          "description": "Start date and time of the period",
          "type": "string",
          "format": "date-time"
        },
        "endDateTime": {
          "description": "End date and time of the period",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TMF678Money": {
      "description": "A base / value business entity used to represent money",
      "type": "object",
      "properties": {
        "unit": {
          "description": "Currency code (ISO4217 norm uses 3 letters to define the currency).",
          "type": "string"
        },
        "value": {
          "description": "A positive floating point number",
          "type": "number",
          "format": "float"
        }
      }
    },
    "TMF678Attachment": {
      "description": "Attachment refers to extensions or additional parts that is or may be attached to something (agreements, contracts, appointments) to perform a particular function. They can be communication attachments, documents and other.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the attachment",
          "type": "string"
        },
        "href": {
          "description": "Reference of the attachment",
          "type": "string"
        },
        "name": {
          "description": "Name of the attachment",
          "type": "string"
        },
        "description": {
          "description": "Free short description of the attachment",
          "type": "string"
        },
        "mimeType": {
          "description": "Mime type of the attachment",
          "type": "string"
        },
        "sizeUnit": {
          "description": "Size unit (in bytes by default)",
          "type": "string"
        },
        "size": {
          "description": "The size  in Bytes of the document or attachment",
          "type": "number",
          "format": "float"
        },
        "url": {
          "description": "URL of the attachment",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of attachment",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource",
          "type": "string"
        }
      }
    },
    "TMF678AppliedPayment": {
      "description": "The applied payment is the result of lettering process. It enables to assign automatically or manually part of incoming payment amount to a bill.",
      "type": "object",
      "properties": {
        "appliedAmount": {
          "$ref": "#/definitions/TMF678Money"
        },
        "payment": {
          "$ref": "#/definitions/TMF678PaymentRef"
        }
      }
    },
    "TMF678BillingAccountRef": {
      "description": "BillingAccount reference. A BillingAccount is a detailed description of a bill structure.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the billing account",
          "type": "string"
        },
        "href": {
          "description": "Reference of the billing account",
          "type": "string"
        },
        "name": {
          "description": "Billing account name",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the type of the billing account",
          "type": "string"
        }
      }
    },
    "TMF678TaxItem": {
      "description": "A tax item is created for each tax rate and tax type used in the bill. The tax item specifies the applied tax rate and the total resulting amount.",
      "type": "object",
      "properties": {
        "taxCategory": {
          "description": "A tax category",
          "type": "string"
        },
        "taxRate": {
          "description": "Applied rate of the tax",
          "type": "number",
          "format": "float"
        },
        "taxAmount": {
          "$ref": "#/definitions/TMF678Money"
        }
      }
    },
    "TMF678PaymentMethodRef": {
      "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the payment method",
          "type": "string"
        },
        "href": {
          "description": "Reference of the payment method",
          "type": "string"
        },
        "name": {
          "description": "Name of the payment method",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the type of payment method",
          "type": "string"
        }
      }
    },
    "TMF678RelatedPartyRef": {
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of a related party",
          "type": "string"
        },
        "href": {
          "description": "Reference of the related party",
          "type": "string"
        },
        "name": {
          "description": "Related party name",
          "type": "string"
        },
        "role": {
          "description": "Role played by the related party",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the type of related party",
          "type": "string"
        }
      }
    },
    "TMF678FinancialAccountRef": {
      "description": "Financial account reference. An account of money owed by a party to another entity in exchange for goods or services that have been delivered or used. A finacial account aggregates the amounts of one or more party accounts (billing or settlement) owned by a given party.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the account",
          "type": "string"
        },
        "href": {
          "description": "Unique reference of the account",
          "type": "string"
        },
        "name": {
          "description": "Account name",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the type of the financial account",
          "type": "string"
        }
      }
    },
    "TMF678PaymentRef": {
      "description": "A payment reference",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the payment",
          "type": "string"
        },
        "href": {
          "description": "Reference of the payment",
          "type": "string"
        },
        "paymentDate": {
          "description": "Payment date",
          "type": "string",
          "format": "date-time"
        },
        "amount": {
          "$ref": "#/definitions/TMF678Money"
        },
        "@referredType": {
          "description": "Indicates the type of payment",
          "type": "string"
        }
      }
    },
    "TMF678CustomerBillUpdate": {
      "description": "",
      "required": [
        "state"
      ],
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/TMF678stateValue"
        }
      }
    },
    "TMF678AppliedCustomerBillingRate": {
      "description": "A customer bill displays applied billing rates created before or during the billing process.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the customer applied billing rate",
          "type": "string"
        },
        "href": {
          "description": "Reference of the customer applied billing rate",
          "type": "string"
        },
        "type": {
          "description": "Type of the applied billing rate : appliedBillingCharge (any kind of charge except taxation charges : recurringCharge, oneTimeCharge, usageCharge),  appliedBillingCredit (any kind of credit : rebate or productAlteration) or appliedPenaltyCharge (penalty charges such as late fees, payment rejection fees,...)",
          "type": "string"
        },
        "date": {
          "description": "Creation date of the applied billing rate",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Name of the customer applied billing rate",
          "type": "string"
        },
        "description": {
          "description": "Additional data to be displayed on the bill for this customer applied billing rate",
          "type": "string"
        },
        "taxExcludedAmount": {
          "$ref": "#/definitions/TMF678Money"
        },
        "taxIncludedAmount": {
          "$ref": "#/definitions/TMF678Money"
        },
        "@baseType": {
          "description": "Indicates the base (class) type of the applied customer billing rate",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the applied customer billing rate",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource",
          "type": "string"
        },
        "appliedTax": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF678AppliedBillingTaxRate"
          }
        },
        "bill": {
          "$ref": "#/definitions/TMF678BillRef"
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF678AppliedBillingRateCharacteristic"
          }
        }
      }
    },
    "TMF678AppliedBillingTaxRate": {
      "description": "The applied billing tax rate represents taxes applied billing rate it refers to. It is calculated during the billing process.",
      "required": [
        "taxAmount"
      ],
      "type": "object",
      "properties": {
        "taxCategory": {
          "description": "A categorization of the tax rate",
          "type": "string"
        },
        "taxRate": {
          "description": "Applied rate",
          "type": "number",
          "format": "float"
        },
        "taxAmount": {
          "$ref": "#/definitions/TMF678Money"
        }
      }
    },
    "TMF678BillRef": {
      "description": "Bill reference",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the bill",
          "type": "string"
        },
        "href": {
          "description": "Reference of the bill",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the bill",
          "type": "string"
        }
      }
    },
    "TMF678AppliedBillingRateCharacteristic": {
      "description": "An applied billing rate has dynamic characteristics according to the its type (characteristics are based on the service type, line of business or on others parameters)",
      "type": "object",
      "properties": {
        "name": {
          "description": "Characteristic name",
          "type": "string"
        },
        "value": {
          "description": "Value affected to the characteristic",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the characteristic",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource",
          "type": "string"
        }
      }
    },
    "TMF678CustomerBillOnDemand": {
      "description": "This resource is used to manage the creation request of a customer bill in real-time (on demand).",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the customer bill on demand request given by the server",
          "type": "string"
        },
        "href": {
          "description": "Reference of the customer bill on demand request",
          "type": "string"
        },
        "name": {
          "description": "Friendly name to identify the customer bill on demand request",
          "type": "string"
        },
        "description": {
          "description": "Additional data describing the customer bill on demand request",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/TMF678StateValues"
        },
        "lastUpdate": {
          "description": "The last date time when the customer bill on demand has been updated",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the customer bill on demand request",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing the REST resource",
          "type": "string"
        },
        "billingAccount": {
          "$ref": "#/definitions/TMF678BillingAccountRef"
        },
        "relatedParty": {
          "$ref": "#/definitions/TMF678RelatedPartyRef"
        },
        "customerBill": {
          "$ref": "#/definitions/TMF678BillRef"
        }
      }
    },
    "TMF678CustomerBillOnDemandRequest": {
      "description": "",
      "type": "object",
      "properties": {
        "name": {
          "description": "Friendly name to identify the customer bill on demand request",
          "type": "string"
        },
        "description": {
          "description": "Additional data describing the customer bill on demand request",
          "type": "string"
        },
        "billingAccount": {
          "$ref": "#/definitions/TMF678BillingAccountRef"
        },
        "relatedParty": {
          "$ref": "#/definitions/TMF678RelatedPartyRef"
        }
      }
    },
    "TMF678Hub": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the hub",
          "type": "string"
        },
        "callback": {
          "description": "The callback being registered",
          "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
          "type": "string"
        }
      }
    },
    "TMF678HubInput": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics",
      "type": "object",
      "properties": {
        "callback": {
          "description": "The callback being registered",
          "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
          "type": "string"
        }
      }
    },
    "TMF679ErrorRepresentation": {
      "description": "Error representation",
      "required": [
        "code",
        "reason"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "description": "",
          "type": "string"
        },
        "message": {
          "description": "",
          "type": "string"
        },
        "status": {
          "description": "",
          "type": "string"
        },
        "referenceError": {
          "description": "",
          "type": "string"
        },
        "@type": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF679ChannelRef": {
      "description": "The channel defines the channel for selling product offerings.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the channel",
          "type": "string"
        },
        "href": {
          "description": "Reference of the channel",
          "type": "string"
        },
        "name": {
          "description": "Name of the channel.",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of channel",
          "type": "string"
        }
      }
    },
    "TMF679ProductOfferingRef": {
      "description": "A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product offering.",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product offering.",
          "type": "string"
        },
        "name": {
          "description": "Name of the product offering.",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicate the class (type) of product offering",
          "type": "string"
        }
      }
    },
    "TMF679ProductSpecificationRef": {
      "description": "A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product specification",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product specification",
          "type": "string"
        },
        "version": {
          "description": "Version of the product specification",
          "type": "string"
        },
        "name": {
          "description": "Name of the product specification",
          "type": "string"
        },
        "@referredType": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF679ProductCharacteristic": {
      "description": "Characteristics of the product to instantiate or to modify",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the characteristic",
          "type": "string"
        },
        "value": {
          "description": "Value of the characteristic",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "This field provided a link to the schema describing this REST resource.",
          "type": "string"
        }
      }
    },
    "TMF679Place": {
      "description": "Describe a place (using either geographicAddress or GeographicLocation) and/or identify an existing place (either an existing geographicAddress or existing GeographicLocation or existing GeographicSite) through its id.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Must be a geographicAddress id or GeographicLocation id or GeographicSite id",
          "type": "string"
        },
        "href": {
          "description": "Href of a place",
          "type": "string"
        },
        "name": {
          "description": "Name of the place",
          "type": "string"
        },
        "role": {
          "description": "Role of the place - could be' installation place' for example",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of place",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource.",
          "type": "string"
        }
      }
    },
    "TMF679QualificationItemRelationship": {
      "description": "Used to describe link(s) to other items to the one qualified.",
      "required": [
        "type",
        "id"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of relationship (ex: reliesOn, connectedTo, etc...).",
          "type": "string"
        },
        "id": {
          "description": "Id of the ProductOfferingQualificationItem (from the same ProductOfferingQualificationItem).",
          "type": "string"
        }
      }
    },
    "TMF679CategoryRef": {
      "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the category",
          "type": "string"
        },
        "href": {
          "description": "Unique reference of the category",
          "type": "string"
        },
        "version": {
          "description": "Category Version",
          "type": "string"
        },
        "name": {
          "description": "Name of the category.",
          "type": "string"
        },
        "@referredType": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TMF679TerminationError": {
      "description": "If the qualifcationItem has not been done properly we indicate there the termination error(s).",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the termination error",
          "type": "string"
        },
        "value": {
          "description": "Text to describe the termination error (Unable to proceed to qualification because incomplete information provided).",
          "type": "string"
        }
      }
    },
    "TMF679RelatedPartyRef": {
      "description": "A related party defines party or party role linked to a specific entity.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of a related party",
          "type": "string"
        },
        "href": {
          "description": "Reference of the related party, could be a party reference or a party role reference.",
          "type": "string"
        },
        "role": {
          "description": "Role of the related party.",
          "type": "string"
        },
        "name": {
          "description": "Name of the related party.",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the base (class) type of the party.",
          "type": "string"
        }
      }
    },
    "TMF679EligibilityUnavailabilityReason": {
      "description": "Reason for eligibility result if the productOfferingQualification result is no (meaning the productOffering or productSpec is not available).",
      "type": "object",
      "properties": {
        "code": {
          "description": "Unavailability reason code",
          "type": "string"
        },
        "label": {
          "description": "Unavailability reason label",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the unavailability reason",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "TMF679AlternateProductOfferingProposal": {
      "description": "Alternate product Offering proposal is used when the requested product offering is not available with characteristic and date asked for. An alternate proposal could be a distinct product offering or product Spec close to requested one or same as requested but with a different activation date.",
      "required": [
        "id",
        "alternateActivationDate"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of a alternate product offering proposal.",
          "type": "string"
        },
        "alternateActivationDate": {
          "description": "Alternate activation date in case seller is not able to meet requested expected activation date.",
          "type": "string",
          "format": "date-time"
        },
        "@type": {
          "description": "Indicates the (class) type of alternate product offering proposal.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource",
          "type": "string"
        },
        "alternateProductSpecification": {
          "description": "A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "alternateProductOffering": {
          "description": "A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TMF679Product": {
      "description": "Configure the product characteristics (only configurable characteristics and necessary only if a non default value is selected) and/or identify the product that needs to be modified/deleted.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product.",
          "type": "string"
        },
        "name": {
          "description": "Name of the product.",
          "type": "string"
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF679Place"
          }
        },
        "productRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF679ProductRelationship"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF679ProductCharacteristic"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF679RelatedPartyRef"
          }
        },
        "productSpecification": {
          "$ref": "#/definitions/TMF679ProductSpecificationRef"
        }
      }
    },
    "TMF679ProductRelationship": {
      "description": "Used to describe link(s) to product(s) to the one qualified.",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of the product relationship. It can be :\n\n     - \"bundled\" if the product is a bundle and you want to describe the 'bundled' products inside this bundle\n     -  'reliesOn' if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product)\n\n'targets' or 'isTargete' (depending on the way of expressing the link) for any other kind of links that may be useful.",
          "type": "string"
        },
        "productRefOrValue": {
          "$ref": "#/definitions/TMF679Product"
        }
      }
    },
    "TMF679ProductOfferingQualificationItem": {
      "description": "An item of a productOfferingQualification.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the productOfferingQualification item.",
          "type": "string"
        },
        "state": {
          "description": "State of the productOfferingQualification item (acknowledged, inProgress, terminatedWithError, done).",
          "type": "string"
        },
        "expectedActivationDate": {
          "description": "Date when the requester look for productOfferingQualification activation.",
          "type": "string",
          "format": "date-time"
        },
        "qualificationItemResult": {
          "description": "Qualification result for this productOfferingQualification item. It could be:\n\n     -  qualified (request productOffering or productSpecification are available), \n     - unqualified (requested not available and not alternate available),\n     - alternate (requested not available but proposal available)",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the productOfferingQualificationItem.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to schema describing this REST resource.",
          "type": "string"
        },
        "eligibilityUnavailabilityReason": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF679EligibilityUnavailabilityReason"
          }
        },
        "category": {
          "$ref": "#/definitions/TMF679CategoryRef"
        },
        "qualificationItemRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF679QualificationItemRelationship"
          }
        },
        "product": {
          "$ref": "#/definitions/TMF679Product"
        },
        "productOffering": {
          "$ref": "#/definitions/TMF679ProductOfferingRef"
        },
        "terminationError": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF679TerminationError"
          }
        },
        "alternateProductOfferingProposal": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF679AlternateProductOfferingProposal"
          }
        }
      }
    },
    "TMF679POST_REQ_ProductOfferingQualificationItem": {
      "description": "",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the productOfferingQualification item.",
          "type": "string"
        },
        "expectedActivationDate": {
          "description": "Date when the requester look for productOfferingQualification activation.",
          "type": "string",
          "format": "date-time"
        },
        "@type": {
          "description": "Indicates the (class) type of the productOfferingQualificationItem.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to schema describing this REST resource.",
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/TMF679CategoryRef"
        },
        "qualificationItemRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF679QualificationItemRelationship"
          }
        },
        "product": {
          "$ref": "#/definitions/TMF679Product"
        },
        "productOffering": {
          "$ref": "#/definitions/TMF679ProductOfferingRef"
        }
      }
    },
    "TMF679ProductOfferingQualification": {
      "description": "ProductOfferingQualification is used to perform a commercial eligibility. It allows to retrieve a list of productOffering that are commercially available in the context of the interaction (defined be place, channel, party, product).",
      "required": [
        "relatedParty",
        "productOfferingQualificationItem"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the productOfferingQualification resource.",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink to access the productOfferingQualification",
          "type": "string"
        },
        "productOfferingQualificationDateTime": {
          "description": "Date when the productOfferingQualification has been submitted.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "Description of the productOfferingQualifcation",
          "type": "string"
        },
        "state": {
          "description": "State of the productOfferingQualification (acknowledged, inProgress, terminatedWithError, done).",
          "type": "string"
        },
        "qualificationResult": {
          "description": "Qualification result for this productOfferingQualification. It could be:\n-  qualified (all qualification item are qualified), - alternate (At least one item alternate and no item with unqualified) ,\n- unqualified (At least one item unqualified)",
          "type": "string"
        },
        "expectedQualificationDate": {
          "description": "Deadline date when the requester expected a qualification answer.",
          "type": "string",
          "format": "date-time"
        },
        "estimatedResponseDate": {
          "description": "Date when the requester expect to provide an answer for the qualification request.",
          "type": "string",
          "format": "date-time"
        },
        "effectiveQualificationDate": {
          "description": "Effective date to productOfferingQualification completion.",
          "type": "string",
          "format": "date-time"
        },
        "expirationDate": {
          "description": "Date the qualification response expires",
          "type": "string",
          "format": "date-time"
        },
        "provideAlternative": {
          "description": "An indicator which when the value is \"true\" means that alternative solutions should be provided.",
          "type": "boolean"
        },
        "provideOnlyAvailable": {
          "description": "An indicator which when the value is \"true\" means that only available product offering must be listed in the response.",
          "type": "boolean"
        },
        "provideUnavailabilityReason": {
          "description": "An indicator which when the value is \"true\" means that unavailability reason are expected for non available product offering.",
          "type": "boolean"
        },
        "@baseType": {
          "description": "Indicates the base type of the resource. Here can be 'ProductOfferingQualification'.",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of resource. Here can be 'ProductOfferingQualification'.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to schema describing this REST resource",
          "type": "string"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF679RelatedPartyRef"
          }
        },
        "channel": {
          "$ref": "#/definitions/TMF679ChannelRef"
        },
        "productOfferingQualificationItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF679ProductOfferingQualificationItem"
          }
        }
      }
    },
    "TMF679POST_REQ_ProductOfferingQualification": {
      "description": "",
      "required": [
        "relatedParty",
        "productOfferingQualificationItem"
      ],
      "type": "object",
      "properties": {
        "description": {
          "description": "Description of the productOfferingQualifcation",
          "type": "string"
        },
        "expectedQualificationDate": {
          "description": "Deadline date when the requester expected a qualification answer.",
          "type": "string",
          "format": "date-time"
        },
        "provideAlternative": {
          "description": "An indicator which when the value is \"true\" means that alternative solutions should be provided.",
          "type": "boolean"
        },
        "provideOnlyAvailable": {
          "description": "An indicator which when the value is \"true\" means that only available product offering must be listed in the response.",
          "type": "boolean"
        },
        "provideUnavailabilityReason": {
          "description": "An indicator which when the value is \"true\" means that unavailability reason are expected for non available product offering.",
          "type": "boolean"
        },
        "@baseType": {
          "description": "Indicates the base type of the resource. Here can be 'ProductOfferingQualification'.",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of resource. Here can be 'ProductOfferingQualification'.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to schema describing this REST resource",
          "type": "string"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF679RelatedPartyRef"
          }
        },
        "channel": {
          "$ref": "#/definitions/TMF679ChannelRef"
        },
        "productOfferingQualificationItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF679POST_REQ_ProductOfferingQualificationItem"
          }
        }
      }
    },
    "TMF679Hub": {
      "description": "An HUB resource is used by client side to subscribe to POQ notification(s).",
      "required": [
        "callback"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "identifier of the HUB subscription",
          "type": "string"
        },
        "query": {
          "description": "Used to specify notification type + additional parameters",
          "type": "string"
        },
        "callback": {
          "description": "This is the URL where server side must POST event when notification is triggered",
          "type": "string"
        }
      }
    },
    "TMF680Recommendation": {
      "type": "object",
      "description": "Recommendation API is used to recommend offering quickly based on the history and real-time context of customer. It is a real-time and personalized recommendation API. It is usually provided by e-commerce or BSS, CRM system in omni-channel.",
      "properties": {
        "description": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "description": "Hypertext Reference of the recommendation."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of recommendation"
        },
        "name": {
          "type": "string",
          "description": "Name of recommendation"
        },
        "type": {
          "type": "string",
          "description": "Type of recommendation.\nThe basic type is :\n¡®AD¡¯: it means the recommendation is the advertisement for display\n¡®OFFER¡¯: it means the recommended content is the offer entry page. By clicking it, the user can be forwarded to the details of the offering"
        },
        "validFor": {
          "$ref": "#/definitions/TMF680TimePeriod",
          "description": "The period in which the recommendation is valid."
        },
        "order": {
          "$ref": "#/definitions/TMF680ProductOrderRef"
        },
        "location": {
          "$ref": "#/definitions/TMF680Place",
          "description": "The place which the recommendation is related with"
        },
        "channel": {
          "$ref": "#/definitions/TMF680ChannelRef"
        },
        "category": {
          "$ref": "#/definitions/TMF680CategoryRef",
          "description": "The category for grouping recommendations"
        },
        "shoppingCart": {
          "$ref": "#/definitions/TMF680ShoppingCartRef",
          "description": "The shopping cart which the recommendation is related with."
        },
        "relatedParty": {
          "$ref": "#/definitions/TMF680RelatedPartyRef"
        },
        "item": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF680RecommendationItem"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF680TimePeriod": {
      "type": "object",
      "description": "A base / value business entity used to represent a period of time between two timepoints.",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, ending at the TimePeriod."
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, starting at the TimePeriod"
        }
      }
    },
    "TMF680ProductOrderRef": {
      "type": "object",
      "description": "ProductOrder (ProductOrder) .The product order which the recommendation is related with.",
      "properties": {
        "href": {
          "type": "string",
          "description": "Hypertext Reference of the product order."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of product order"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF680Place": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF680ChannelRef": {
      "type": "object",
      "description": "Channel(ChannelRef)The channel where the recommendation is used. May be online web, mobile app, social ,etc.",
      "properties": {
        "href": {
          "type": "string",
          "description": "Hypertext Reference of the channel."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of channel"
        },
        "name": {
          "type": "string",
          "description": "Name of the channel."
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF680CategoryRef": {
      "type": "object",
      "description": "The category for grouping recommendations",
      "properties": {
        "href": {
          "type": "string",
          "description": "Hypertext Reference of the category"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of category"
        },
        "name": {
          "type": "string",
          "description": "Name of the category."
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF680ShoppingCartRef": {
      "type": "object",
      "description": "ShoppingCart (ShoppingCartRef) . The shopping cart which the recommendation is related with.",
      "properties": {
        "href": {
          "type": "string",
          "description": "Hypertext Reference of the shopping cart."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of shopping cart"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF680RelatedPartyRef": {
      "type": "object",
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
      "properties": {
        "href": {
          "type": "string",
          "description": "Reference of the related party, could be a party reference or a party role reference"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related party"
        },
        "name": {
          "type": "string",
          "description": "Name of the related party"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party."
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF680RecommendationItem": {
      "type": "object",
      "description": "A list of recommendation items. Every item is a product offering and its rank.",
      "properties": {
        "priority": {
          "type": "integer",
          "description": "The rank of the list of recommended offering."
        },
        "offering": {
          "$ref": "#/definitions/TMF680ProductOfferingRef",
          "description": "Recommended product offering"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF680ProductOfferingRef": {
      "type": "object",
      "description": "ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
      "properties": {
        "href": {
          "type": "string",
          "description": "Reference of the product offering"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the product offering"
        },
        "name": {
          "type": "string",
          "description": "Name of the product offering"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF680EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF680EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF680Error": {
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "Application related code."
        },
        "reason": {
          "type": "integer",
          "description": "Text that explains the reason for error."
        },
        "message": {
          "type": "string",
          "description": "(optional) Text that provide more details and corrective actions related to the error."
        },
        "status": {
          "type": "integer",
          "description": "(optional) http error code extension like 400-2"
        },
        "referenceError": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        },
        "@type": {
          "type": "string",
          "description": "(optional) The class type of a REST resource."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "(optional) A link to the schema describing a REST resource."
        }
      }
    },
    "TMF681CommunicationMessage": {
      "type": "object",
      "description": "Communication message means a notification approach in the format of a message which can be dispatched (sent) to the certain user by the system with the content which can be felt and understood by the recipient. The user can be either a final customer or a customer service agent. The message can reach the customer in different interaction channels, including: email, short message, mobile app notification (push).",
      "required": [
        "type",
        "content",
        "sender",
        "receiver"
      ],
      "properties": {
        "callbackFlag": {
          "type": "boolean"
        },
        "content": {
          "type": "string",
          "description": "The content of the communication message."
        },
        "description": {
          "type": "string",
          "description": "Description for the whole object"
        },
        "href": {
          "type": "string",
          "description": "Hypertext Reference of the Communication Message."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of Communication Message"
        },
        "logFlag": {
          "type": "boolean"
        },
        "priority": {
          "type": "string",
          "description": "The priority of the communication message.\nSmall number means higher priority."
        },
        "sendTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of sending communication message."
        },
        "sendTimeComplete": {
          "type": "string",
          "format": "date-time",
          "description": "The time of completion of sending communication message."
        },
        "status": {
          "type": "string",
          "description": "Status of communication message"
        },
        "subject": {
          "type": "string",
          "description": "The title of the message. \nIt is necessary for the email and mobile app push."
        },
        "tryTimes": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "description": "1: SMS\n2: Email\n3: Mobile app push notification"
        },
        "version": {
          "type": "string",
          "description": "The version of the communication message"
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF681Attachment"
          }
        },
        "receiver": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF681Receiver"
          }
        },
        "sender": {
          "$ref": "#/definitions/TMF681Sender"
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF681CommunicationRequestCharacteristic"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF681CommunicationMessage_Create": {
      "type": "object",
      "description": "Communication message means a notification approach in the format of a message which can be dispatched (sent) to the certain user by the system with the content which can be felt and understood by the recipient. The user can be either a final customer or a customer service agent. The message can reach the customer in different interaction channels, including: email, short message, mobile app notification (push).\nSkipped properties: id,href",
      "required": [
        "type",
        "content",
        "sender",
        "receiver"
      ],
      "properties": {
        "callbackFlag": {
          "type": "boolean"
        },
        "content": {
          "type": "string",
          "description": "The content of the communication message."
        },
        "description": {
          "type": "string",
          "description": "Description for the whole object"
        },
        "logFlag": {
          "type": "boolean"
        },
        "priority": {
          "type": "string",
          "description": "The priority of the communication message.\nSmall number means higher priority."
        },
        "sendTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of sending communication message."
        },
        "sendTimeComplete": {
          "type": "string",
          "format": "date-time",
          "description": "The time of completion of sending communication message."
        },
        "status": {
          "type": "string",
          "description": "Status of communication message"
        },
        "subject": {
          "type": "string",
          "description": "The title of the message. \nIt is necessary for the email and mobile app push."
        },
        "tryTimes": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "description": "1: SMS\n2: Email\n3: Mobile app push notification"
        },
        "version": {
          "type": "string",
          "description": "The version of the communication message"
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF681Attachment"
          }
        },
        "receiver": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF681Receiver"
          }
        },
        "sender": {
          "$ref": "#/definitions/TMF681Sender"
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF681CommunicationRequestCharacteristic"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF681CommunicationMessage_Update": {
      "type": "object",
      "description": "Communication message means a notification approach in the format of a message which can be dispatched (sent) to the certain user by the system with the content which can be felt and understood by the recipient. The user can be either a final customer or a customer service agent. The message can reach the customer in different interaction channels, including: email, short message, mobile app notification (push).\nSkipped properties: id,href,id,href",
      "properties": {
        "callbackFlag": {
          "type": "boolean"
        },
        "content": {
          "type": "string",
          "description": "The content of the communication message."
        },
        "description": {
          "type": "string",
          "description": "Description for the whole object"
        },
        "logFlag": {
          "type": "boolean"
        },
        "priority": {
          "type": "string",
          "description": "The priority of the communication message.\nSmall number means higher priority."
        },
        "sendTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of sending communication message."
        },
        "sendTimeComplete": {
          "type": "string",
          "format": "date-time",
          "description": "The time of completion of sending communication message."
        },
        "status": {
          "type": "string",
          "description": "Status of communication message"
        },
        "subject": {
          "type": "string",
          "description": "The title of the message. \nIt is necessary for the email and mobile app push."
        },
        "tryTimes": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "description": "1: SMS\n2: Email\n3: Mobile app push notification"
        },
        "version": {
          "type": "string",
          "description": "The version of the communication message"
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF681Attachment"
          }
        },
        "receiver": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF681Receiver"
          }
        },
        "sender": {
          "$ref": "#/definitions/TMF681Sender"
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF681CommunicationRequestCharacteristic"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF681Attachment": {
      "type": "object",
      "description": "Complements the description of an element (for instance a product) through video, pictures...",
      "properties": {
        "description": {
          "type": "string",
          "description": "A narrative text describing the content of the attachment"
        },
        "href": {
          "type": "string",
          "description": "Reference of the attachment"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the attachment"
        },
        "mimeType": {
          "type": "string",
          "description": "The mime type of the document as defined in RFC 2045 and RFC 2046 specifications."
        },
        "name": {
          "type": "string",
          "description": "The name of the file"
        },
        "path": {
          "type": "string",
          "description": "The path of the attached file"
        },
        "size": {
          "type": "integer",
          "description": "The size of the file (sizeUnit if present indicates the unit, otherwise kilobytes is the default)."
        },
        "sizeUnit": {
          "type": "integer",
          "description": "The unit size for expressing the size of the file (MB,kB...)"
        },
        "url": {
          "type": "string",
          "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
        },
        "validFor": {
          "$ref": "#/definitions/TMF681TimePeriod",
          "description": "Period of validity of the attachment"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "TMF681Receiver": {
      "type": "object",
      "description": "<b><i>Receivers of the communication message.</i></b>",
      "required": [
        "id"
      ],
      "properties": {
        "appUserId": {
          "type": "string",
          "description": "ID of the mobile app user"
        },
        "email": {
          "type": "string",
          "description": "Receiver address of email, if the communication type is email"
        },
        "id": {
          "type": "string",
          "description": "ID of the receiver"
        },
        "ip": {
          "type": "string",
          "description": "IP address of the receiver"
        },
        "name": {
          "type": "string",
          "description": "Name of the receiver"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the receiver, if the communication type is SMS."
        },
        "type": {
          "type": "string",
          "description": "The type of the receiver of the communication message"
        },
        "relatedParty": {
          "$ref": "#/definitions/TMF681RelatedPartyRef"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        }
      }
    },
    "TMF681Sender": {
      "type": "object",
      "description": "<b><i>Sender of the communication message.</i></b>",
      "required": [
        "id"
      ],
      "properties": {
        "email": {
          "type": "string",
          "description": "Sender address of email, if the communication type is email"
        },
        "id": {
          "type": "string",
          "description": "ID of the sender"
        },
        "name": {
          "type": "string",
          "description": "Name of the sender"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the sender, if the communication type is SMS."
        },
        "relatedParty": {
          "$ref": "#/definitions/TMF681RelatedPartyRef"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        }
      }
    },
    "TMF681CommunicationRequestCharacteristic": {
      "type": "object",
      "description": "<b><i>The values of parameters which are used in the content if the content contains them.</i></b>",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Content parameter identifier"
        },
        "value": {
          "type": "string",
          "description": "Content parameter value"
        }
      }
    },
    "TMF681TimePeriod": {
      "type": "object",
      "description": "A base / value business entity used to represent a period of time between two timepoints.",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, ending at the TimePeriod."
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "An instant of time, starting at the TimePeriod"
        }
      }
    },
    "TMF681RelatedPartyRef": {
      "type": "object",
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
      "properties": {
        "href": {
          "type": "string",
          "description": "Reference of the related party, could be a party reference or a party role reference"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related party"
        },
        "name": {
          "type": "string",
          "description": "Name of the related party"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party."
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TMF681EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF681EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "TMF681Error": {
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "Application related code."
        },
        "reason": {
          "type": "integer",
          "description": "Text that explains the reason for error."
        },
        "message": {
          "type": "string",
          "description": "(optional) Text that provide more details and corrective actions related to the error."
        },
        "status": {
          "type": "integer",
          "description": "(optional) http error code extension like 400-2"
        },
        "referenceError": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        },
        "@type": {
          "type": "string",
          "description": "(optional) The class type of a REST resource."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "(optional) A link to the schema describing a REST resource."
        }
      }
    },
    "TMF683PartyInteractionRequestType": {
      "properties": {
        "@baseType": {
          "description": "Base Type of interaction",
          "type": "string"
        },
        "@type": {
          "description": "Type of interaction. E.g: phone call, sms, store, kiosk, mobile app, chat...",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Where to query the model schema",
          "type": "string"
        },
        "interactionDate": {
          "description": "Time interval when the interaction took place",
          "$ref": "#/definitions/TMF683TimePeriodType"
        },
        "description": {
          "type": "string",
          "description": "Human readable summary of the interaction"
        },
        "reason": {
          "type": "string",
          "description": "Why the interaction tooke place"
        },
        "status": {
          "type": "string",
          "description": "Interaction status"
        },
        "subStatus": {
          "description": "Interaction subStatus",
          "type": "string"
        },
        "statusChangeDate": {
          "description": "last time the interaction changed",
          "type": "string",
          "format": "date-time"
        },
        "direction": {
          "description": "Who started the interaction, the party proactively going to a store or calling our call center, or the company sending a promotion SMS, calling him or sending him a letter with the bill",
          "type": "string",
          "enum": [
            "inbounds",
            "outbounds"
          ]
        },
        "channel": {
          "description": "channel where the interaction took place",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF683ChannelRefType"
          }
        },
        "relatedParty": {
          "description": "channel where the interaction took place",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF683RelatedPartyType"
          }
        },
        "interactionItem": {
          "description": "items referred during the interaction (e.g.: purchases, tickets...)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF683InteractionItemType"
          }
        }
      },
      "required": [
        "interactionDate"
      ]
    },
    "TMF683PartyInteractionType": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "unique identifier of the party interaction"
            },
            "href": {
              "type": "string",
              "description": "URI where to query and perform operations on the interaction"
            }
          },
          "required": [
            "id",
            "href"
          ]
        },
        {
          "$ref": "#/definitions/TMF683PartyInteractionRequestType"
        }
      ]
    },
    "TMF683ChannelRefType": {
      "description": "Reference to a channel that can be queried with an API call.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the channel"
        },
        "href": {
          "type": "string",
          "description": "URI where to query or perform actions on the channel"
        },
        "name": {
          "type": "string",
          "description": "Screen name of the channel"
        },
        "description": {
          "type": "string",
          "description": "Description of the channel"
        }
      },
      "required": [
        "id",
        "href"
      ]
    },
    "TMF683RelatedPartyType": {
      "description": "Reference to an external party that can be tipically queried with another API",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the party"
        },
        "href": {
          "type": "string",
          "description": "URI where to query or perform actions on the party"
        },
        "@referredType": {
          "type": "string",
          "description": "Type of party (e.g.: customer, agent, etc.)"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party"
        },
        "name": {
          "type": "string",
          "description": "Screen name of the party"
        }
      },
      "required": [
        "id",
        "@referredType"
      ]
    },
    "TMF683InteractionItemType": {
      "description": "Item that was referred during the interaction",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the item"
        },
        "href": {
          "type": "string",
          "description": "URI where to query or perform actions on the item"
        },
        "@referredType": {
          "type": "string",
          "description": "Type of item (e.g.: order, ticket, etc.)"
        },
        "itemDate": {
          "type": "string",
          "format": "date-time",
          "description": "When the item was referred"
        },
        "resolution": {
          "type": "string",
          "description": "item resolution"
        },
        "item": {
          "$ref": "#/definitions/TMF683RelatedEntityRefType"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF683NoteType"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF683AttachmentType"
          }
        }
      }
    },
    "TMF683RelatedEntityRefType": {
      "description": "Reference to an external entity that can be tipically queried with another API such as a customer account, a ticket, etc.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the entity"
        },
        "href": {
          "type": "string",
          "description": "URI where to query or perform actions on the entity"
        },
        "@referredType": {
          "type": "string",
          "description": "Type of entity (e.g.: account, ticket, etc.)"
        },
        "name": {
          "type": "string",
          "description": "Screen name of the entity"
        },
        "role": {
          "type": "string",
          "description": "Role of the entity"
        }
      },
      "required": [
        "id",
        "@referredType"
      ]
    },
    "TMF683NoteType": {
      "description": "A note attached to something.",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "author": {
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "TMF683AttachmentType": {
      "description": "An attachment attached to something.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the attachment"
        },
        "href": {
          "type": "string",
          "description": "URI where to query or perform actions on the attachment"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "mimeType": {
          "type": "string"
        },
        "size": {
          "type": "number",
          "format": "decimal"
        },
        "sizeUnit": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TMF683TimePeriodType"
        }
      }
    },
    "TMF683TimePeriodType": {
      "properties": {
        "startDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "endDateTime": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "startDateTime"
      ]
    },
    "TMF684TrackingRequestType": {
      "properties": {
        "carrier": {
          "type": "string",
          "description": "Carrier that is performing the shipment"
        },
        "trackingCode": {
          "type": "string",
          "description": "Tracking code in the carrier network"
        },
        "carrierTrackingUrl": {
          "type": "string",
          "description": "URL to a public page provided by the carrier that shows tracking details for this tracker"
        },
        "trackingDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the shipment began to be tracked"
        },
        "status": {
          "type": "string",
          "description": "Current status of the package"
        },
        "statusChangeDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the tracking status last changed"
        },
        "statusChangeReason": {
          "type": "string",
          "description": "Text describing the reason for the status of the tracking"
        },
        "weight": {
          "type": "number",
          "format": "decimal",
          "description": "Weight of the package in grams"
        },
        "estimatedDeliveryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Estimated deliveryDate"
        },
        "addressFrom": {
          "$ref": "#/definitions/TMF684AddressType"
        },
        "addressTo": {
          "$ref": "#/definitions/TMF684AddressType"
        },
        "checkpoint": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF684CheckpointType"
          }
        },
        "order": {
          "description": "Order that triggered this shipment",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF684OrderRefType"
          }
        }
      },
      "required": [
        "status",
        "carrier",
        "addressTo",
        "trackingDate"
      ]
    },
    "TMF684TrackingDetailsType": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the shipment"
        },
        "href": {
          "type": "string",
          "description": "Reference to the shipment to be queried or to perform actions on it via API"
        },
        "carrier": {
          "type": "string",
          "description": "Carrier that is performing the shipment"
        },
        "trackingCode": {
          "type": "string",
          "description": "Tracking code in the carrier network"
        },
        "carrierTrackingUrl": {
          "type": "string",
          "description": "URL to a public page provided by the carrier that shows tracking details for this tracker"
        },
        "trackingDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the shipment began to be tracked"
        },
        "status": {
          "type": "string",
          "description": "Current status of the package"
        },
        "statusChangeDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the tracking status last changed"
        },
        "statusChangeReason": {
          "type": "string",
          "description": "Text describing the reason for the status of the tracking"
        },
        "weight": {
          "type": "number",
          "format": "decimal",
          "description": "Weight of the package in grams"
        },
        "estimatedDeliveryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Estimated deliveryDate"
        },
        "addressFrom": {
          "$ref": "#/definitions/TMF684AddressType"
        },
        "addressTo": {
          "$ref": "#/definitions/TMF684AddressType"
        },
        "checkpoint": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF684CheckpointType"
          }
        },
        "order": {
          "description": "Order that triggered this shipment",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF684OrderRefType"
          }
        }
      },
      "required": [
        "id",
        "href",
        "status",
        "carrier",
        "addressTo",
        "trackingDate"
      ]
    },
    "TMF684OrderRefType": {
      "description": "Reference to an order that can typically be queried with another API.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the order"
        },
        "href": {
          "type": "string",
          "description": "URI where to query or perform actions on the order"
        },
        "name": {
          "type": "string",
          "description": "Screen name of the order"
        },
        "@referredType": {
          "type": "string",
          "description": "Type of the referred order in case it is polymorphic"
        }
      },
      "required": [
        "id",
        "href"
      ]
    },
    "TMF684AddressType": {
      "description": "Information describing a postal address",
      "properties": {
        "streetNr": {
          "type": "string",
          "description": "The street number"
        },
        "streetNrSuffix": {
          "type": "string",
          "description": "Suffix of the street number"
        },
        "streetNrLast": {
          "type": "string",
          "description": "Use it in case the address covers a range of numbers in a street. The range will be limited by streetNr and this field"
        },
        "streetNrLastSuffix": {
          "type": "string",
          "description": "Suffix of the last street number"
        },
        "streetName": {
          "type": "string",
          "description": "Name of the street (e.g.: Gran V�a)"
        },
        "streetType": {
          "type": "string",
          "description": "Type of street (e.g.: Street, Calle, Square, Avenue, Platz, etc.)"
        },
        "streetSuffix": {
          "type": "string",
          "description": "Suffix of the street"
        },
        "postcode": {
          "type": "string",
          "description": "Postal code"
        },
        "locality": {
          "type": "string",
          "description": "To define a second administrative area such as a district or borough"
        },
        "city": {
          "type": "string",
          "description": "Local administrative name such as a city, town, municipality or council, partido, concello, etc. that might comprise smaller entities"
        },
        "stateOrProvince": {
          "type": "string",
          "description": "Region, state, or province"
        },
        "country": {
          "type": "string",
          "description": "Country"
        },
        "@type": {
          "type": "string",
          "description": "type of address"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Where to find a schema for the polymorphic types definitions"
        },
        "geographicLocation": {
          "$ref": "#/definitions/TMF684GeographicLocationType"
        },
        "geographicSubAddress": {
          "$ref": "#/definitions/TMF684SubAddressType"
        }
      },
      "required": [
        "streetName",
        "streetNr",
        "streetType",
        "postcode",
        "locality",
        "city",
        "stateOrProvince",
        "country"
      ]
    },
    "TMF684GeographicLocationType": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of a GeoLocation"
        },
        "href": {
          "type": "string",
          "description": "href of the GeoLocation"
        },
        "name": {
          "type": "string",
          "description": "Name of a GeoLocation"
        },
        "type": {
          "type": "string",
          "description": "Type allows describing Geolocation form: it could be a point, a line, a polygon, a cylinder, etc...."
        },
        "geographicPoint": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF684GeographicPointType"
          },
          "description": "A list of geo points (GeographicPoint [*]). A GeoPoint defines a geographic point through coordinates"
        },
        "accuracy": {
          "type": "string",
          "description": "Accuracy of the coordinate specified"
        },
        "spatialRef": {
          "type": "string",
          "description": "Geocoding referential"
        },
        "@baseType": {
          "type": "string",
          "description": "Geographic Location base type"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of the resource for extensibility purposes"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this REST Resource"
        }
      },
      "required": [
        "type",
        "geographicPoint"
      ]
    },
    "TMF684GeographicPointType": {
      "properties": {
        "x": {
          "type": "string",
          "description": "x coordinate (usually latitude)"
        },
        "y": {
          "type": "string",
          "description": "y coordinate (usually longitude)"
        },
        "z": {
          "type": "string",
          "description": "z coordinate (usually elevation)"
        }
      },
      "required": [
        "accuracy",
        "spatialRef",
        "x",
        "y"
      ]
    },
    "TMF684SubAddressType": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique Identifier of the subAddress"
        },
        "href": {
          "type": "string",
          "description": "href of the subAddress"
        },
        "type": {
          "type": "string",
          "description": "Type of subAddress. It can be a subunit or a private street"
        },
        "name": {
          "type": "string",
          "description": "Name of the subAddress to identify it with a meaningful identification"
        },
        "subUnitType": {
          "type": "string",
          "description": "A string. the type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF."
        },
        "subUnitNumber": {
          "type": "string",
          "description": "the discriminator used for the subunit often just a simple number e.g. FLAT 5, may also be a range"
        },
        "levelType": {
          "type": "string",
          "description": "describes level types within a building"
        },
        "levelNumber": {
          "type": "string",
          "description": "used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2"
        },
        "buildingName": {
          "type": "string",
          "description": "allows for buildings that have well-known names"
        },
        "privateStreetName": {
          "type": "string",
          "description": "private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office"
        },
        "privateStreetNumber": {
          "type": "string",
          "description": "private streets numbers internal to a private street"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of the resource for extensibility purposes"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this REST Resource"
        }
      }
    },
    "TMF684CheckpointType": {
      "properties": {
        "status": {
          "type": "string",
          "description": "Status of the package at the time of the scan event"
        },
        "message": {
          "type": "string",
          "description": "Message describing the performed action e.g.: attempted delivery, departed from warehouse..."
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "checkPost": {
          "type": "string",
          "description": "Location display name"
        },
        "city": {
          "type": "string",
          "description": "Local administrative name such as a city, town, municipality or council, partido, concello, etc. that might comprise smaller entities"
        },
        "stateOrProvince": {
          "type": "string",
          "description": "Region, state, or province"
        },
        "country": {
          "type": "string",
          "description": "Country"
        }
      }
    },
    "TMF691UserInfoType": {
      "properties": {
        "sub": {
          "type": "string",
          "description": "Subject - Unique Identifier for the End-User"
        },
        "name": {
          "type": "string",
          "description": "End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences"
        },
        "given_name": {
          "type": "string",
          "description": "Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters"
        },
        "family_name": {
          "type": "string",
          "description": "Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters"
        },
        "middle_name": {
          "type": "string",
          "description": "Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used"
        },
        "nickname": {
          "type": "string",
          "description": "Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael"
        },
        "preferred_username": {
          "type": "string",
          "description": "Shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe. This value MAY be any valid JSON string including special characters such as @, /, or whitespace"
        },
        "email": {
          "type": "string",
          "description": "End-User's preferred e-mail address. Its value MUST conform to the [RFC5322] addr-spec syntax"
        },
        "phone_number": {
          "type": "string",
          "description": "End-User's preferred telephone number. [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 82) 687 2400. If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678"
        },
        "gender": {
          "type": "string",
          "description": "End-User's gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable"
        },
        "birthdate": {
          "type": "string",
          "description": "End-User's birthday, represented as an [ISO8601-2004] YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year, YYYY format is allowed. Note that depending on the underlying platform's date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates"
        },
        "locale": {
          "type": "string",
          "description": "End-User's locale, represented as a [RFC5646] language tag. This is typically an [ISO639-1] language code in lowercase and an [ISO3166-1] country code in uppercase, separated by a dash. For example, en-US or fr-CA. As a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US"
        },
        "zoneinfo": {
          "type": "string",
          "description": "String from zoneinfo time zone database representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles"
        },
        "profile": {
          "type": "string",
          "description": "URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User"
        },
        "picture": {
          "type": "string",
          "description": "URL of the End-User's profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User"
        },
        "website": {
          "type": "string",
          "description": "URL of the End-User's Web page or blog. This Web page SHOULD contain information published by the End-User or an organization that the End-User is affiliated with"
        },
        "address": {
          "description": "Structure including the End-User's preferred postal address",
          "$ref": "#/definitions/TMF691GeographicAddressType"
        },
        "legalId": {
          "description": "Identification documentation of the contact",
          "items": {
            "$ref": "#/definitions/TMF691IdentificationType"
          },
          "type": "array"
        },
        "userAssets": {
          "description": "List of additional profile information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TMF691UserAssetType"
          }
        },
        "@type": {
          "description": "type of entity",
          "type": "string"
        },
        "@baseType": {
          "description": "base type of entity",
          "type": "string"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "location where to retrieve a schema representing the entity"
        }
      },
      "required": [
        "sub",
        "name"
      ]
    },
    "TMF691GeographicAddressType": {
      "properties": {
        "streetNr": {
          "type": "string",
          "description": "Required if href not included. Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
        },
        "streetNrSuffix": {
          "type": "string",
          "description": "The street number suffix (or suffix of first number for  aranged address)"
        },
        "streetNrLast": {
          "type": "string",
          "description": "Last number in a range of street numbers allocated to a property"
        },
        "streetNrLastSuffix": {
          "type": "string",
          "description": "Last street number suffix for a ranged address"
        },
        "streetName": {
          "type": "string",
          "description": "Required if href not included. Name of the street or other street type"
        },
        "streetType": {
          "type": "string",
          "description": "Required if href not included. Alley, avenue, street, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf"
        },
        "streetSuffix": {
          "type": "string",
          "description": "A modifier denoting a relative direction (E, W, S, N)"
        },
        "postcode": {
          "type": "string",
          "description": "Required if href not included. Descriptor for a postal delivery area (also known as zipcode)"
        },
        "locality": {
          "type": "string",
          "description": "Required if href not included. An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi-rural in nature, or a suburb, a bounded locality within a city, town or shire principally of urban character "
        },
        "city": {
          "type": "string",
          "description": "City that the address is in"
        },
        "stateOrProvince": {
          "type": "string",
          "description": "Required if href not included. the State or Province that the address is in"
        },
        "country": {
          "type": "string",
          "description": "Required if href not included. Country that the address is in"
        },
        "geographicLocation": {
          "$ref": "#/definitions/TMF691GeographicLocationRefOrValueType",
          "description": "A geo location reference, allows describing through coordinate(s) a point, a line or a space"
        },
        "geographicSubAddress": {
          "$ref": "#/definitions/TMF691GeographicSubAddressType",
          "description": "A list of sub addresses. It is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building."
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of the resource for extensibility purposes. Here can be UrbanPropertyAddress, FormattedAddress, JapanesePropertyAddress , AustralianPropertyAddress, etc"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A Link to the schema describing this REST Resource. The basic resource describes UrbanPropertyAddress but a schema could be used for other property address description"
        }
      },
      "required": [
        "streetNr",
        "streetName",
        "streetType",
        "postcode",
        "locality",
        "stateOrProvince",
        "country"
      ]
    },
    "TMF691GeographicSubAddressType": {
      "properties": {
        "type": {
          "type": "string",
          "description": "type of subAddress. It can be a subunit or a private street."
        },
        "name": {
          "type": "string",
          "description": "Name of the subAddress to identify it with a meaningful identification"
        },
        "subUnitType": {
          "type": "string",
          "description": "the type of subunit (e.g.: BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF)"
        },
        "subUnitNumber": {
          "type": "string",
          "description": "the discriminator used for the subunit often just a simple number (e.g.: 5 for FLAT 5), may also be a range"
        },
        "levelType": {
          "type": "string",
          "description": "Describes level types within a building (e.g.: BASEMENT) "
        },
        "levelNumber": {
          "type": "string",
          "description": "used where a level type may be repeated (e.g.: BASEMENT 1, BASEMENT 2)"
        },
        "buildingName": {
          "type": "string",
          "description": "Allows for buildings that have well-known names"
        },
        "privateStreetName": {
          "type": "string",
          "description": "private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office"
        },
        "privateStreetNumber": {
          "type": "string",
          "description": "Private streets numbers internal to a private street"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of the subresource for extensibility purposes"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A Link to the schema describing this REST subResource to allow for extensions"
        }
      }
    },
    "TMF691GeographicLocationRefOrValueType": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the location entity within the server"
        },
        "href": {
          "type": "string",
          "description": "Reference of the location entity. An URI used to query the entity resource"
        },
        "name": {
          "type": "string",
          "description": "Name of a GeoLocation"
        },
        "type": {
          "type": "string",
          "description": "allows describing Geolocation form: it could be a point, a line, a polygon, a cylinder, etc...."
        },
        "geographicPoint": {
          "$ref": "#/definitions/TMF691GeographicPointType",
          "description": "A list of geo points. A GeoPoint defines a geographic point through coordinates"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of the resource for extensibility purposes"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A Link to the schema describing this REST Resource"
        }
      }
    },
    "TMF691GeographicPointType": {
      "properties": {
        "accuracy": {
          "type": "string",
          "description": "Accuracy of the coordinate specified"
        },
        "spatialRef": {
          "type": "string",
          "description": "Geocoding referential"
        },
        "x": {
          "type": "string",
          "description": ". x coordinate (usually latitude)"
        },
        "y": {
          "type": "string",
          "description": "y coordinate (usually longitude)"
        },
        "z": {
          "type": "string",
          "description": "z coordinate (usually elevation)"
        }
      },
      "required": [
        "accuracy",
        "spatialRef",
        "x",
        "y"
      ]
    },
    "TMF691IdentificationType": {
      "description": "Somebody's national ID",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Type of document (e.g.: DNI, passport, RUT, driver's license, etc.)"
        },
        "identificationId": {
          "type": "string",
          "description": "Identification number of the document"
        },
        "country": {
          "type": "string",
          "description": "Country that issued the document"
        },
        "issuingAuthority": {
          "type": "string",
          "description": "Authority that issued the legal identification (e.g.: social security, town hall, ...)"
        },
        "issuingDate": {
          "format": "date-time",
          "type": "string",
          "description": "Date when identification was issued"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A Link to the schema describing this REST subResource to allow for extensions"
        }
      },
      "required": [
        "@type",
        "identificationId",
        "country"
      ]
    },
    "TMF691UserAssetType": {
      "properties": {
        "entityType": {
          "type": "string",
          "enum": [
            "customer",
            "account",
            "product",
            "service",
            "resource"
          ],
          "description": "Type of managed entity (e.g.: product, resource, service, customer, account)"
        },
        "assetType": {
          "type": "string",
          "enum": [
            "mobile",
            "landline",
            "iptv",
            "broadband",
            "email",
            "invoicing"
          ],
          "description": "Second level to define the type of managed element for product/service/resource managed entities (e.g.: mobile line subscription, video platform license, mobile equipment, etc). Allows identifying the specific asset within the server referenced. Supported values are implementation and application specific. Other values can be added if those listed are not enough"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of referenced entity within the entity/asset pair (customerId, accountId, mobile line number, ...)"
        },
        "role": {
          "type": "string",
          "description": "Represents the part played by an individual in relation to being granted a set of entitlements for manageable assets (e.g.: owner, user, viewer, ...)"
        },
        "entitlement": {
          "items": {
            "$ref": "#/definitions/TMF691EntitlementType"
          },
          "type": "array",
          "description": "information about individual entitlements to define access levels to operate over different functions that can be defined in an asset"
        }
      },
      "required": [
        "entityType",
        "id"
      ]
    },
    "TMF691EntitlementType": {
      "properties": {
        "function": {
          "type": "string"
        },
        "action": {
          "type": "string"
        }
      },
      "required": [
        "function",
        "action"
      ]
    }
  }
}
