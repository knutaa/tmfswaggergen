'use strict';

const queryToMongo = require('query-to-mongo');
const MongoClient = require('mongodb').MongoClient;

var mongodb = null; 

function connectHelper(callback) {
  {{#localDatabase}}
  {{! Local MongoDB is used}}
  var config = require('../service/config.json');

  var argv = require('minimist')(process.argv);
  var dbhost = argv.dbhost ? argv.dbhost: config.db_host;
  const mongourl = config.db_prot + "://" + dbhost + ":" + config.db_port + "/" + config.db_name;
  MongoClient.connect(mongourl, { useNewUrlParser: true }, function (err, db) {
  {{/localDatabase}}

  {{^localDatabase}}
  {{! MongoDB in combination with Bluemix is used}}

  //This is copied from the tutorial
  // Now lets get cfenv and ask it to parse the environment variable
  var cfenv = require('cfenv');
  var appenv = cfenv.getAppEnv();

  // Within the application environment (appenv) there's a services object
  var services = appenv.services;

  // The services object is a map named by service so we extract the one for MongoDB
  var mongodb_services = services["compose-for-mongodb"];

  // This check ensures there is a services for MongoDB databases
  assert(!util.isUndefined(mongodb_services), "Must be bound to compose-for-mongodb services");

  // We now take the first bound MongoDB service and extract it's credentials object
  var credentials = mongodb_services[0].credentials;

  // Within the credentials, an entry ca_certificate_base64 contains the SSL pinning key
  // We convert that from a string into a Buffer entry in an array which we use when
  // connecting.
  var ca = [new Buffer(credentials.ca_certificate_base64, 'base64')];

  MongoClient.connect(credentials.uri, {
          mongos: {
              ssl: true,
              sslValidate: true,
              sslCA: ca,
              poolSize: 1,
              reconnectTries: 1
          }, 
          useNewUrlParser: true
      }, function(err, db) {
  {{/localDatabase}}
    {{! This sectin is used for both local and online MongoDB}}
      if (err) {
        mongodb = null;
        callback(err,null);
      } else {
        mongodb = db.db("tmf");
        callback(null,mongodb);
      }
    }
  );
};

function getMongoQuery(req) {
  return queryToMongo(req._parsedUrl.query);
};

function quotedString(s) {
  return s;
};

function connectDb(callback) {
  if(mongodb) {
      mongodb.stats(function(err, stats) {
        if(stats != null) {
          callback(null,mongodb);
        } else {
          connectHelper(callback);
        }
      });
  } else {
    connectHelper(callback);
  }
};

function connect() {
  return new Promise(function(resolve,reject) {
      connectDb(function(err,db) {
        if(err!=null || db==null) {
          reject(err);
        } else {
          resolve(db);
        };
      });
    });
};

function sendDoc(res,code,doc) {
  // delete internal mongo _id from all documents
  if(Array.isArray(doc)) {
    // remove _id from all documents
    doc.forEach(x => {
      delete x._id;
    });
  } else {
    delete doc._id;
  }

  if(doc.href) {
    res.setHeader('Location',  doc.href);
  }

  res.statusCode = code;
  res.setHeader('Content-Type', 'application/json');
  res.end(JSON.stringify(doc));
}


module.exports = { connect, connectDb, getMongoQuery, sendDoc };

