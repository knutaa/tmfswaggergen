'use strict';

//Minimal Service with filtering (equality match only) and attribute selection
//Error Handing Need to define a global error hqndler
//Paging and Range based Iterator to be added
//Notification to be added add listener and implement hub

const util = require('util');
const uuid = require('uuid');

const mongoUtils = require('../utils/mongoUtils');
const swaggerUtils = require('../utils/swaggerUtils');
const notificationUtils = require('../utils/notificationUtils');

const {sendDoc} = require('../utils/mongoUtils');

const {setBaseProperties, traverse, 
       addHref, processCommonAttributes } = require('../utils/operationsUtils');

const {validateRequest} = require('../utils/ruleUtils');

const {processAssignmentRules} = require('../utils/operations');

const {getPayloadType, getPayloadSchema, getResponseType} = require('../utils/swaggerUtils');

const {updateQueryServiceType, updatePayloadServiceType, cleanPayloadServiceType} = require('../utils/swaggerUtils');

const {TError, TErrorEnum, sendError} = require('../utils/errorUtils');

const MongoClient = require('mongodb').MongoClient;
const assert = require('assert');

{{#operations}}
{{#operation}}
exports.{{{operationId}}} = function(req, res, next) {
  /**
   {{#summary}}
   * {{{summary}}}
   {{/summary}}
   {{#notes}}
   * {{{notes}}}
   {{/notes}}
   *
  {{#allParams}}
   * {{paramName}} {{{dataType}}} {{{description}}}{{^required}} (optional){{/required}}
  {{/allParams}}
  {{^returnType}}
   * no response value expected for this operation
  {{/returnType}}
  {{#returnType}}
   * returns {{{returnType}}}
  {{/returnType}}
   **/

  console.log('{{{operationId}}} :: ' + req.method + ' ' + req.url + ' ' + req.headers.host);

  {{^tmfHub}}
  {{#isRestfulIndex}}
  /* matching isRestfulIndex */
 
  var query = mongoUtils.getMongoQuery(req);

  query = swaggerUtils.updateQueryServiceType(query, req,'{{{pathId}}}');

  const resourceType = getResponseType(req);

  const internalError =  new TError(TErrorEnum.INTERNAL_SERVER_ERROR, "Internal database error");
  
  // Find some documents based on criteria plus attribute selection
  mongoUtils.connect().then(db => {
    db.collection(resourceType)
      .find(query.criteria, query.options).toArray()
      .then(doc => {
        doc = cleanPayloadServiceType(doc);
        sendDoc(res, 200, doc);
      })
      .catch(error => {
        console.log("{{{operationId}}}: error=" + error);
        sendError(res, internalError);
      });
  })
  .catch(error => {
    console.log("{{{operationId}}}: error=" + error);
    sendError(res, internalError);
  });

  {{/isRestfulIndex}}
  {{#isRestfulDestroy}}
  /* matching isRestfulDestroy */

  const {{{pathId}}} = String(req.swagger.params.{{{pathId}}}.value);

  var query = {
    id: {{{pathId}}}
  };

  query = swaggerUtils.updateQueryServiceType(query, req,'{{{pathId}}}');

  const resourceType = getResponseType(req); 

  const internalError =  new TError(TErrorEnum.INTERNAL_SERVER_ERROR, "Internal database error");

  mongoUtils.connect().then(db => {
    db.collection(resourceType)
      .deleteOne(query)
      .then(doc => {
        if (doc.result.n == 1) {
           sendDoc(res, 204, {});
           notificationUtils.publish(req,doc);
        } else { 
           sendError(res, new TError(TErrorEnum.RESOURCE_NOT_FOUND,"No resource with given id found"));
        }
      }).catch(error => sendError(res, internalError))
  })
  .catch(error => sendError(res, internalError));

  {{/isRestfulDestroy}}
  {{#isRestfulShow}}
  /* matching isRestfulShow */

  var {{{pathId}}} = String(req.swagger.params.{{{pathId}}}.value);

  var query = mongoUtils.getMongoQuery(req);
  query.criteria.id = {{{pathId}}}

  query = swaggerUtils.updateQueryServiceType(query, req,'{{{pathId}}}');

  const resourceType = getResponseType(req); 

  const internalError =  new TError(TErrorEnum.INTERNAL_SERVER_ERROR, "Internal database error");

  mongoUtils.connect().then(db => {
    db.collection(resourceType)
      .findOne(query.criteria, query.options)
      .then(doc => {
        if(doc) {
          doc = cleanPayloadServiceType(doc);
          sendDoc(res, 200, doc)
        } else {
          sendError(res, new TError(TErrorEnum.RESOURCE_NOT_FOUND,"No resource with given id found"));
        }
      })
      .catch(error => {
        console.log("{{{operationId}}}: error=" + error);
        sendError(res, internalError);
      });
  })
  .catch(error => {
    console.log("{{{operationId}}}: error=" + error);
    sendError(res, internalError);
  });

  {{/isRestfulShow}}
  {{#isRestfulCreate}}
  /* matching isRestfulCreate - argument {{{baseNameLowerCamelCase}}} */
  
  const resourceType = getResponseType(req);
  const requestSchema = getPayloadSchema(req);

  swaggerUtils.getPayload(req)
    .then(payload => validateRequest(req, '{{{operationId}}}', payload))
    .then(payload => traverse(req, requestSchema, payload,[],getPayloadType(req)))
    .then(payload => processCommonAttributes(req, resourceType, payload))
    .then(payload => processAssignmentRules('{{{operationId}}}', payload))
    .then(payload => {

      const internalError =  new TError(TErrorEnum.INTERNAL_SERVER_ERROR, "Internal database error");

      payload = swaggerUtils.updatePayloadServiceType(payload, req,'{{{pathId}}}');

      mongoUtils.connect().then(db => {
        db.collection(resourceType)
          .insertOne(payload)
          .then(() => {

            payload = cleanPayloadServiceType(payload);

            sendDoc(res, 201, payload);
            notificationUtils.publish(req,payload);
          })
          .catch((error) => sendError(res, internalError))
      })
      .catch((error) => sendError(res, internalError));

    })
    .catch( error => {
      console.log("{{{operationId}}}: error=" + error.toString());
      sendError(res, error);
    });
  {{/isRestfulCreate}}
  {{#isRestfulUpdate}}
  /* matching isRestfulUpdate */

  const internalError =  new TError(TErrorEnum.INTERNAL_SERVER_ERROR, "Unable to update resource");

  const resourceType = getResponseType(req);

  swaggerUtils.getPayload(req)
    .then(payload => validateRequest(req,'{{{operationId}}}',payload))
    .then(payload => {

      const {{{pathId}}} = String(req.swagger.params.{{{pathId}}}.value);
      var query = {
       id: {{{pathId}}}
      };

      query = swaggerUtils.updateQueryServiceType(query, req,'{{{pathId}}}');

      payload.id = query.id;

      payload = swaggerUtils.updatePayloadServiceType(payload, req,'{{{pathId}}}');

      mongoUtils.connect().then(db => {

        db.collection(resourceType)
        .findOne(query)
        .then((old) => {
          db.collection(resourceType)
          .replaceOne(query, payload)
          .then(resp => {
            if(resp.result!=undefined && resp.result.n==1) {

              payload = swaggerUtils.cleanPayloadServiceType(payload);

              sendDoc(res, 200, payload);
              notificationUtils.publish(req,payload,old);
              return;
            } else {
              return sendError(res, new TError(TErrorEnum.RESOURCE_NOT_FOUND,"Unable to update resource"));
            }
          })
          .catch((error) => sendError(res, internalError))
        })
        .catch((error) => sendError(res, TError(TErrorEnum.RESOURCE_NOT_FOUND,"No resource with given id")));
      })
      .catch(error => {
        console.log("{{{operationId}}}: error=" + error.toString());
        sendError(res, internalError);
      });
    })
    .catch(error => {
      console.log("{{{operationId}}}: error=" + error.toString());
      sendError(res, error);
    });

  {{/isRestfulUpdate}}
  {{#isRestfulPatch}}
  /* matching isRestfulPatch */

  const internalError =  new TError(TErrorEnum.INTERNAL_SERVER_ERROR, "Unable to update resource");

  const resourceType = getResponseType(req);
  const requestSchema = getPayloadSchema(req);

  const {{{pathId}}} = String(req.swagger.params.{{{pathId}}}.value);
  var query = {
   id: {{{pathId}}}
  };

  query = swaggerUtils.updateQueryServiceType(query, req, '{{{pathId}}}');

  swaggerUtils.getPayload(req)
    .then(payload => validateRequest(req,'{{{operationId}}}',payload))
    .then(payload => traverse(req,requestSchema,payload,[],getPayloadType(req)))
    .then(payload => {

      mongoUtils.connect().then(db => {
        // first check if resource exists
        db.collection(resourceType)
        .findOne(query)
        .then(old => {
          if (old==undefined) {
            return sendError(res, new TError(TErrorEnum.RESOURCE_NOT_FOUND,"No resource with given id"));
          }

          payload = swaggerUtils.updatePayloadServiceType(payload, req, '{{{pathId}}}');
          
          // then update and return the complete resource
          db.collection(resourceType)
            .updateOne(query, {$set: payload}, {upsert: false})
            .then(() => {
              db.collection(resourceType).findOne(query)
                .then((doc) => {

                  doc = swaggerUtils.cleanPayloadServiceType(doc);

                  sendDoc(res, 201, doc);
                  notificationUtils.publish(req,doc,old);
                })
                .catch((error) => {
                  console.log("{{{operationId}}} error=" + error);
                  return sendError(res, internalError);
                });
            })
            .catch((error) => {
              console.log("{{{operationId}}} error=" + error);
              return sendError(res, internalError);
            })
          })
        .catch((error) => {
          console.log("{{{operationId}}} error=" + error);
          return sendError(res, new TError(TErrorEnum.RESOURCE_NOT_FOUND,"No resource with given id"));
        });        
      })
      .catch((error) => {
        console.log("{{{operationId}}} error=" + error);
        return sendError(res, internalError);
      });
  })
  .catch(error => {
    console.log("{{{operationId}}} error=" + error);
    return sendError(res, error);
  });

  {{/isRestfulPatch}}
  {{/tmfHub}}

  {{#tmfHub}}
  {{#isRestfulIndex}}
  /* matching tmfHub & isRestfulIndex */

  notificationUtils.index(req, res, next);
  {{/isRestfulIndex}}
  {{#isRestfulShow}}
  /* matching tmfHub & isRestfulShow */

  notificationUtils.show(req, res, next);  
  {{/isRestfulShow}}
  {{#isRestfulCreate}}
  /* matching tmfHub & isRestfulCreate */

  notificationUtils.register(req, res, next);  
  {{/isRestfulCreate}}
  {{#isRestfulPatch}}
  /* matching tmfHub & isRestfulPatch */

  notificationUtils.patch(req, res, next);  
  {{/isRestfulPatch}}
  {{#isRestfulUpdate}}
  /* matching tmfHub & isRestfulUpdate */

  notificationUtils.update(req, res, next);  
  {{/isRestfulUpdate}}
  {{#isRestfulDestroy}}
  /* matching tmfHub & isRestfulDestroy */

  notificationUtils.unregister(req, res, next);  
  {{/isRestfulDestroy}}
  {{/tmfHub}}

  {{#isAction}}
  /* matching isAction */

  res.setHeader('Content-Type', 'application/json');
  res.statusCode = 200;
  res.end({});
  {{/isAction}}
  {{^isRestful}}
  /* NOT matching isRestful */

  res.setHeader('Content-Type', 'application/json');
  res.statusCode = 500;
  res.end({});
  {{/isRestful}}

};

{{/operation}}
{{/operations}}


